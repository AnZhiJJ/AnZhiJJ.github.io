<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python进阶（三）面向对象-多态、类方法、类属性</title>
      <link href="/pythonadv_OOP_3.html"/>
      <url>/pythonadv_OOP_3.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">面向对象三大特性</li><li class="lvl-2">类属性和实例属性</li><li class="lvl-2">类方法和静态方法</li></ul><h1 id="一-面向对象三大特性">一. 面向对象三大特性</h1><ul class="lvl-0"><li class="lvl-2"><p>封装</p><ul class="lvl-2"><li class="lvl-4">将属性和方法书写到类的里面的操作即为封装</li><li class="lvl-4">封装可以为属性和方法添加私有权限</li></ul></li><li class="lvl-2"><p>继承</p><ul class="lvl-2"><li class="lvl-4">子类默认继承父类的所有属性和方法</li><li class="lvl-4">子类可以重写父类属性和方法</li></ul></li><li class="lvl-2"><p>多态</p><ul class="lvl-2"><li class="lvl-4">传入不同的对象，产生不同的结果</li></ul></li></ul><h1 id="二-多态">二. 多态</h1><h2 id="2-1-了解多态">2.1 了解多态</h2><p>多态指的是一类事物有多种形态，（一个抽象类有多个子类，因而多态的概念依赖于继承）。</p><ul class="lvl-0"><li class="lvl-2"><p>定义：多态是一种使用对象的方式，子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果</p></li><li class="lvl-2"><p>好处：调用灵活，有了多态，更容易编写出通用的代码，做出通用的编程，以适应需求的不断变化！</p></li><li class="lvl-2"><p>实现步骤：</p><ul class="lvl-2"><li class="lvl-4">定义父类，并提供公共方法</li><li class="lvl-4">定义子类，并重写父类方法</li><li class="lvl-4">传递子类对象给调用者，可以看到不同子类执行效果不同</li></ul></li></ul><h2 id="2-2-体验多态">2.2 体验多态</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">work</span>(<span class="params">self</span>):  <span class="comment"># 父类提供统一的方法，哪怕是空方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;指哪打哪...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArmyDog</span>(<span class="title class_ inherited__">Dog</span>):  <span class="comment"># 继承Dog类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">work</span>(<span class="params">self</span>):  <span class="comment"># 子类重写父类同名方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;追击敌人...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DrugDog</span>(<span class="title class_ inherited__">Dog</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">work</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;追查毒品...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">work_with_dog</span>(<span class="params">self, dog</span>):  <span class="comment"># 传入不同的对象，执行不同的代码，即不同的work函数</span></span><br><span class="line">        dog.work()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ad = ArmyDog()</span><br><span class="line">dd = DrugDog()</span><br><span class="line"></span><br><span class="line">daqiu = Person()</span><br><span class="line">daqiu.work_with_dog(ad)</span><br><span class="line">daqiu.work_with_dog(dd)</span><br></pre></td></tr></table></figure><h1 id="三-类属性和实例属性">三. 类属性和实例属性</h1><h2 id="3-1-类属性">3.1 类属性</h2><h3 id="3-1-1-设置和访问类属性">3.1.1 设置和访问类属性</h3><ul class="lvl-0"><li class="lvl-2"><p>类属性就是 <strong>类对象</strong> 所拥有的属性，它被 <strong>该类的所有实例对象 所共有</strong>。</p></li><li class="lvl-2"><p>类属性可以使用 <strong>类对象</strong> 或 <strong>实例对象</strong> 访问。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    tooth = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangcai = Dog()</span><br><span class="line">xiaohei = Dog()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Dog.tooth)  <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(wangcai.tooth)  <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(xiaohei.tooth)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><blockquote><p>类属性的优点</p><ul class="lvl-1"><li class="lvl-2"><strong>记录的某项数据 始终保持一致时</strong>，则定义类属性。</li><li class="lvl-2"><strong>实例属性</strong> 要求 <strong>每个对象</strong> 为其 <strong>单独开辟一份内存空间</strong> 来记录数据，而 <strong>类属性</strong> 为全类所共有 ，<strong>仅占用一份内存</strong>，<strong>更加节省内存空间</strong>。</li></ul></blockquote><h3 id="3-1-2-修改类属性">3.1.2 修改类属性</h3><p>类属性只能通过类对象修改，不能通过实例对象修改，如果通过实例对象修改类属性，表示的是创建了一个实例属性。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    tooth = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangcai = Dog()</span><br><span class="line">xiaohei = Dog()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改类属性</span></span><br><span class="line">Dog.tooth = <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(Dog.tooth)  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(wangcai.tooth)  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(xiaohei.tooth)  <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不能通过对象修改属性，如果这样操作，实则是创建了一个实例属性</span></span><br><span class="line">wangcai.tooth = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(Dog.tooth)  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(wangcai.tooth)  <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(xiaohei.tooth)  <span class="comment"># 12</span></span><br></pre></td></tr></table></figure><h2 id="3-2-实例属性">3.2 实例属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.age = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info_print</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangcai = Dog()</span><br><span class="line"><span class="built_in">print</span>(wangcai.age)  <span class="comment"># 5</span></span><br><span class="line"><span class="comment"># print(Dog.age)  # 报错：实例属性不能通过类访问</span></span><br><span class="line">wangcai.info_print()  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><h1 id="四-类方法和静态方法">四. 类方法和静态方法</h1><h2 id="4-1-类方法">4.1 类方法</h2><h3 id="4-1-1-类方法特点">4.1.1 类方法特点</h3><ul class="lvl-0"><li class="lvl-2"><p>需要用装饰器<code>@classmethod</code>来标识其为类方法，对于类方法，<strong>第一个参数必须是类对象</strong>，一般以<code>cls</code>作为第一个参数。</p></li></ul><h3 id="4-1-2-类方法使用场景">4.1.2 类方法使用场景</h3><ul class="lvl-0"><li class="lvl-2"><p>当方法中 <strong>需要使用类对象</strong> (如访问私有类属性等)时，定义类方法</p></li><li class="lvl-2"><p>类方法一般和类属性配合使用</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    __tooth = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_tooth</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> cls.__tooth</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangcai = Dog()</span><br><span class="line">result = wangcai.get_tooth()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><h2 id="4-2-静态方法">4.2 静态方法</h2><h3 id="4-2-1-静态方法特点">4.2.1 静态方法特点</h3><ul class="lvl-0"><li class="lvl-2"><p>需要通过装饰器<code>@staticmethod</code>来进行修饰，<strong>静态方法既不需要传递类对象也不需要传递实例对象（形参没有self/cls）</strong>。</p></li><li class="lvl-2"><p>静态方法 也能够通过 <strong>实例对象</strong> 和 <strong>类对象</strong> 去访问。</p></li></ul><h2 id="4-2-2-静态方法使用场景">4.2.2 静态方法使用场景</h2><ul class="lvl-0"><li class="lvl-2"><p>当方法中 <strong>既不需要使用实例对象</strong>(如实例对象，实例属性)，<strong>也不需要使用类对象</strong> (如类属性、类方法、创建实例等)时，定义静态方法</p></li><li class="lvl-2"><p><strong>取消不需要的参数传递</strong>，有利于 <strong>减少不必要的内存占用和性能消耗</strong></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info_print</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个狗类，用于创建狗实例....&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangcai = Dog()</span><br><span class="line"><span class="comment"># 静态方法既可以使用对象访问又可以使用类访问</span></span><br><span class="line">wangcai.info_print()</span><br><span class="line">Dog.info_print()</span><br></pre></td></tr></table></figure><h1 id="五-总结">五. 总结</h1><ul class="lvl-0"><li class="lvl-2"><p>面向对象三大特性</p><ul class="lvl-2"><li class="lvl-4">封装</li><li class="lvl-4">继承</li><li class="lvl-4">多态</li></ul></li><li class="lvl-2"><p>类属性</p><ul class="lvl-2"><li class="lvl-4">归属于类对象的属性，所有对象共有的属性</li></ul></li><li class="lvl-2"><p>实例属性</p></li><li class="lvl-2"><p>类方法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xx</span>():</span><br><span class="line">  代码</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>静态方法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xx</span>():</span><br><span class="line">  代码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象编程 </tag>
            
            <tag> Python进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶（二）面向对象-继承</title>
      <link href="/pythonadv_OOP_2.html"/>
      <url>/pythonadv_OOP_2.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">继承的概念</li><li class="lvl-2">单继承</li><li class="lvl-2">多继承</li><li class="lvl-2">子类重写父类的同名属性和方法</li><li class="lvl-2">子类调用父类的同名属性和方法</li><li class="lvl-2">多层继承</li><li class="lvl-2">super()</li><li class="lvl-2">私有属性和私有方法</li></ul><h1 id="一-继承的概念">一. 继承的概念</h1><p>生活中的继承，一般指的是子女继承父辈的财产。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/1.2o321zp07z00.webp" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>拓展1：经典类或旧式类</p></li></ul><p>不由任意内置类型派生出的类，称之为经典类。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">    代码</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>拓展2：新式类</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">  代码</span><br></pre></td></tr></table></figure><p>Python面向对象的继承指的是多个类之间的所属关系，即子类默认继承父类的所有属性和方法，具体如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 父类A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info_print</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子类B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = B()</span><br><span class="line">result.info_print()  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><blockquote><p>在Python中，所有类默认继承object类，object类是顶级类或基类；其他子类叫做派生类。</p></blockquote><h1 id="二-单继承">二. 单继承</h1><blockquote><p>故事主线：一个煎饼果子老师傅，在煎饼果子界摸爬滚打多年，研发了一套精湛的摊煎饼果子的技术。师父要把这套技术传授给他的唯一的最得意的徒弟。</p></blockquote><p>分析：徒弟是不是要继承师父的所有技术？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 师父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Master</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 2. 徒弟类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prentice</span>(<span class="title class_ inherited__">Master</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建对象daqiu</span></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"><span class="comment"># 4. 对象访问实例属性</span></span><br><span class="line"><span class="built_in">print</span>(daqiu.kongfu)</span><br><span class="line"><span class="comment"># 5. 对象调用实例方法</span></span><br><span class="line">daqiu.make_cake()</span><br></pre></td></tr></table></figure><h1 id="三-多继承">三. 多继承</h1><blockquote><p>故事推进：daqiu是个爱学习的好孩子，想学习更多的煎饼果子技术，于是，在百度搜索到黑马程序员，报班学习煎饼果子技术。</p></blockquote><p>所谓多继承意思就是一个类同时继承了多个父类。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Master</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建学校类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">School</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prentice</span>(School, Master):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"><span class="built_in">print</span>(daqiu.kongfu)</span><br><span class="line">daqiu.make_cake()</span><br></pre></td></tr></table></figure><blockquote><p>注意：当一个类有多个父类的时候，默认使用第一个父类的同名属性和方法。</p></blockquote><h1 id="四-子类重写父类同名方法和属性">四. 子类重写父类同名方法和属性</h1><blockquote><p>故事：daqiu掌握了师父和培训的技术后，自己潜心钻研出自己的独门配方的一套全新的煎饼果子技术。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Master</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">School</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 独创配方</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prentice</span>(School, Master):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"><span class="built_in">print</span>(daqiu.kongfu)</span><br><span class="line">daqiu.make_cake()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Prentice.__mro__)</span><br></pre></td></tr></table></figure><blockquote><p>子类和父类具有同名属性和方法，默认使用子类的同名属性和方法。</p></blockquote><h1 id="五-子类调用父类的同名方法和属性">五. 子类调用父类的同名方法和属性</h1><blockquote><p>故事：很多顾客都希望也能吃到古法和黑马的技术的煎饼果子。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Master</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">School</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prentice</span>(School, Master):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 如果是先调用了父类的属性和方法，父类属性会覆盖子类属性，故在调用属性前，先调用自己子类的初始化</span></span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用父类方法，但是为保证调用到的也是父类的属性，必须在调用方法前调用父类的初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_master_cake</span>(<span class="params">self</span>):</span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_school_cake</span>(<span class="params">self</span>):</span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"></span><br><span class="line">daqiu.make_cake()</span><br><span class="line"></span><br><span class="line">daqiu.make_master_cake()</span><br><span class="line"></span><br><span class="line">daqiu.make_school_cake()</span><br><span class="line"></span><br><span class="line">daqiu.make_cake()</span><br></pre></td></tr></table></figure><h1 id="六-多层继承">六. 多层继承</h1><blockquote><p>故事：N年后，daqiu老了，想要把所有技术传承给自己的徒弟。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Master</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">School</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prentice</span>(School, Master):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_master_cake</span>(<span class="params">self</span>):</span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_school_cake</span>(<span class="params">self</span>):</span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 徒孙类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tusun</span>(<span class="title class_ inherited__">Prentice</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaoqiu = Tusun()</span><br><span class="line"></span><br><span class="line">xiaoqiu.make_cake()</span><br><span class="line"></span><br><span class="line">xiaoqiu.make_school_cake()</span><br><span class="line"></span><br><span class="line">xiaoqiu.make_master_cake()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="七-super-调用父类方法">七. super()调用父类方法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Master</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">School</span>(<span class="title class_ inherited__">Master</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法2.1</span></span><br><span class="line">        <span class="comment"># super(School, self).__init__()</span></span><br><span class="line">        <span class="comment"># super(School, self).make_cake()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法2.2</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="built_in">super</span>().make_cake()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prentice</span>(<span class="title class_ inherited__">School</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子技术]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子类调用父类的同名方法和属性：把父类的同名属性和方法再次封装</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_master_cake</span>(<span class="params">self</span>):</span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_school_cake</span>(<span class="params">self</span>):</span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一次性调用父类的同名属性和方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_old_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 方法一：代码冗余；父类类名如果变化，这里代码需要频繁修改</span></span><br><span class="line">        <span class="comment"># Master.__init__(self)</span></span><br><span class="line">        <span class="comment"># Master.make_cake(self)</span></span><br><span class="line">        <span class="comment"># School.__init__(self)</span></span><br><span class="line">        <span class="comment"># School.make_cake(self)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法二: super()</span></span><br><span class="line">        <span class="comment"># 方法2.1 super(当前类名, self).函数()</span></span><br><span class="line">        <span class="comment"># super(Prentice, self).__init__()</span></span><br><span class="line">        <span class="comment"># super(Prentice, self).make_cake()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法2.2 super().函数()</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="built_in">super</span>().make_cake()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"></span><br><span class="line">daqiu.make_old_cake()</span><br></pre></td></tr></table></figure><blockquote><p>注意：使用super() 可以自动查找父类。调用顺序遵循 <code>__mro__</code> 类属性的顺序。比较适合单继承使用。</p></blockquote><h1 id="八-私有权限">八. 私有权限</h1><h2 id="8-1-定义私有属性和方法">8.1 定义私有属性和方法</h2><p>在Python中，可以为实例属性和方法设置私有权限，即设置某个实例属性或实例方法不继承给子类。</p><blockquote><p>故事：daqiu把技术传承给徒弟的同时，不想把自己的钱(2000000个亿)继承给徒弟，这个时候就要为<code>钱</code>这个实例属性设置私有权限。</p></blockquote><p>设置私有权限的方法：在属性名和方法名 前面 加上两个下划线 __。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Master</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">School</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prentice</span>(School, Master):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line">        <span class="comment"># 定义私有属性</span></span><br><span class="line">        self.__money = <span class="number">2000000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义私有方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__info_print</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.kongfu)</span><br><span class="line">        <span class="built_in">print</span>(self.__money)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_master_cake</span>(<span class="params">self</span>):</span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_school_cake</span>(<span class="params">self</span>):</span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 徒孙类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tusun</span>(<span class="title class_ inherited__">Prentice</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"><span class="comment"># 对象不能访问私有属性和私有方法</span></span><br><span class="line"><span class="comment"># print(daqiu.__money)</span></span><br><span class="line"><span class="comment"># daqiu.__info_print()</span></span><br><span class="line"></span><br><span class="line">xiaoqiu = Tusun()</span><br><span class="line"><span class="comment"># 子类无法继承父类的私有属性和私有方法</span></span><br><span class="line"><span class="comment"># print(xiaoqiu.__money)  # 无法访问实例属性__money</span></span><br><span class="line"><span class="comment"># xiaoqiu.__info_print()</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：私有属性和私有方法只能在类里面访问和修改。</p></blockquote><h2 id="8-2-获取和修改私有属性值">8.2 获取和修改私有属性值</h2><p>在Python中，一般定义函数名<code>get_xx</code>用来获取私有属性，定义<code>set_xx</code>用来修改私有属性值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Master</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">School</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prentice</span>(School, Master):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line">        self.__money = <span class="number">2000000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取私有属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_money</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改私有属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_money</span>(<span class="params">self</span>):</span><br><span class="line">        self.__money = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__info_print</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.kongfu)</span><br><span class="line">        <span class="built_in">print</span>(self.__money)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cake</span>(<span class="params">self</span>):</span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_master_cake</span>(<span class="params">self</span>):</span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_school_cake</span>(<span class="params">self</span>):</span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 徒孙类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tusun</span>(<span class="title class_ inherited__">Prentice</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"></span><br><span class="line">xiaoqiu = Tusun()</span><br><span class="line"><span class="comment"># 调用get_money函数获取私有属性money的值</span></span><br><span class="line"><span class="built_in">print</span>(xiaoqiu.get_money())</span><br><span class="line"><span class="comment"># 调用set_money函数修改私有属性money的值</span></span><br><span class="line">xiaoqiu.set_money()</span><br><span class="line"><span class="built_in">print</span>(xiaoqiu.get_money())</span><br></pre></td></tr></table></figure><h1 id="九-总结">九. 总结</h1><ul class="lvl-0"><li class="lvl-2"><p>继承的特点</p><ul class="lvl-2"><li class="lvl-4">子类默认拥有父类的所有属性和方法</li><li class="lvl-4">子类重写父类同名方法和属性</li><li class="lvl-4">子类调用父类同名方法和属性</li></ul></li><li class="lvl-2"><p>super()方法快速调用父类方法</p></li><li class="lvl-2"><p>私有权限</p><ul class="lvl-2"><li class="lvl-4">不能继承给子类的属性和方法需要添加私有权限</li><li class="lvl-4">语法</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>():</span><br><span class="line">  <span class="comment"># 私有属性</span></span><br><span class="line">  __属性名 = 值</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 私有方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__函数名</span>(<span class="params">self</span>):</span><br><span class="line">    代码</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象编程 </tag>
            
            <tag> Python进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶（五）模块和包 https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/博客站点配图/python-logo.6puefdh4wtk0.png</title>
      <link href="/pythonadv_OOP_5.html"/>
      <url>/pythonadv_OOP_5.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">了解模块</li><li class="lvl-2">导入模块</li><li class="lvl-2">制作模块</li><li class="lvl-2"><code>__all__</code></li><li class="lvl-2">包的使用方法</li></ul><h1 id="一-模块">一. 模块</h1><p>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。</p><p>模块能定义函数，类和变量，模块里也能包含可执行的代码。</p><h2 id="1-1-导入模块">1.1. 导入模块</h2><h3 id="1-1-1-导入模块的方式">1.1.1 导入模块的方式</h3><ul class="lvl-0"><li class="lvl-2"><p>import 模块名</p></li><li class="lvl-2"><p>from 模块名 import 功能名</p></li><li class="lvl-2"><p>from 模块名 import *</p></li><li class="lvl-2"><p>import 模块名 as 别名</p></li><li class="lvl-2"><p>from 模块名 import 功能名 as 别名</p></li></ul><h3 id="1-1-2-导入方式详解">1.1.2 导入方式详解</h3><h4 id="1-1-2-1-import">1.1.2.1 import</h4><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 导入模块</span></span><br><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span>, 模块名<span class="number">2.</span>..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 调用功能</span></span><br><span class="line">模块名.功能名()</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>体验</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">9</span>))  <span class="comment"># 3.0</span></span><br></pre></td></tr></table></figure><h4 id="1-1-2-2-from…import…">1.1.2.2 from…import…</h4><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 功能<span class="number">1</span>, 功能<span class="number">2</span>, 功能<span class="number">3.</span>..</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>体验</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">9</span>))</span><br></pre></td></tr></table></figure><h4 id="1-1-2-3-from-…-import">1.1.2.3 from … import *</h4><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>体验</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">9</span>))</span><br></pre></td></tr></table></figure><h4 id="1-1-2-4-as定义别名">1.1.2.4 as定义别名</h4><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模块定义别名</span></span><br><span class="line"><span class="keyword">import</span> 模块名 <span class="keyword">as</span> 别名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能定义别名</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 功能 <span class="keyword">as</span> 别名</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>体验</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模块别名</span></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> tt</span><br><span class="line"></span><br><span class="line">tt.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能别名</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep <span class="keyword">as</span> sl</span><br><span class="line">sl(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="1-2-制作模块">1.2. 制作模块</h2><p>在Python中，每个Python文件都可以作为一个模块，模块的名字就是文件的名字。<strong>也就是说自定义模块名必须要符合标识符命名规则。</strong></p><h3 id="1-2-1-定义模块">1.2.1 定义模块</h3><p>新建一个Python文件，命名为<code>my_module1.py</code>，并定义<code>testA</code>函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br></pre></td></tr></table></figure><h3 id="1-2-2-测试模块">1.2.2 测试模块</h3><p>在实际开中，当一个开发人员编写完一个模块后，为了让模块能够在项目中达到想要的效果，这个开发人员会自行在py文件中添加一些测试信息.，例如，在<code>my_module1.py</code>文件中添加测试代码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>此时，无论是当前文件，还是其他已经导入了该模块的文件，在运行的时候都会自动执行<code>testA</code>函数的调用。</p><p>解决办法如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只在当前文件中调用该函数，其他导入的文件内不符合该条件，则不执行testA函数调用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    testA(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-3-调用模块">1.2.3 调用模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> my_module1</span><br><span class="line">my_module1.testA(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-4-注意事项">1.2.4 注意事项</h3><p>如果使用<code>from .. import ..</code>或<code>from .. import *</code>导入多个模块的时候，且模块内有同名功能。当调用这个同名功能的时候，调用到的是后面导入的模块的功能。</p><ul class="lvl-0"><li class="lvl-2"><p>体验</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模块1代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_test</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块2代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_test</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a - b)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 导入模块和调用功能代码</span></span><br><span class="line"><span class="keyword">from</span> my_module1 <span class="keyword">import</span> my_test</span><br><span class="line"><span class="keyword">from</span> my_module2 <span class="keyword">import</span> my_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># my_test函数是模块2中的函数</span></span><br><span class="line">my_test(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="1-3-模块定位顺序">1.3. 模块定位顺序</h2><p>当导入一个模块，Python解析器对模块位置的搜索顺序是：</p><ol><li class="lvl-3"><p>当前目录</p></li><li class="lvl-3"><p>如果不在当前目录，Python则搜索在shell变量PYTHONPATH下的每个目录。</p></li><li class="lvl-3"><p>如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/</p></li></ol><p>模块搜索路径存储在system模块的sys.path变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。</p><ul class="lvl-0"><li class="lvl-2"><p>注意</p><ul class="lvl-2"><li class="lvl-4">自己的文件名不要和已有模块名重复，否则导致模块功能无法使用</li><li class="lvl-4"><code>使用from 模块名 import 功能</code>的时候，如果功能名字重复，调用到的是最后定义或导入的功能。</li></ul></li></ul><h2 id="1-4-all">1.4. <code>__all__</code></h2><p>如果一个模块文件中有<code>__all__</code>变量，当使用<code>from xxx import *</code>导入时，只能导入这个列表中的元素。</p><ul class="lvl-0"><li class="lvl-2"><p>my_module1模块代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__all__ = [<span class="string">&#x27;testA&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;testA&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testB</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;testB&#x27;</span>)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>导入模块的文件代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> my_module1 <span class="keyword">import</span> *</span><br><span class="line">testA()</span><br><span class="line">testB()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190305175727272.png" alt="image-20190305175727272"></p><h1 id="二-包">二. 包</h1><p>包将有联系的模块组织在一起，即放到同一个文件夹下，并且在这个文件夹创建一个名字为<code>__init__.py</code> 文件，那么这个文件夹就称之为包。</p><h2 id="2-1-制作包">2.1 制作包</h2><p>[New] — [Python Package] — 输入包名 — [OK] — 新建功能模块(有联系的模块)。</p><p>注意：新建包后，包内部会自动创建<code>__init__.py</code>文件，这个文件控制着包的导入行为。</p><h3 id="2-1-1-快速体验">2.1.1 快速体验</h3><ol><li class="lvl-3"><p>新建包<code>mypackage</code></p></li><li class="lvl-3"><p>新建包内模块：<code>my_module1</code> 和 <code>my_module2</code></p></li><li class="lvl-3"><p>模块内代码如下</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my_module1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info_print1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;my_module1&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my_module2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info_print2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;my_module2&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-2-导入包">2.2 导入包</h2><h3 id="2-2-1-方法一">2.2.1 方法一</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.模块名</span><br><span class="line"></span><br><span class="line">包名.模块名.目标</span><br></pre></td></tr></table></figure><h4 id="2-2-1-1-体验">2.2.1.1 体验</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> my_package.my_module1</span><br><span class="line"></span><br><span class="line">my_package.my_module1.info_print1()</span><br></pre></td></tr></table></figure><h3 id="2-2-2-方法二">2.2.2 方法二</h3><p>注意：必须在<code>__init__.py</code>文件中添加<code>__all__ = []</code>，控制允许导入的模块列表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 包名 <span class="keyword">import</span> *</span><br><span class="line">模块名.目标</span><br></pre></td></tr></table></figure><h4 id="2-2-2-1-体验">2.2.2.1 体验</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> my_package <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">my_module1.info_print1()</span><br></pre></td></tr></table></figure><h1 id="三-总结">三. 总结</h1><ul class="lvl-0"><li class="lvl-2"><p>导入模块方法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 目标</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>导入包</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.模块名</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 包名 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>__all__ = []</code> ：允许导入的模块或功能列表</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象编程 </tag>
            
            <tag> Python进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶（四）异常</title>
      <link href="/pythonadv_OOP_4.html"/>
      <url>/pythonadv_OOP_4.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">了解异常</li><li class="lvl-2">捕获异常</li><li class="lvl-2">异常的else</li><li class="lvl-2">异常finally</li><li class="lvl-2">异常的传递</li><li class="lvl-2">自定义异常</li></ul><h1 id="一-了解异常">一. 了解异常</h1><p>当检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的&quot;异常&quot;。</p><p>例如：以<code>r</code>方式打开一个不存在的文件。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190305154200725.png" alt="image-2019030515420072"></p><h1 id="二-异常的写法">二. 异常的写法</h1><h2 id="2-1-语法">2.1 语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能发生错误的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    如果出现异常执行的代码</span><br></pre></td></tr></table></figure><h2 id="2-2-快速体验">2.2 快速体验</h2><p>需求：尝试以<code>r</code>模式打开文件，如果文件不存在，则以<code>w</code>方式打开。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-3-捕获指定异常">2.3 捕获指定异常</h2><h3 id="2-3-1-语法">2.3.1 语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能发生错误的代码</span><br><span class="line"><span class="keyword">except</span> 异常类型:</span><br><span class="line">    如果捕获到该异常类型执行的代码</span><br></pre></td></tr></table></figure><h3 id="2-3-2-体验">2.3.2 体验</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;有错误&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li class="lvl-3">如果尝试执行的代码的异常类型和要捕获的异常类型不一致，则无法捕获异常。</li><li class="lvl-3">一般try下方只放一行尝试执行的代码。</li></ol></blockquote><h3 id="2-3-3-捕获多个指定异常">2.3.3 捕获多个指定异常</h3><p>当捕获多个异常时，可以把要捕获的异常类型的名字，放到except 后，并使用元组的方式进行书写。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;有错误&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-3-4-捕获异常描述信息">2.3.4 捕获异常描述信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError) <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="2-3-5-捕获所有异常">2.3.5 捕获所有异常</h3><p>Exception是所有程序异常类的父类。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="2-4-异常的else">2.4 异常的else</h2><p>else表示的是如果没有异常要执行的代码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是else，是没有异常的时候执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-5-异常的finally">2.5 异常的finally</h2><p>finally表示的是无论是否异常都要执行的代码，例如关闭文件。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没有异常，真开心&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h1 id="三-异常的传递">三. 异常的传递</h1><p>体验异常传递</p><p>需求：</p><p>​1. 尝试只读方式打开test.txt文件，如果文件存在则读取文件内容，文件不存在则提示用户即可。</p><p>​2. 读取内容要求：尝试循环读取内容，读取过程中如果检测到用户意外终止程序，则<code>except</code>捕获异常并提示用户。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            content = f.readline()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(content) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span>(content)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 如果在读取文件的过程中，产生了异常，那么就会捕获到</span></span><br><span class="line">        <span class="comment"># 比如 按下了 ctrl+c</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;意外终止了读取数据&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;关闭文件&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有这个文件&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="四-自定义异常">四. 自定义异常</h1><p>在Python中，抛出自定义异常的语法为<code> raise 异常类对象</code>。</p><p>需求：密码长度不足，则报异常（用户输入密码，如果输入的长度不足3位，则报错，即抛出自定义异常，并捕获该异常）。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义异常类，继承Exception</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShortInputError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, length, min_len</span>):</span><br><span class="line">        self.length = length</span><br><span class="line">        self.min_len = min_len</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置抛出异常的描述信息</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;你输入的长度是<span class="subst">&#123;self.length&#125;</span>, 不能少于<span class="subst">&#123;self.min_len&#125;</span>个字符&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        con = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(con) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">raise</span> ShortInputError(<span class="built_in">len</span>(con), <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;密码已经输入完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="五-总结">五. 总结</h1><ul class="lvl-0"><li class="lvl-2"><p>异常语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  可能发生异常的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  如果出现异常执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  没有异常执行的代码</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">  无论是否异常都要执行的代码</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>捕获异常</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">except</span> 异常类型:</span><br><span class="line">  代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> 异常类型 <span class="keyword">as</span> xx:</span><br><span class="line">代码</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>自定义异常</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 自定义异常类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">异常类类名</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">  代码</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置抛出异常的描述信息</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="keyword">return</span> ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 抛出异常</span></span><br><span class="line"><span class="keyword">raise</span> 异常类名()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获异常</span></span><br><span class="line"><span class="keyword">except</span> Exception...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象编程 </tag>
            
            <tag> Python进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶（一）面向对象基础</title>
      <link href="/pythonadv_OOP_1.html"/>
      <url>/pythonadv_OOP_1.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">理解面向对象</li><li class="lvl-2">类和对象</li><li class="lvl-2">添加和获取对象属性</li><li class="lvl-2">魔法方法</li></ul><h1 id="一-理解面向对象">一. 理解面向对象</h1><p>面向对象是一种抽象化的编程思想，很多编程语言中都有的一种思想。</p><p>例如：洗衣服</p><p>思考：几种途径可以完成洗衣服？</p><p>答： 手洗 和 机洗。</p><p>手洗：找盆 - 放水 - 加洗衣粉 - 浸泡 - 搓洗 - 拧干水 - 倒水 - 漂洗N次 - 拧干 - 晾晒。</p><p>机洗：打开洗衣机 - 放衣服 - 加洗衣粉 - 按下开始按钮 - 晾晒。</p><p>思考：对比两种洗衣服途径，同学们发现了什么？</p><p>答：机洗更简单</p><p>思考：机洗，只需要找到一台洗衣机，加入简单操作就可以完成洗衣服的工作，而不需要关心洗衣机内部发生了什么事情。</p><blockquote><p>面向对象编程相当于洗衣机制造商作用。</p><p>总结：<mark>面向对象就是将编程当成是一个事物，对外界来说，事物是直接使用的，不用去管他内部的情况。而编程就是设置事物能够做什么事。</mark></p></blockquote><h1 id="二-类和对象">二. 类和对象</h1><p>思考：洗衣机洗衣服描述过程中，洗衣机其实就是一个事物，即对象，洗衣机对象哪来的呢？</p><p>答：洗衣机是由工厂工人制作出来。</p><p>思考：工厂工人怎么制作出的洗衣机？</p><p>答：工人根据设计师设计的功能图纸制作洗衣机。</p><p>总结：图纸  → 洗衣机 → 洗衣服。</p><p>在面向对象编程过程中，有两个重要组成部分：<mark>类</mark> 和 <mark>对象</mark>。</p><p>==类和对象的关系：用类去创建一个对象。==也称，<strong>用类实例化一个对象</strong>。</p><h2 id="2-1-理解类和对象">2.1 理解类和对象</h2><h3 id="2-1-1-类">2.1.1 类</h3><p><strong>类</strong>是对一系列具有相同<mark>特征</mark>和<mark>行为</mark>的事物的统称，是一个<mark>抽象的概念</mark>，不是真实存在的事物。</p><ul class="lvl-0"><li class="lvl-2"><p>特征即是属性（变量）</p></li><li class="lvl-2"><p>行为即是方法（函数）</p></li></ul><p><strong>类</strong>比如是制造洗衣机时要用到的<strong>图纸</strong>，也就是说<mark>类是用来创建对象</mark>。洗衣机功能类似程序中的函数。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190222154356953.png" alt="image-20190222154356953" style="zoom: 25%;" /><h3 id="2-1-2-对象">2.1.2 对象</h3><p><strong>对象</strong>是类创建出来的真实存在的<strong>事物</strong>，例如：洗衣机。</p><blockquote><p>注意：开发中，先有类，再有对象。</p></blockquote><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190222154727379.png" alt="image-20190222154727379" style="zoom:33%;" /><h2 id="2-2-面向对象实现方法">2.2 面向对象实现方法</h2><h3 id="2-2-1-定义类">2.2.1 定义类</h3><p>Python2中类分为：经典类 和 新式类</p><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>():  <span class="comment"># 小括号是放要继承的类的类名</span></span><br><span class="line">    代码</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><blockquote><p>注意：类名要满足标识符命名规则，同时遵循<mark>大驼峰命名习惯</mark>。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Washer</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wash</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我会洗衣服&#x27;</span>)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>拓展：经典类</p></li></ul><p>不由任意内置类型派生出的类，称之为经典类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">    代码</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h3 id="2-2-2-创建对象">2.2.2 创建对象</h3><p><strong>对象又名实例。</strong></p><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对象名 = 类名()</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">haier1 = Washer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;__main__.Washer object at 0x0000018B7B224240&gt;</span></span><br><span class="line"><span class="built_in">print</span>(haier1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># haier对象调用实例方法/对象方法</span></span><br><span class="line">haier1.wash()</span><br></pre></td></tr></table></figure><blockquote><p>注意：创建对象的过程也叫实例化对象。</p></blockquote><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求：洗衣机，功能：能洗衣服；</span></span><br><span class="line"><span class="comment"># 1 定义洗衣机类</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">class 类名():</span></span><br><span class="line"><span class="string">    代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Washer</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wash</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;洗衣开始&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">water</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;进水&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dry</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;干燥&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 创建对象</span></span><br><span class="line"><span class="comment"># 对象名 = 类名()</span></span><br><span class="line">haier = Washer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.验证成果</span></span><br><span class="line"><span class="comment"># 打印Haier对象</span></span><br><span class="line"><span class="built_in">print</span>(haier)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(haier))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用wash功能、dry功能--实例方法/对象方法-- 对象名.wash()</span></span><br><span class="line">haier.wash()</span><br><span class="line">haier.water()</span><br></pre></td></tr></table></figure><h3 id="2-2-3-self">2.2.3 self</h3><p><mark>self指的是调用该函数的对象。</mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Washer</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wash</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我会洗衣服&#x27;</span>)</span><br><span class="line">        <span class="comment"># haier1对象：&lt;__main__.Washer object at 0x0000024BA2B34240&gt;</span></span><br><span class="line">        <span class="comment"># haier2对象：&lt;__main__.Washer object at 0x0000022005857EF0&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建对象</span></span><br><span class="line">haier1 = Washer()</span><br><span class="line"><span class="comment"># &lt;__main__.Washer object at 0x0000018B7B224240&gt;</span></span><br><span class="line"><span class="built_in">print</span>(haier1)</span><br><span class="line"><span class="comment"># haier1对象调用实例方法</span></span><br><span class="line">haier1.wash()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">haier2 = Washer()</span><br><span class="line"><span class="comment"># &lt;__main__.Washer object at 0x0000022005857EF0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(haier2)</span><br><span class="line"><span class="comment"># haier2对象调用实例方法</span></span><br><span class="line">haier2.wash()</span><br></pre></td></tr></table></figure><blockquote><p>注意：打印对象和self得到的结果是一致的，都是当前对象的内存中存储地址。所以self指的是调用该函数的对象。</p><p>在示例中第一个调用self即为对象haier1、第二个调用self即为对象haier2，并将其传入函数内部。</p></blockquote><p><strong>总结：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>一个类可以创建多个对象。</p></li><li class="lvl-2"><p>多个对象都调用函数时，self地址不相同。</p></li></ul><h1 id="三-添加和获取对象属性">三. 添加和获取对象属性</h1><p><mark>属性即是特征</mark>，比如：洗衣机的宽度、高度、重量…</p><p>对象属性既可以在类外面添加和获取，也能在类里面添加和获取。</p><h2 id="3-1-类外面添加对象属性">3.1 类外面添加对象属性</h2><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对象名.属性名 = 值</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">haier1.width = <span class="number">500</span></span><br><span class="line">haier1.height = <span class="number">800</span></span><br></pre></td></tr></table></figure><h2 id="3-2-类外面获取对象属性">3.2 类外面获取对象属性</h2><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对象名.属性名</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;haier1洗衣机的宽度是<span class="subst">&#123;haier1.width&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;haier1洗衣机的高度是<span class="subst">&#123;haier1.height&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：在类外面添加对象属性和获取对象属性</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Washer</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wash</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;洗衣服&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">haier1 = Washer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类外面添加对象属性</span></span><br><span class="line">haier1.width = <span class="number">400</span></span><br><span class="line">                                                                                                                                            </span><br><span class="line"></span><br><span class="line"><span class="comment"># 类外面获取对象属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;洗衣机宽度<span class="subst">&#123;haier1.width&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;洗衣机高度<span class="subst">&#123;haier1.height&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-3-类里面获取对象属性">3.3 类里面获取对象属性</h2><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.属性名</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Washer</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wash</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;洗衣服&#x27;</span>)</span><br><span class="line">    <span class="comment">#获取实例属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># self.属性名</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;haier1洗衣机的宽度<span class="subst">&#123;self.width&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(self.width)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;haier1洗衣机的高度<span class="subst">&#123;self.height&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(self.height)</span><br><span class="line"></span><br><span class="line">haier1 = Washer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类外面添加对象属性</span></span><br><span class="line">haier1.width = <span class="number">400</span></span><br><span class="line">haier1.height = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象调用实例方法</span></span><br><span class="line">haier1.print_info()</span><br></pre></td></tr></table></figure><h1 id="四-魔法方法">四. 魔法方法</h1><p>在Python中，<code>__xx__()</code>的函数叫做魔法方法，指的是<strong>具有特殊功能的函数</strong>。</p><h2 id="4-1-init">4.1 <code>__init__()</code></h2><h3 id="4-1-1-体验-init">4.1.1 体验<code>__init__()</code></h3><p>思考：洗衣机的宽度高度是与生俱来的属性，可 不可以在生产过程中就赋予这些属性呢？</p><p>答：理应如此。</p><p><mark><code>__init__()</code>方法的作用：初始化对象。</mark></p><p><code>__init__()</code>用来设置类自带的属性，设置对象的初始化属性。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Washer</span>():    </span><br><span class="line">    <span class="comment"># 定义初始化功能的函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 类里面添加实例属性</span></span><br><span class="line">        self.width = <span class="number">500</span></span><br><span class="line">        self.height = <span class="number">800</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 类里面调用实例属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;洗衣机的宽度是<span class="subst">&#123;self.width&#125;</span>, 高度是<span class="subst">&#123;self.height&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">haier1 = Washer()</span><br><span class="line">haier1.print_info()</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul class="lvl-1"><li class="lvl-2"><code>__init__()</code>方法，在创建一个对象时默认被调用，不需要手动调用。</li><li class="lvl-2"><code>__init__(self)</code>中的self参数，不需要开发者传递，python解释器会自动把当前的对象引用传递过去。</li></ul></blockquote><h3 id="4-1-2-带参数的-init">4.1.2 带参数的<code>__init__()</code></h3><p>思考：一个类可以创建多个对象，如何对不同的对象设置不同的初始化属性呢？</p><p>答：传参数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.定义类： 带参数的init:宽度和高度；  实例方法： 调用实例属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Washer</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, width, height</span>):</span><br><span class="line">        <span class="comment"># 类里面添加实例属性self.width = width  self.height = height</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 类里面调用实例属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;宽度<span class="subst">&#123;self.width&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;高度<span class="subst">&#123;self.height&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建对象，创建多个对象且属性值不同； 调用实例方法</span></span><br><span class="line">haiher1 = Washer(<span class="number">100</span>, <span class="number">200</span>) <span class="comment"># 传入实参</span></span><br><span class="line">haiher1.print_info()</span><br><span class="line"></span><br><span class="line"><span class="comment"># haiher2 = Washer()</span></span><br><span class="line"><span class="comment"># haiher2.print_info()</span></span><br><span class="line"></span><br><span class="line">haiher3 = Washer(<span class="number">300</span>, <span class="number">700</span>) <span class="comment"># 传入实参</span></span><br><span class="line">haiher3.print_info()</span><br></pre></td></tr></table></figure><h2 id="4-2-str">4.2  <code>__str__()</code></h2><p><strong>当使用print输出对象的时候，默认打印对象的内存地址</strong>。</p><p><strong>如果类定义了<code>__str__</code>方法，那么就会打印从在这个方法中 return 的数据。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Washer</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, width, height</span>):</span><br><span class="line">      <span class="comment"># 类里面添加实例属性self.width = width  self.height = height</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这是海尔洗衣机的说明书&#x27;</span></span><br><span class="line"></span><br><span class="line">haier1 = Washer(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment"># 这是海尔洗衣机的说明书</span></span><br><span class="line"><span class="built_in">print</span>(haier1)</span><br></pre></td></tr></table></figure><h2 id="4-3-del">4.3  <code>__del__()</code></h2><p>当删除对象时，python解释器也会默认调用<code>__del__()</code>方法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Washer</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, width, height</span>):</span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self&#125;</span>对象已经被删除&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">haier1 = Washer(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;__main__.Washer object at 0x0000026118223278&gt;对象已经被删除</span></span><br><span class="line"><span class="keyword">del</span> haier1</span><br></pre></td></tr></table></figure><h1 id="五-综合应用">五. 综合应用</h1><h2 id="5-1-烤地瓜">5.1 烤地瓜</h2><h3 id="5-1-1-需求">5.1.1 需求</h3><p>需求主线：</p><ol><li class="lvl-4"><p>被烤的时间和对应的地瓜状态：</p><p>0-3分钟：生的</p><p>3-5分钟：半生不熟</p><p>5-8分钟：熟的</p><p>超过8分钟：烤糊了</p></li><li class="lvl-4"><p>添加的调料：</p><p>用户可以按自己的意愿添加调料</p></li></ol><h3 id="5-1-2-步骤分析">5.1.2 步骤分析</h3><p>需求涉及一个事物： 地瓜，故案例涉及一个类：地瓜类。</p><h4 id="5-1-2-1-定义类">5.1.2.1 定义类</h4><ul class="lvl-0"><li class="lvl-2"><p>地瓜的属性</p><ul class="lvl-2"><li class="lvl-4">被烤的时间</li><li class="lvl-4">地瓜的状态</li><li class="lvl-4">添加的调料</li></ul></li><li class="lvl-2"><p>地瓜的方法</p><ul class="lvl-2"><li class="lvl-4">被烤<ul class="lvl-4"><li class="lvl-6">用户根据意愿设定每次烤地瓜的时间</li><li class="lvl-6">判断地瓜被烤的总时间是在哪个区间，修改地瓜状态</li></ul></li><li class="lvl-4">添加调料<ul class="lvl-4"><li class="lvl-6">用户根据意愿设定添加的调料</li><li class="lvl-6">将用户添加的调料存储</li></ul></li></ul></li><li class="lvl-2"><p>显示对象信息</p></li></ul><h4 id="5-1-2-2-创建对象，调用相关实例方法">5.1.2.2 创建对象，调用相关实例方法</h4><h3 id="5-1-3-代码实现">5.1.3 代码实现</h3><h4 id="5-1-3-1-定义类">5.1.3.1 定义类</h4><ul class="lvl-0"><li class="lvl-2"><p>地瓜属性</p><ul class="lvl-2"><li class="lvl-4">定义地瓜初始化属性，后期根据程序推进更新实例属性</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SweetPotato</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 被烤的时间</span></span><br><span class="line">        self.cook_time = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 地瓜的状态</span></span><br><span class="line">        self.cook_static = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="comment"># 调料列表</span></span><br><span class="line">        self.condiments = []</span><br></pre></td></tr></table></figure><h4 id="5-1-3-2-定义烤地瓜方法">5.1.3.2 定义烤地瓜方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SweetPotato</span>():</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cook</span>(<span class="params">self, time</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;烤地瓜的方法&quot;&quot;&quot;</span></span><br><span class="line">        self.cook_time += time</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= self.cook_time &lt; <span class="number">3</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">3</span> &lt;= self.cook_time &lt; <span class="number">5</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;半生不熟&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">5</span> &lt;= self.cook_time &lt; <span class="number">8</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;熟了&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.cook_time &gt;= <span class="number">8</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;烤糊了&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="5-1-3-3-书写str魔法方法，用于输出对象状态">5.1.3.3 书写str魔法方法，用于输出对象状态</h4><p><code>return f'这个地瓜烤了&#123;self.cook_time&#125;分钟, 状态是&#123;self.cook_static&#125;</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SweetPotato</span>():</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;这个地瓜烤了<span class="subst">&#123;self.cook_time&#125;</span>分钟, 状态是<span class="subst">&#123;self.cook_static&#125;</span>&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-1-3-4-创建对象，测试实例属性和实例方法">5.1.3.4  创建对象，测试实例属性和实例方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">digua1 = SweetPotato()</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br></pre></td></tr></table></figure><h4 id="5-1-3-5-定义添加调料方法，并调用该实例方法">5.1.3.5 定义添加调料方法，并调用该实例方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SweetPotato</span>():</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_condiments</span>(<span class="params">self, condiment</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加调料&quot;&quot;&quot;</span></span><br><span class="line">        self.condiments.append(condiment)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;这个地瓜烤了<span class="subst">&#123;self.cook_time&#125;</span>分钟, 状态是<span class="subst">&#123;self.cook_static&#125;</span>, 添加的调料有<span class="subst">&#123;self.condiments&#125;</span>&#x27;</span></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">digua1 = SweetPotato()</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line">digua1.add_condiments(<span class="string">&#x27;酱油&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line">digua1.add_condiments(<span class="string">&#x27;辣椒面儿&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br></pre></td></tr></table></figure><h3 id="5-1-4-代码总览">5.1.4 代码总览</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SweetPotato</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 被烤的时间</span></span><br><span class="line">        self.cook_time = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 地瓜的状态</span></span><br><span class="line">        self.cook_static = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="comment"># 调料列表</span></span><br><span class="line">        self.condiments = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cook</span>(<span class="params">self, time</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;烤地瓜的方法&quot;&quot;&quot;</span></span><br><span class="line">        self.cook_time += time</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= self.cook_time &lt; <span class="number">3</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">3</span> &lt;= self.cook_time &lt; <span class="number">5</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;半生不熟&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">5</span> &lt;= self.cook_time &lt; <span class="number">8</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;熟了&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.cook_time &gt;= <span class="number">8</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;烤糊了&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_condiments</span>(<span class="params">self, condiment</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加调料&quot;&quot;&quot;</span></span><br><span class="line">        self.condiments.append(condiment)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;这个地瓜烤了<span class="subst">&#123;self.cook_time&#125;</span>分钟, 状态是<span class="subst">&#123;self.cook_static&#125;</span>, 添加的调料有<span class="subst">&#123;self.condiments&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">digua1 = SweetPotato()</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line">digua1.add_condiments(<span class="string">&#x27;酱油&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line">digua1.add_condiments(<span class="string">&#x27;辣椒面儿&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br></pre></td></tr></table></figure><p><strong>自己编：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.定义类:初始化属性，被烤时间和添加调料方法，显示对象信息的str</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sweet_Potato</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 添加初始化属性</span></span><br><span class="line">        <span class="comment"># 被烤时间</span></span><br><span class="line">        self.cook_time = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 地瓜的状态</span></span><br><span class="line">        self.cook_status = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="comment"># 调料列表</span></span><br><span class="line">        self.condiments = [] <span class="comment"># 空列表，为了用户可以多种意愿追加调料</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cook</span>(<span class="params">self, time</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;烤地瓜的方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 计算地瓜整体被烤的时间</span></span><br><span class="line">        self.cook_time += time</span><br><span class="line">        <span class="comment"># 用整体烤过的时间判断地瓜状态</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= self.cook_time &lt; <span class="number">3</span>:</span><br><span class="line">            self.cook_status = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">3</span> &lt;= self.cook_time &lt; <span class="number">5</span>:</span><br><span class="line">            self.cook_status = <span class="string">&#x27;半生不熟&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">5</span> &lt;= self.cook_time &lt; <span class="number">8</span>:</span><br><span class="line">            self.cook_status = <span class="string">&#x27;熟的&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">8</span> &lt;= self.cook_time:</span><br><span class="line">            self.cook_status = <span class="string">&#x27;烤糊了&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;设置的烤地瓜时间<span class="subst">&#123;self.cook_time&#125;</span>,状态是<span class="subst">&#123;self.cook_status&#125;</span>，调料有<span class="subst">&#123;self.condiments&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_condiments</span>(<span class="params">self, condiment</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加调料&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 用户意愿的调料追加到调料列表</span></span><br><span class="line">        <span class="comment">#  self.condiments = [] 初始时为空列表</span></span><br><span class="line">        self.condiments.append(condiment)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象并调用对应的实例方法</span></span><br><span class="line">kaoji = Sweet_Potato()</span><br><span class="line"><span class="built_in">print</span>(kaoji)</span><br><span class="line"></span><br><span class="line">kaoji.cook(<span class="number">2</span>)</span><br><span class="line">kaoji.add_condiments(<span class="string">&#x27;孜然&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(kaoji)</span><br><span class="line"></span><br><span class="line">kaoji.cook(<span class="number">1</span>)</span><br><span class="line">kaoji.add_condiments(<span class="string">&#x27;麻辣&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(kaoji)</span><br><span class="line"></span><br><span class="line">kaoji.cook(<span class="number">3</span>)</span><br><span class="line">kaoji.add_condiments(<span class="string">&#x27;甜面酱&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(kaoji)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-2-搬家具">5.2 搬家具</h2><h3 id="5-2-1-需求">5.2.1 需求</h3><p>将小于房子剩余面积的家具摆放到房子中</p><h3 id="5-2-2-步骤分析">5.2.2 步骤分析</h3><p>需求涉及两个事物：房子 和 家具，故被案例涉及两个类：房子类 和 家具类。</p><h4 id="5-2-2-1-定义类">5.2.2.1 定义类</h4><ul class="lvl-0"><li class="lvl-2"><p>房子类</p><ul class="lvl-2"><li class="lvl-4">实例属性<ul class="lvl-4"><li class="lvl-6">房子地理位置</li><li class="lvl-6">房子占地面积</li><li class="lvl-6">房子剩余面积</li><li class="lvl-6">房子内家具列表</li></ul></li><li class="lvl-4">实例方法<ul class="lvl-4"><li class="lvl-6">容纳家具</li></ul></li><li class="lvl-4">显示房屋信息</li></ul></li><li class="lvl-2"><p>家具类</p><ul class="lvl-2"><li class="lvl-4">家具名称</li><li class="lvl-4">家具占地面积</li></ul></li></ul><h4 id="5-2-2-2-创建对象并调用相关方法">5.2.2.2 创建对象并调用相关方法</h4><h3 id="5-2-3-代码实现">5.2.3 代码实现</h3><h4 id="5-2-3-1-定义类">5.2.3.1 定义类</h4><ul class="lvl-0"><li class="lvl-2"><p>家具类</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Furniture</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, area</span>):</span><br><span class="line">        <span class="comment"># 家具名字</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 家具占地面积</span></span><br><span class="line">        self.area = area</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><h4 id="房子类">房子类</h4></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, address, area</span>):</span><br><span class="line">        <span class="comment"># 地理位置</span></span><br><span class="line">        self.address = address</span><br><span class="line">        <span class="comment"># 房屋面积</span></span><br><span class="line">        self.area = area</span><br><span class="line">        <span class="comment"># 剩余面积</span></span><br><span class="line">        self.free_area = area</span><br><span class="line">        <span class="comment"># 家具列表</span></span><br><span class="line">        self.furniture = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;房子坐落于<span class="subst">&#123;self.address&#125;</span>, 占地面积<span class="subst">&#123;self.area&#125;</span>, 剩余面积<span class="subst">&#123;self.free_area&#125;</span>, 家具有<span class="subst">&#123;self.furniture&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_furniture</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;容纳家具&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.free_area &gt;= item.area:</span><br><span class="line">            self.furniture.append(item.name)</span><br><span class="line">            <span class="comment"># 家具搬入后，房屋剩余面积 = 之前剩余面积 - 该家具面积</span></span><br><span class="line">            self.free_area -= item.area</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;家具太大，剩余面积不足，无法容纳&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="5-2-3-2-创建对象并调用实例属性和方法">5.2.3.2 创建对象并调用实例属性和方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bed = Furniture(<span class="string">&#x27;双人床&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">jia1 = Home(<span class="string">&#x27;北京&#x27;</span>, <span class="number">1200</span>)</span><br><span class="line"><span class="built_in">print</span>(jia1)</span><br><span class="line"></span><br><span class="line">jia1.add_furniture(bed)</span><br><span class="line"><span class="built_in">print</span>(jia1)</span><br><span class="line"></span><br><span class="line">sofa = Furniture(<span class="string">&#x27;沙发&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">jia1.add_furniture(sofa)</span><br><span class="line"><span class="built_in">print</span>(jia1)</span><br><span class="line"></span><br><span class="line">ball = Furniture(<span class="string">&#x27;篮球场&#x27;</span>, <span class="number">1500</span>)</span><br><span class="line">jia1.add_furniture(ball)</span><br><span class="line"><span class="built_in">print</span>(jia1)</span><br></pre></td></tr></table></figure><h3 id="5-2-4-代码总览">5.2.4 代码总览</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1,定义类-家具类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Furniture</span>():</span><br><span class="line">    <span class="comment"># 初始化属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, area</span>):</span><br><span class="line">        <span class="comment"># 家具名字</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 家具占地面积</span></span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.定义类——房子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span>():</span><br><span class="line">    <span class="comment"># 初始化属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, address, area</span>):</span><br><span class="line">        <span class="comment"># 房子地理位置</span></span><br><span class="line">        self.address = address</span><br><span class="line">        <span class="comment"># 房屋面积</span></span><br><span class="line">        self.area = area</span><br><span class="line">        <span class="comment"># 剩余面积</span></span><br><span class="line">        self.free_area = area</span><br><span class="line">        <span class="comment"># 家具列表</span></span><br><span class="line">        self.furniture_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;房子地理位置<span class="subst">&#123;self.address&#125;</span>,房屋面积<span class="subst">&#123;self.area&#125;</span>，剩余面积<span class="subst">&#123;self.free_area&#125;</span>,家具列表<span class="subst">&#123;self.furniture_list&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_furniture</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;容纳家具&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 如果 家具占地面积 &lt;= 房子剩余面积； 可以搬入（家具列表添加家具名字数据 并 更新房子剩余面积）</span></span><br><span class="line">        <span class="keyword">if</span> self.free_area &gt;= item.area:  <span class="comment"># item.area调用了家具类中self.area属性</span></span><br><span class="line">            self.furniture_list.append(item.name)  <span class="comment"># item.name调用了家具类中self.name属性</span></span><br><span class="line">            <span class="comment"># 家具搬入后，房屋剩余面积 = 之前剩余面积 - 该家具面积</span></span><br><span class="line">            self.free_area -= item.area</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;家具太大，剩余面积不足，无法容纳&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bed = Furniture(<span class="string">&#x27;双人床&#x27;</span>, <span class="number">21</span>)</span><br><span class="line">set_furniture = Home(<span class="string">&#x27;北京&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="comment"># print(set_furniture)</span></span><br><span class="line">set_furniture.add_furniture(bed)</span><br><span class="line"><span class="built_in">print</span>(set_furniture)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sofa = Furniture(<span class="string">&#x27;沙发&#x27;</span>, <span class="number">211</span>)</span><br><span class="line">set_furniture.add_furniture(sofa)</span><br><span class="line"><span class="built_in">print</span>(set_furniture)</span><br><span class="line"></span><br><span class="line">Tv = Furniture(<span class="string">&#x27;电视&#x27;</span>, <span class="number">321</span>)</span><br><span class="line">set_furniture.add_furniture(Tv)</span><br><span class="line"><span class="built_in">print</span>(set_furniture)</span><br></pre></td></tr></table></figure><h1 id="六-总结">六. 总结</h1><ul class="lvl-0"><li class="lvl-2"><p>面向对象重要组成部分</p><ul class="lvl-2"><li class="lvl-4">类<ul class="lvl-4"><li class="lvl-6">创建类</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>():</span><br><span class="line">  代码</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4"><p>对象</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对象名 = 类名()</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>添加对象属性</p><ul class="lvl-2"><li class="lvl-4">类外面</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对象名.属性名 = 值</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4"><p>类里面</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.属性名 = 值</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>获取对象属性</p><ul class="lvl-2"><li class="lvl-4">类外面</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对象名.属性名</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4"><p>类里面</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.属性名</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>魔法方法</p><ul class="lvl-2"><li class="lvl-4"><code>__init__()</code>: 初始化</li><li class="lvl-4"><code>__str__()</code>:输出对象信息</li><li class="lvl-4"><code>__del__()</code>:删除对象时调用</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象编程 </tag>
            
            <tag> Python进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（十六）文件操作</title>
      <link href="/pythonbasic16.html"/>
      <url>/pythonbasic16.html</url>
      
        <content type="html"><![CDATA[<h1 id="课程：文件操作">课程：文件操作</h1><h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2"><p>文件操作的作用</p></li><li class="lvl-2"><p>文件的基本操作</p><ul class="lvl-2"><li class="lvl-4">打开</li><li class="lvl-4">读写</li><li class="lvl-4">关闭</li></ul></li><li class="lvl-2"><p>文件备份</p></li><li class="lvl-2"><p>文件和文件夹的操作</p></li></ul><h1 id="一-文件操作的作用">一. 文件操作的作用</h1><p>思考：什么是文件？</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/1.jpg" style="zoom:67%;" /><p>思考：文件操作包含什么？</p><p>答：打开、关闭、读、写、复制…</p><p>思考：文件操作的的作用是什么？</p><p>答：读取内容、写入内容、备份内容…</p><blockquote><p>总结：文件操作的作用就是<mark>把一些内容(数据)存储存放起来，可以让程序下一次执行的时候直接使用，而不必重新制作一份，省时省力</mark>。</p></blockquote><h1 id="二-文件的基本操作">二. 文件的基本操作</h1><h2 id="2-1-文件操作步骤">2.1 文件操作步骤</h2><ol><li class="lvl-3"><p>打开文件，如果文件不存在，则会新建文件</p></li><li class="lvl-3"><p>读写等操作</p></li><li class="lvl-3"><p>关闭文件(如果不关闭,文件会一直占用内存)</p></li></ol><blockquote><p>注意：可以只打开和关闭文件，不进行任何读写操作。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件open()</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment"># 读写操作 write() read()</span></span><br><span class="line">f.write(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="comment"># 关闭文件 close()</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="2-1-1-打开open-name-mode">2.1.1  打开open(name,mode)</h3><p>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件，语法如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(name, mode)</span><br></pre></td></tr></table></figure><p>==name：==是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。写路径也需要按照字符串形式来写。</p><p>mode：设置打开文件的模式(访问模式)：<strong>只读、写入、追加</strong>等。</p><h4 id="2-1-1-1-打开文件模式mode">2.1.1.1 打开文件模式mode</h4><table><thead><tr><th style="text-align:center">模式</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><mark>r</mark></td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是<strong>默认模式</strong>。</td></tr><tr><td style="text-align:center">rb</td><td>以<strong>二进制格式</strong>打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td style="text-align:center">r+</td><td>打开一个文件<strong>用于读写</strong>。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:center">rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:center"><mark>w</mark></td><td>打开一个文件只用于写入。<mark>如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除（执行写入，会覆盖原有内容）。如果该文件不存在，创建新文件。</mark></td></tr><tr><td style="text-align:center">wb</td><td>以<strong>二进制格式</strong>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:center">w+</td><td>打开一个文件<strong>用于读写</strong>。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。<mark>w+未执行写入，则写入内容为空，会将原来文件数据覆盖掉。</mark></td></tr><tr><td style="text-align:center">wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:center"><mark>a</mark></td><td>打开一个文件用于追加。<mark>如果该文件已存在，文件指针将会放在文件的结尾。也 就是说，新的内容将会被写入到已有内容之后（在原有内容基础上，追加新内容）。如果该文件不存在，创建新文件进行写入。</mark></td></tr><tr><td style="text-align:center">ab</td><td>以<strong>二进制格式</strong>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:center">a+</td><td>打开一个文件<strong>用于读写</strong>。如果该文件已存在，文件指针 将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。无论怎样，文件都无法读取（因为文件指针在文件的结尾）</td></tr><tr><td style="text-align:center">ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p><mark>注意：</mark></p><blockquote><p>访问模式r w a特点：</p><blockquote><p>r——如果文件不存在，报错；不支持写入操作，表示只读。</p><p>w——只写,如果文件不存在，新建文件；执行写入，会覆盖原有内容</p><p>a——追加，如果文件不存在， 新建文件；在原有内容基础上，追加新内容</p><p>访问模式如果省略表示访问模式为</p></blockquote><p>访问模式中，如果后缀带b，就是以二进制格式打开文件；如果后缀带+，访问的文件可读可写。</p><p>访问模式：rb、r+、rb+中必须遵循主访问模式r的特点；wb、w+、wb+和ab、a+、ab+同理。</p><p>访问模式r（包括rb、r+、rb+）或w（包括wb、w+、wb+）——文件的指针将会放在文件的开头。</p><p>访问模式a（包括ab、a+、ab+）——文件的指针将会放在文件的结尾。</p></blockquote><p><strong>示例1：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">测试目标</span></span><br><span class="line"><span class="string">1.访问模式对文件的影响</span></span><br><span class="line"><span class="string">2.访问模式对write()的影响</span></span><br><span class="line"><span class="string">3.访问模式是否可以省略</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># r:如果文件不存在，报错；不支持写入操作，表示只读。</span></span><br><span class="line"><span class="comment"># f1 = open(&#x27;test1 .txt&#x27;, &#x27;r&#x27;)</span></span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">f1.write(<span class="string">&#x27;ee&#x27;</span>) <span class="comment">#</span></span><br><span class="line">f1.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># w：只写,如果文件不存在，新建文件；执行写入，会覆盖原有内容</span></span><br><span class="line">f2 = <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f2.write(<span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line">f2.write(<span class="string">&#x27;cc&#x27;</span>)</span><br><span class="line">f2.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># a:追加，如果文件不存在， 新键文件；在原有内容基础上，追加新内容</span></span><br><span class="line">f3 = <span class="built_in">open</span>(<span class="string">&#x27;2.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">f3.write(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">f3.write(<span class="string">&#x27;xyz&#x27;</span>)</span><br><span class="line">f3.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问模式是否可以省略,如果省略表示访问模式为r</span></span><br><span class="line">f4 = <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>)</span><br><span class="line">f4.close()</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">测试目标：</span></span><br><span class="line"><span class="string">1.r+ 和 w+  a+区别:</span></span><br><span class="line"><span class="string">2.文件指针对数据读取的影响</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># r+:如果没有该文件则报错;文件指针在开头，所以能读取出来数据</span></span><br><span class="line"><span class="comment"># f = open(&#x27;test1.txt&#x27;, &#x27;r+&#x27;)</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># w+: 如果没有该文件会新建文件；w+特点：文件指针在开头，用新内容覆盖原内容</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line">f.seek(<span class="number">0</span>) <span class="comment"># 将文件指针移动到文件开头，此时可读取文件</span></span><br><span class="line">con = f.read()</span><br><span class="line"><span class="built_in">print</span>(con)</span><br><span class="line">f.close</span><br><span class="line"><span class="comment"># w+未执行写入，则写入内容为空，会将原来文件数据覆盖掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a+: 如果没有该文件会新建文件；a+特点：文件指针在结尾，无法读取数据(文件指针后面没有数据）</span></span><br><span class="line"><span class="comment"># f = open(&#x27;test2.txt&#x27;, &#x27;a+&#x27;)</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># f.seek(0) # 将文件指针移动到文件开头，此时可读取文件</span></span><br><span class="line">con = f.read()</span><br><span class="line"><span class="built_in">print</span>(con)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><strong>问题</strong>:执行w+代码为什么读取不到文件数据？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># w+:没有该文件则会新建文件;文件指针在开头，用新内容会覆盖原内容；w+未执行写入，则写入内容为空，会将原来文件数据覆盖掉</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line">con = f.read()</span><br><span class="line"><span class="built_in">print</span>(con)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>​在你写入数据后，文件指针已经移动到了文件的末尾。当你尝试读取时，由于文件指针已经在末尾，所以无法读取到任何数据。</p><h4 id="2-1-1-2-快速体验">2.1.1.2 快速体验</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：此时的<code>f</code>是<code>open</code>函数的文件对象。</p></blockquote><h3 id="2-1-2-文件对象方法">2.1.2 文件对象方法</h3><h5 id="2-1-2-1-写——-文件对象-write-‘内容’">2.1.2.1 写—— 文件对象.write(‘内容’)</h5><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象.write(<span class="string">&#x27;内容&#x27;</span>)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>体验</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.文件写入</span></span><br><span class="line">f.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li class="lvl-3"><code>w</code>和<code>a</code>模式：如果文件不存在则创建该文件；如果文件存在，<code>w</code>模式先清空再写入，<code>a</code>模式直接末尾追加。</li><li class="lvl-3"><code>r</code>模式：如果文件不存在则报错。</li></ol></blockquote><h5 id="2-1-2-2-读">2.1.2.2 读</h5><ul class="lvl-0"><li class="lvl-2"><p><strong>read()</strong></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象.read(num)</span><br></pre></td></tr></table></figure><blockquote><p>num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据。</p><p>文件内容如果换行，底层有\n,会占一个字节，不会打印出来。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">text.txt文件数据如下：</span></span><br><span class="line"><span class="string">aa</span></span><br><span class="line"><span class="string">bb</span></span><br><span class="line"><span class="string">cc</span></span><br><span class="line"><span class="string">dd</span></span><br><span class="line"><span class="string">ee</span></span><br><span class="line"><span class="string">ff</span></span><br><span class="line"><span class="string"># 文件内容如果换行，底层有\n,会占一个字节，不会打印出来。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read(<span class="number">4</span>))  <span class="comment"># 读取到的结果： aa b</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></blockquote><ul class="lvl-0"><li class="lvl-2"><p>readlines()</p></li></ul><p>readlines可以按照行的方式把整个文件中的内容<strong>进行一次性读取</strong>，并且<strong>返回的是一个列表</strong>，其中<strong>每一行的数据为一个元素</strong>。如果数据中有换行符，会打印出来。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">content = f.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;hello world\n&#x27;, &#x27;abcdefg\n&#x27;, &#x27;aaa\n&#x27;, &#x27;bbb\n&#x27;, &#x27;ccc&#x27;] </span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>readline()</p></li></ul><p><strong>readline()一次读取一行内容。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">content = f.readline()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;第一行：<span class="subst">&#123;content&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">content = f.readline()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;第二行：<span class="subst">&#123;content&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190222105332438.png" alt="image-20190222105332438"></p><h5 id="2-1-2-3-seek">2.1.2.3 seek()</h5><p>作用：<mark>用来移动文件指针。</mark></p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象.seek(偏移量, 起始位置)</span><br></pre></td></tr></table></figure><blockquote><p>偏移量：表示指针从起始位置偏移多少–开始读取。</p><p>起始位置：</p><ul class="lvl-1"><li class="lvl-2"><p>0：文件开头</p></li><li class="lvl-2"><p>1：当前位置</p></li><li class="lvl-2"><p>2：文件结尾</p></li></ul></blockquote><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">语法： 文件对象.seek(偏移量，起始位置） 0开头 1当前 2结尾</span></span><br><span class="line"><span class="string">目标：</span></span><br><span class="line"><span class="string">    1，r改变文件指针位置；改变读取数据开始位置或把文件指针放在结尾（无法读取数据）</span></span><br><span class="line"><span class="string">    2，a 改变文件指针位置，做到可以读取出来数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># f = open(&#x27;test.txt&#x27;, &#x27;r+&#x27;)</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line"><span class="comment"># 1.改变读取数据开始位置</span></span><br><span class="line"><span class="comment"># f.seek(3, 0) # f.seek(3, 1)</span></span><br><span class="line"><span class="comment"># 1.把文件指针放在结尾（无法读取数据）</span></span><br><span class="line"><span class="comment"># f.seek(0, 2)</span></span><br><span class="line"></span><br><span class="line">f.seek(<span class="number">0</span>, <span class="number">0</span>) <span class="comment"># 省略写法f.seek(0)</span></span><br><span class="line"></span><br><span class="line">con = f.read()</span><br><span class="line"><span class="built_in">print</span>(con)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="2-1-3-关闭——文件对象-close">2.1.3 关闭——文件对象.close()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件对象.close()</span><br></pre></td></tr></table></figure><h1 id="三-文件备份">三. 文件备份</h1><p>需求：用户输入当前目录下任意文件名，程序完成对该文件的备份功能(备份文件名为xx[备份]后缀，例如：test[备份].txt)。</p><h2 id="3-1-步骤">3.1 步骤</h2><ol><li class="lvl-3"><p>接收用户输入的文件名</p></li><li class="lvl-3"><p>规划备份文件名</p></li><li class="lvl-3"><p>备份文件写入数据</p></li></ol><h2 id="3-2-代码实现">3.2 代码实现</h2><ol><li class="lvl-3"><p>接收用户输入目标文件名</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">old_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要备份的文件名：&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>规划备份文件名</p><p>2.1 提取目标文件后缀</p><p>2.2 组织备份的文件名，xx[备份]后缀</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.1 提取文件后缀点的下标</span></span><br><span class="line">index = old_name.rfind(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(index)  # 后缀中.的下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(old_name[:index])  # 源文件名（无后缀）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2 组织新文件名 旧文件名 + [备份] + 后缀</span></span><br><span class="line">new_name = old_name[:index] + <span class="string">&#x27;[备份]&#x27;</span> + old_name[index:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印新文件名（带后缀）</span></span><br><span class="line"><span class="comment"># print(new_name)</span></span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>备份文件写入数据</p><p>3.1 打开源文件 和 备份文件</p><p>3.2 将源文件数据写入备份文件</p><p>3.3 关闭文件</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.1 打开文件</span></span><br><span class="line">old_f = <span class="built_in">open</span>(old_name, <span class="string">&#x27;rb&#x27;</span>) <span class="comment"># 提前把原文件准备好</span></span><br><span class="line">new_f = <span class="built_in">open</span>(new_name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2 将源文件数据写入备份文件</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    con = old_f.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(con) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    new_f.write(con)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.3 关闭文件</span></span><br><span class="line">old_f.close()</span><br><span class="line">new_f.close()</span><br></pre></td></tr></table></figure><h2 id="3-3-思考">3.3 思考</h2><p>如果用户输入<code>.txt</code>，这是一个无效文件，程序如何更改才能限制只有有效的文件名才能备份？</p><p>答：添加条件判断即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">old_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要备份的文件名：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index = old_name.rfind(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> index &gt; <span class="number">0</span>:</span><br><span class="line">    postfix = old_name[index:]</span><br><span class="line"></span><br><span class="line">new_name = old_name[:index] + <span class="string">&#x27;[备份]&#x27;</span> + postfix</span><br><span class="line"></span><br><span class="line">old_f = <span class="built_in">open</span>(old_name, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">new_f = <span class="built_in">open</span>(new_name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    con = old_f.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(con) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    new_f.write(con)</span><br><span class="line"></span><br><span class="line">old_f.close()</span><br><span class="line">new_f.close()</span><br></pre></td></tr></table></figure><p><strong>自己敲：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.接收用户输入的文件名</span></span><br><span class="line">old_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要需要备份的文件名：&#x27;</span>)</span><br><span class="line"><span class="comment"># print(old_name)</span></span><br><span class="line"><span class="comment"># print(type(old_name)) # 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.规划备份文件名</span></span><br><span class="line"><span class="comment"># 2.1 提取目标文件的后缀--找到文件名字中的点--文件名字和后缀分离--最右侧的点才是后缀的点--字符串查找某个子串--语法:序列名.rfind()</span></span><br><span class="line">index = old_name.rfind(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="comment"># print(index)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2 组织新名字 = 原名字 + [备份] + 后缀</span></span><br><span class="line"><span class="comment"># 原名字就是字符串中的一部分子串--字符串切片[开始：结束：步长</span></span><br><span class="line"><span class="comment"># 提取原名字</span></span><br><span class="line"><span class="comment"># old_name[:index]</span></span><br><span class="line"><span class="comment"># print(old_name[:index]) # old_name[:index]</span></span><br><span class="line"><span class="comment"># 提取后缀</span></span><br><span class="line"><span class="comment"># old_name[index:]</span></span><br><span class="line"><span class="comment"># print(old_name[index:])</span></span><br><span class="line"><span class="keyword">if</span> index &gt; <span class="number">0</span>:  <span class="comment"># 判断文件名是否有效？有效的文件名才能备份</span></span><br><span class="line">    postfix = old_name[index:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合新名字</span></span><br><span class="line">new_name = old_name[:index] + <span class="string">&#x27;[备份]&#x27;</span> + postfix</span><br><span class="line"><span class="comment"># print(new_name)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.备份文件写入数据</span></span><br><span class="line"><span class="comment"># 3.1 打开文件</span></span><br><span class="line">old_f = <span class="built_in">open</span>(old_name, <span class="string">&#x27;rb&#x27;</span>) <span class="comment"># 提前把原文件准备好</span></span><br><span class="line">new_f = <span class="built_in">open</span>(new_name, <span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2 源文件读取，备份文件追加写入</span></span><br><span class="line"><span class="comment"># 如果不确定目标文件大小，循环读取写入；当读取出来的数据没有了则终止循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 这段代码是按照每次读取 1024 字节的方式来处理文件的，直到文件结束。</span></span><br><span class="line">    con = old_f.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment">#  表示从 old_f 文件对象中读取最多 1024 个字节的数据。如果文件中还有剩余的字节，就会成功读取并返回这些字节的内容。</span></span><br><span class="line">    <span class="comment"># 但如果文件已经到达末尾，就无法再读取更多数据，此时将返回一个空字符串 &#x27;&#x27;。</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(con) == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 读取完成</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    new_f.write(con) <span class="comment"># 应该把old_f文件数据追加到new_f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.3 关闭文件</span></span><br><span class="line">old_f.close()</span><br><span class="line">new_f.close()</span><br></pre></td></tr></table></figure><h1 id="四-文件和文件夹的操作">四. 文件和文件夹的操作</h1><p>在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：</p><ol><li class="lvl-3"><p>导入os模块</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>使用<code>os</code>模块相关功能</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.函数名()</span><br></pre></td></tr></table></figure><h2 id="4-1-文件重命名">4.1 文件重命名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.rename(目标文件名, 新文件名)</span><br></pre></td></tr></table></figure><h2 id="4-2-删除文件">4.2 删除文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.remove(目标文件名)</span><br></pre></td></tr></table></figure><h2 id="4-3-创建文件夹">4.3 创建文件夹</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.mkdir(文件夹名字)</span><br></pre></td></tr></table></figure><h2 id="4-4-删除文件夹">4.4 删除文件夹</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.rmdir(文件夹名字)</span><br></pre></td></tr></table></figure><h2 id="4-5-获取当前目录">4.5 获取当前目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.getcwd()   <span class="comment"># 获取当前文件所在目录路径</span></span><br></pre></td></tr></table></figure><h2 id="4-6-改变默认目录">4.6 改变默认目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.chdir(目录) <span class="comment"># 改变目录路径</span></span><br></pre></td></tr></table></figure><h2 id="4-7-获取目录列表">4.7 获取目录列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.listdir(目录)  <span class="comment">#获取某个文件夹下所有文件名，返回一个列表</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gercwd(）获取当前文件所在目录路径</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd()) </span><br><span class="line"></span><br><span class="line"><span class="comment"># chdir()改变目录路径</span></span><br><span class="line"><span class="comment"># 需求：在aa里面创建bb文件夹：1.切换目录到aa, 2.创建bb</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line">os.chdir(<span class="string">&#x27;aa&#x27;</span>) <span class="comment"># 切换目录到aa</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># listdir()获取某个文件夹下所有文件名，返回一个列表</span></span><br><span class="line"><span class="built_in">print</span>(os.listdir(<span class="string">&#x27;aa&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir())</span><br></pre></td></tr></table></figure><h1 id="五-应用案例">五.应用案例</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">需求1:把从code文件夹所有文件重命名Python_xxx</span></span><br><span class="line"><span class="string">    1.找到所有文件；切换到aa文件夹--chdir() 找到其目录列表--listdir()</span></span><br><span class="line"><span class="string">    2.构造名字</span></span><br><span class="line"><span class="string">    3.重命名</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 1.找到所有文件；切换到aa文件夹--chdir() 找到其目录列表--listdir()</span></span><br><span class="line">os.chdir(<span class="string">&#x27;aaa&#x27;</span>) <span class="comment"># 切换到当前目录</span></span><br><span class="line">flie_list = os.listdir()</span><br><span class="line"><span class="built_in">print</span>(flie_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.构造名字</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flie_list:</span><br><span class="line">    new_name = <span class="string">&#x27;Python_&#x27;</span> + i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.重命名</span></span><br><span class="line">    os.rename(i, new_name)</span><br></pre></td></tr></table></figure><p>需求2：批量修改文件名，既可添加指定字符串，又能删除指定字符串。</p><ul class="lvl-0"><li class="lvl-2"><p>步骤</p></li></ul><ol><li class="lvl-3"><p>设置添加删除字符串的的标识</p></li><li class="lvl-3"><p>获取指定目录的所有文件</p></li><li class="lvl-3"><p>将原有文件名添加/删除指定字符串，构造新名字</p></li><li class="lvl-3"><p>os.rename()重命名</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置重命名标识：如果为1则添加指定字符，flag取值为2则删除指定字符</span></span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定目录</span></span><br><span class="line">dir_name = <span class="string">&#x27;./&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定目录的文件列表</span></span><br><span class="line">file_list = os.listdir(dir_name)</span><br><span class="line"><span class="comment"># print(file_list)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历文件列表内的文件</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> file_list:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加指定字符</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        new_name = <span class="string">&#x27;Python-&#x27;</span> + name</span><br><span class="line">    <span class="comment"># 删除指定字符</span></span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="number">2</span>:</span><br><span class="line">        num = <span class="built_in">len</span>(<span class="string">&#x27;Python-&#x27;</span>)</span><br><span class="line">        new_name = name[num:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印新文件名，测试程序正确性</span></span><br><span class="line">    <span class="built_in">print</span>(new_name)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重命名</span></span><br><span class="line">    os.rename(dir_name+name, dir_name+new_name)</span><br></pre></td></tr></table></figure><p>根据视频写：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">需求2;删除Python_ 重命名：1.构造调节的数据 2.书写if</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.找到所有文件；切换到aa文件夹--chdir() 找到其目录列表--listdir()</span></span><br><span class="line">os.chdir(<span class="string">&#x27;aaa&#x27;</span>) <span class="comment"># 切换到当前目录</span></span><br><span class="line">flie_list = os.listdir()</span><br><span class="line"><span class="built_in">print</span>(flie_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.构造名字</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flie_list:</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        new_name = <span class="string">&#x27;Python_&#x27;</span> + i</span><br><span class="line">    <span class="keyword">elif</span> flag ==<span class="number">2</span>:</span><br><span class="line">        <span class="comment"># 删除前缀</span></span><br><span class="line">        num = <span class="built_in">len</span>(<span class="string">&#x27;Python_&#x27;</span>)</span><br><span class="line">        <span class="comment"># 原名字就是字符串中的一部分子串 --字符串切片[开始：结束：步长]</span></span><br><span class="line">        new_name = i[num:]  <span class="comment"># 切片，只取原名字字符串Python_后面部分</span></span><br><span class="line"><span class="comment"># 3.重命名</span></span><br><span class="line">    os.rename(i, new_name)</span><br></pre></td></tr></table></figure><h1 id="六-总结">六. 总结</h1><ul class="lvl-0"><li class="lvl-2"><p>文件操作步骤</p><ul class="lvl-2"><li class="lvl-4">打开</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象 = <span class="built_in">open</span>(目标文件, 访问模式)</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4"><p>操作</p><ul class="lvl-4"><li class="lvl-6">读</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象.read()</span><br><span class="line">文件对象.readlines()</span><br><span class="line">文件对象.readline()</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-6"><p>写</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象.write()</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-6"><p>seek()</p></li></ul></li><li class="lvl-4"><p>关闭</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象.close()</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>主访问模式</p><ul class="lvl-2"><li class="lvl-4">w：写，文件不存在则新建该文件</li><li class="lvl-4">r：读，文件不存在则报错</li><li class="lvl-4">a：追加</li></ul></li><li class="lvl-2"><p>文件和文件夹操作</p><ul class="lvl-2"><li class="lvl-4">重命名：os.rename()</li><li class="lvl-4">获取当前目录：os.getcwd()</li><li class="lvl-4">获取目录列表：os.listdir()</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Catia 常用命令、基础入门</title>
      <link href="/catia1.html"/>
      <url>/catia1.html</url>
      
        <content type="html"><![CDATA[<h1 id="快捷键">快捷键</h1><table><thead><tr><th style="text-align:center"><mark>命令</mark></th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">平移视图</td><td style="text-align:center">按住鼠标中键</td></tr><tr><td style="text-align:center"><mark>转动视图</mark>1</td><td style="text-align:center">按住鼠标中键+长按鼠标左键/右键+拖动鼠标</td></tr><tr><td style="text-align:center"><mark>转动视图</mark>2</td><td style="text-align:center">按住鼠标中键+长按鼠标左键/右键+长按Ctrl+拖动鼠标</td></tr><tr><td style="text-align:center"><mark>放大、缩小视图</mark></td><td style="text-align:center">按住鼠标中键+长按Ctrl（或轻点鼠标左键/右键）+上下拖动鼠标</td></tr><tr><td style="text-align:center">多选</td><td style="text-align:center">Ctrl+图形</td></tr><tr><td style="text-align:center">树状图变大变小</td><td style="text-align:center">Ctrl+滚动鼠标中键</td></tr></tbody></table><p><mark>如果旋转视图不在自己选定的平面，点击Catia草图界面下方<strong>工具栏</strong>——“法线视图”</mark></p><h1 id="实体建模Q-A">实体建模Q&amp;A</h1><p>凸台（拉伸）工具：试试切换到零件模式（开始——机械设计——零件设计）</p><h2 id="1-catia零件工作台开放轮廓草图和自相交轮廓草图的使用">1.catia零件工作台开放轮廓草图和自相交轮廓草图的使用</h2><p>（此步骤<mark>必须草图的视图是等约束情况下采用</mark>）：</p><p>1.当拉伸（定义凸台）时，界面弹出“选定的草图自相交”，点击确定</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605104117589.png" alt="image-20230605104117589"></p><p>2.点中“厚”,然后点击“预览”，再取消“厚”</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605104452717.png" alt="image-20230605104452717" style="zoom:67%;" /><p>3.对自相交的两个草图第一个草图操作：</p><p>​在“选择：草图1”白框内点击右键，选择“转至轮廓定义”，在“子元素”，选中空白框“草图1”，再点击“移除”。</p><table><thead><tr><th>右键“选择：草图1”白框</th><th>选择“转至轮廓定义”</th><th>在“子元素”，选中空白框“草图1”，再点击“移除”</th></tr></thead><tbody><tr><td><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605104645531.png" alt="image-20230605104645531" style="zoom:77%;" /></td><td><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605104906805.png" alt="image-20230605104906805"></td><td><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605105118975.png" alt="image-20230605105118975" style="zoom:67%;" /></td></tr></tbody></table><p>4.在“转至轮廓定义”——定义轮廓界面——”子元素“对自相交的两个草图第一个草图操作：选中第一个草图</p><p>​<strong>选中第一个草图轮廓线，点击”添加“、”确定“，回到定义凸台界面，点击”确定“</strong></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605105855148.png" alt="image-20230605105855148" style="zoom:50%;" /><p>5.对第二个草图进行操作：<strong>方法同步骤3、4</strong></p><p>​<strong>选中第二个草图轮廓线，点击”添加“、”确定“，回到定义凸台界面，点击”确定“</strong></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605110309314.png" alt="image-20230605110309314" style="zoom:67%;" /><h2 id="2-平移平面（在原有平面上，偏移一个坐标系或平面作为基准面）">2.平移平面（在原有平面上，偏移一个坐标系或平面作为基准面）</h2><p>​首先，我们进入实体零件设计模块——第二步，进入平面定义对话框——第三步，参考面选择XY平面（或想要的平面）.——第四步，选择确定后重复对象，如图示.——第五步，预览我们新建的平面.</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605153620050.png" alt="image-20230605153620050" style="zoom:67%;" /><h1 id="一、草图">一、草图</h1><h2 id="1-造">1.造</h2><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230604223534786.png" alt="image-20230604223534786" style="zoom:67%;" /><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230604224348223.png" alt="image-20230604224348223" style="zoom:67%;" /><p>对于6投影、7镜像/对称，首先要选择源图像，再点击图标。</p><h2 id="2-修">2.修</h2><h3 id="几何约束（常用）：固定、相合（相交同一点）、相切、平行、垂直、水平、竖直">几何约束（常用）：固定、相合（相交同一点）、相切、平行、垂直、水平、竖直</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230604233549125.png" alt="image-20230604233549125" style="zoom:67%;" /><h3 id="尺寸约束-倒R角-剪切">尺寸约束/倒R角/剪切</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230604234919716.png" alt="image-20230604234919716" style="zoom:67%;" /><h3 id="移动-旋转-缩放">移动/旋转/缩放</h3><blockquote><p>移动：一般关掉复制模式旋转：选中线段+一个旋转中心点+一个旋转起始点+旋转角度，可以复制/也可以不复制缩放：对于 图形进行放大/缩小，可以复制/也可以不复制</p></blockquote><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230605001826548.png" alt="image-20230605001826548" style="zoom:67%;" /><h2 id="3-后勤1">3.后勤1</h2><h3 id="3-1新建草图">3.1新建草图</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605084937947.png" style="zoom:67%;" /><h3 id="3-2-寻找工具栏">3.2 寻找工具栏</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605090235600.png" alt="image-20230605090235600" style="zoom:67%;" /><h3 id="3-3-法线视图-满屏显示-取消捕捉-检查约束-返回">3.3 法线视图/满屏显示/取消捕捉/检查约束/返回</h3><blockquote><p>法线视图：草图平面“斜”了，进行此步骤</p><p>满屏显示（软件又称全部适应）：找到自己画的线</p><p>取消捕捉：取消网格/长按shift键</p><p>检查约束（软件又称草图求解状态）：如果不充分约束，在草图拉伸时会发现重复的线或者草图未封闭</p></blockquote><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605091154882.png" alt="image-20230605091154882" style="zoom:67%;" /><h2 id="4-后勤2">4.后勤2</h2><h3 id="4-1-Catia中几何元素">4.1 Catia中几何元素</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605111037863.png" alt="image-20230605111037863" style="zoom:67%;" /><h3 id="4-2-Catia中基本工具命令">4.2 Catia中基本工具命令</h3><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605111239494.png" alt="image-20230605111239494" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605112854721.png" style="zoom:67%;" /></th></tr></thead></table><h1 id="二、零件设计（实体设计）">二、零件设计（实体设计）</h1><p>实体需要草图是封闭的截面</p><h2 id="1-造-2">1.造</h2><h3 id="1-1拉伸成实体">1.1拉伸成实体</h3><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605114418404.png" alt="image-20230605114418404" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605104452717.png" alt="image-20230605104452717" style="zoom:67%;" /></th></tr></thead></table><h3 id="1-2-旋转命令">1.2 旋转命令</h3><p>​选中白框，框内由白变蓝；蓝色在哪里，就是对谁操作。如对轮廓进行操作，选中框，此时框内变成蓝色，再去选轮廓即可。</p><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605115307250.png" alt="image-20230605115307250" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605115726771.png" alt="image-20230605115726771" style="zoom:67%;" /></th></tr></thead></table><h3 id="1-3-扫掠实体（定义肋）">1.3 扫掠实体（定义肋）</h3><p>​要有封闭的轮廓、中心曲线（成形形状）</p><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605122006879.png" alt="image-20230605122006879" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605123506476.png" alt="image-20230605123506476"></th></tr></thead></table><h3 id="1-4-多截面实体">1.4 多截面实体</h3><p>​注意，多截面的==<strong>闭合点位置和闭合点方向（同顺时针或逆时针方向）</strong>==要一致才行。</p><p>​选择截面后需要检查一下闭合点的位置和方向是否正确，也就是说点的位置要在临近的位置，不能两点位置相差太多，这样做的面就扭曲了</p><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605124114527.png" alt="image-20230605124114527" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605144127632.png" alt="image-20230605144127632" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605144406514.png" alt="image-20230605144406514" style="zoom:67%;" /></th></tr></thead></table><h4 id="使用多截面实体工具时，有一个截面的闭合点位置出错，怎么调：">使用多截面实体工具时，有一个截面的闭合点位置出错，怎么调：</h4><p>​在多截面实体工具里，选中有问题的截面草图，单击鼠标右键，在弹出的快捷菜单中选择“替换闭合点”，再从截面上选择一个新的点就完成了闭合点的重新定义，这样就可以把闭合点对应起来了。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605131137473.png" alt="image-20230605131137473" style="zoom:50%;" /><h4 id="使用多截面实体工具时，有一个截面的闭合点方向出错，怎么调：">使用多截面实体工具时，有一个截面的闭合点方向出错，怎么调：</h4><p>​1.在多截面实体工具里，选中有问题的截面草图，单击鼠标右键，在弹出的快捷菜单中选择“移除闭合点”，然后点击”创建闭合点“</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605145129313.png" alt="image-20230605145129313" style="zoom:67%;" /><p>​2.点击”点定义“——选中“参考：点”白色框，右击，选中“创建极值”</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605150239339.png" alt="image-20230605150239339" style="zoom:67%;" /><p>​3.在“极值定义”中——方向——右击选择需要的方向（x/y/z部件），选择最小值，确定即可。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605145659259.png" alt="image-20230605145659259"></p><h3 id="1-5-曲面加厚">1.5 曲面加厚</h3><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605155719663.png" alt="image-20230605155719663" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605161047393.png" alt="image-20230605161047393" style="zoom:67%;" /></th></tr></thead></table><h3 id="1-6-封闭曲面变成实体">1.6 封闭曲面变成实体</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605161339216.png" alt="image-20230605161339216" style="zoom:67%;" /><h3 id="1-7-对称实体">1.7 对称实体</h3><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605165048364.png" alt="image-20230605165048364"></p><h3 id="1-8-平行阵列实体">1.8 平行阵列实体</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605170223660.png" alt="image-20230605170223660" style="zoom:67%;" /><p>矩形阵列：选定方向、间距<img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605171108318.png" alt="image-20230605171108318" style="zoom:50%;" /></p><h3 id="1-9-圆形阵列实体">1.9 圆形阵列实体</h3><p>控制方式（参数）：实例和总角度（通常选这个 ）</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605171503760.png" alt="image-20230605171503760"></p><p>圆形阵列：</p><p>​1.要先建立一个平行于坐标系某轴的新轴：<img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605172427587.png" alt="image-20230605172427587">，</p><p>​2.先通过<strong>点</strong>来确定新建轴里坐标系原点距离</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605172622886.png" alt="image-20230605172622886"></p><p>​3.再通过<strong>线</strong>来建立轴线，点1选择<strong>第二步建立的点</strong>，方向选择<strong>坐标系某轴</strong>即可。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605205441384.png" alt=""></p><p>轴向参考：</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605173732161.png" alt="image-20230605173732161" style="zoom:67%;" />定义径向：</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605173916477.png" alt="image-20230605173916477" style="zoom:67%;" /><h3 id="1-10-作点">1.10 作点</h3><p>​**点类型（常用）：**坐标、曲线上、圆/球面/椭圆中心</p><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605174245339.png" alt="image-20230605174245339" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605204459674.png" alt="image-20230605174245339" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605204746086.png" alt="image-20230605204746086"></th></tr></thead></table><h3 id="1-11-作直线">1.11 作直线</h3><p>​**线型（常用）：**点—点、点—方向</p><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605205021551.png" alt="image-20230605205021551" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605205213014.png" alt="image-20230605205213014" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605205441384.png" alt="image-20230605205441384" style="zoom:67%;" /></th></tr></thead></table><h3 id="1-12-作基准平面">1.12 作基准平面</h3><p>​这里面<strong>参考平面</strong>可以是坐标系·，也可以是自定义的平面。</p><p><strong>常用的平面类型</strong>：曲线的法线、通过平面曲线</p><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605205656999.png" alt="image-20230605205656999" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605205855267.png" alt="image-20230605205855267" style="zoom:80%;" /></th></tr></thead></table><p><strong>示例</strong>：在轮廓线上，先取一个点，再利用平面定义——“平面类型：曲线的法线”，作基准平面。</p><p>​常用于：在新建的基准平面上作一轮廓，再进行扫掠，得到相关实体。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605210937402.png" alt="image-20230605210937402" style="zoom:67%;" /><h2 id="2-修-2">2. 修</h2><h3 id="2-1-拉伸去除实体（挖孔等）">2.1 拉伸去除实体（挖孔等）</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605211550935.png" alt="image-20230605214838509" style="zoom:67%;" /><p>示例：</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605214728905.png" alt="image-20230605214728905" style="zoom:67%;" /><h3 id="2-2-旋转去除实体">2.2 旋转去除实体</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605214838509.png" alt="image-20230605214838509" style="zoom:67%;" /><p>​示例：曲面选择用来旋转的面（如图中矩形），轴选择绕哪个轴旋转就选哪个轴</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605220420039.png" alt="image-20230605220420039" style="zoom:67%;" /><h3 id="2-3-扫掠去除实体（开槽等）">2.3 扫掠去除实体（开槽等）</h3><p>​如果有警告，去：创成式外形设计——多重提取定义(在插入-操作中)提取一下画的槽线即可。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605220817034.png" alt="image-20230605220817034" style="zoom:67%;" /><p>示例：用于开槽：</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605221531149.png" alt="image-20230605221531149" style="zoom:67%;" /><h3 id="2-4-多截面去除实体">2.4 多截面去除实体</h3><p>​截面需要封闭，闭合点位置及闭合点方向（顺时针、逆时针方向）要一致</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605221803745.png" alt="image-20230605221803745" style="zoom:67%;" /><h3 id="2-5-倒R角">2.5 倒R角</h3><p>​可以选择变量，对到圆角两端分别设置不同的倒角半径，结果会出现渐变得R角</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606084047323.png" alt="image-20230606084047323" style="zoom:67%;" /><h3 id="2-6-拔模角度">2.6 拔模角度</h3><p>​用于板金、塑料等</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606090836502.png" alt="image-20230606090836502" style="zoom:67%;" /><h3 id="2-7-抽壳">2.7  抽壳</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606091356253.png" alt="image-20230606091356253" style="zoom:67%;" /><h3 id="2-8-加长-缩短（拉伸-缩短）实体">2.8 加长/缩短（拉伸/缩短）实体</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606091809065.png" alt="image-20230606091809065" style="zoom:67%;" /><h3 id="2-9-去除实体表面（去掉不要的面，如槽、孔等）">2.9 去除实体表面（去掉不要的面，如槽、孔等）</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606092128823.png" alt="image-20230606092128823" style="zoom:67%;" /><h3 id="2-10-外螺纹-内螺纹">2.10 外螺纹/内螺纹</h3><p>​  catia软件不显示螺纹形状。</p><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606092429077.png" alt="image-20230606092429077" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606092955203.png" alt="image-20230606092955203" style="zoom:67%;" /></th></tr></thead></table><h3 id="2-11-缩放实体">2.11 缩放实体</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606093505587.png" alt="image-20230606093505587" style="zoom:67%;" /><h3 id="2-12-用面裁剪实体">2.12 用面裁剪实体</h3><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606094725166.png" alt="image-20230606094725166"></p><h3 id="2-13-新建几何体-几何图形集">2.13 新建几何体/几何图形集</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606095229531.png" alt="image-20230606095229531" style="zoom:67%;" /><h3 id="2-14-移动实体">2.14 移动实体</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606100022607.png" alt="image-20230606100022607" style="zoom:67%;" /><h3 id="2-15-以坐标系为基准移动实体">2.15 以坐标系为基准移动实体</h3><p>​目标坐标系需要单独构建，利用“创建轴系“——”轴系类型：轴旋转“构建。</p><p>通过目标坐标系，把原来基准坐标系上的实体移动到目标坐标系。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606101614321.png" alt="image-20230606101614321" style="zoom:67%;" /><h3 id="2-16-通过旋转移动实体">2.16 通过旋转移动实体</h3><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606102604333.png" alt="image-20230606102604333" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606102847126.png" alt="image-20230606102847126" style="zoom:67%;" /></th></tr></thead></table><h3 id="2-17-通过布尔运算叠加-去除-相交实体">2.17 通过布尔运算叠加/去除/相交实体</h3><p>​叠加实体前新建一个新的几何体，在这个新建的几何体下，添加新的草图（在草图设计中选中这个新建几何体）。</p><table><thead><tr><th>叠加实体</th><th>去除实体</th><th>相交实体</th></tr></thead><tbody><tr><td><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606103015416.png" alt="image-20230606103015416" style="zoom:67%;" /></td><td><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606104242180.png" alt="image-20230606104242180" style="zoom:67%;" /></td><td><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606104422090.png" alt="image-20230606104422090" style="zoom:67%;" /></td></tr></tbody></table><h1 id="三、创出式外形设计（曲面设计）">三、创出式外形设计（曲面设计）</h1><p>曲面可以使用不封闭的截面。</p><h2 id="曲面与实体区别：">曲面与实体区别：</h2><p>实体是封闭的，可以添加材料、密度、计算体积、重心等</p><p>曲面是实体的一部分的表面或整体表面</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606104917772.png" alt="image-20230606104917772" style="zoom:67%;" /><h2 id="1-造-3">1.造</h2><h3 id="1-1-拉伸成曲面">1.1 拉伸成曲面</h3><p>类型：尺寸/直到元素</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606105307083.png" alt="image-20230606105307083" style="zoom:67%;" /><h3 id="1-2-旋转成曲面">1.2 旋转成曲面</h3><p>类型：尺寸/直到元素</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606112954033.png" alt="image-20230606112954033" style="zoom:67%;" /><h3 id="1-3-画球面">1.3 画球面</h3><p>​里面是空心的</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606113831415.png" alt="image-20230606113831415" style="zoom:67%;" /><h3 id="1-4-画圆柱曲面">1.4 画圆柱曲面</h3><p>​  <img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606122427143.png" alt="image-20230606122427143" style="zoom:67%;" /></p><h3 id="1-5-填充曲面">1.5 填充曲面</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606122545350.png" alt="image-20230606122545350" style="zoom:67%;" /><h3 id="1-6-多截面连成曲面">1.6 多截面连成曲面</h3><p>​闭合点位置及闭合点方向要一致</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606143004535.png" alt="image-20230606143004535" style="zoom:67%;" /><h3 id="1-7-桥接曲面">1.7 桥接曲面</h3><p>​第一曲线、第一支持面:取得是第一曲线的所在的面</p><p>​第二曲线、第二支持面:取得是第二曲线的所在的面</p><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606143708456.png" alt="image-20230606143708456" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606144719099.png" alt="image-20230606144719099" style="zoom:67%;" /></th></tr></thead></table><h3 id="1-8-提取曲面的边界">1.8 提取曲面的边界</h3><p>​提取的曲面边界在几何图形集找到<strong>边界</strong>即可查看。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606145035985.png" alt="image-20230606145035985" style="zoom:67%;" /><h3 id="1-9-提取曲面">1.9 提取曲面</h3><p>​提取的曲面在几何图形集找到<strong>提取</strong>即可查看。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606145340940.png" alt="image-20230606145340940" style="zoom:67%;" /><h3 id="1-10-多重提取曲面">1.10 多重提取曲面</h3><p>​常用</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606151105562.png" alt="image-20230606151105562" style="zoom:67%;" /><h3 id="1-11-曲面之间倒圆角">1.11 曲面之间倒圆角</h3><p>注意：支持面要指向 同一个位置(同为里面或外面？)</p><table><thead><tr><th style="text-align:center">方式1：选两个曲面</th><th style="text-align:center">方式1：选曲面之间交线</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606150739610.png" alt="image-20230606150739610" style="zoom:67%;" /></td><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606153208455.png" alt="image-20230606153208455" style="zoom:67%;" /></td></tr></tbody></table><h3 id="1-12-平行阵列曲面">1.12 平行阵列曲面</h3><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606154416577.png" alt="image-20230606154416577" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606154948390.png" alt="image-20230606154948390" style="zoom:67%;" /></th></tr></thead></table><h3 id="1-13-圆形阵列曲面">1.13 圆形阵列曲面</h3><p>​可定义轴向、纵向。</p><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606155434125.png" alt="image-20230606155434125" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606155318230.png" alt="image-20230606155318230"></th></tr></thead></table><h3 id="1-14-作点">1.14 作点</h3><p>​**点类型（常用）：**坐标、曲线上、圆/球面/椭圆中心</p><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606160553175.png" alt="image-20230606160553175" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605204459674.png" alt="image-20230605174245339" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605204746086.png" alt="image-20230605204746086"></th></tr></thead></table><h3 id="1-15-作直线">1.15 作直线</h3><p>​**线型（常用）：**点—点、点—方向</p><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605205021551.png" alt="image-20230605205021551" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605205213014.png" alt="image-20230605205213014" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605205441384.png" alt="image-20230605205441384" style="zoom:67%;" /></th></tr></thead></table><h3 id="1-16-作基准平面">1.16 作基准平面</h3><p>​这里面<strong>参考平面</strong>可以是坐标系·，也可以是自定义的平面。</p><p><strong>常用的平面类型</strong>：曲线的法线（扫掠常用）、通过平面曲线、通过三个点</p><table><thead><tr><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605205656999.png" alt="image-20230605205656999" style="zoom:67%;" /></th><th><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230605205855267.png" alt="image-20230605205855267" style="zoom:80%;" /></th></tr></thead></table><h3 id="1-17-画3D样条曲线">1.17 画3D样条曲线</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606163124740.png" alt="image-20230606163124740" style="zoom:67%;" /><h3 id="1-18-画螺旋线">1.18  画螺旋线</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606163856389.png" alt="image-20230606163856389" style="zoom:67%;" /><h3 id="1-19-画平面螺线">1.19  画平面螺线</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606164625156.png" alt="image-20230606164625156" style="zoom:67%;" /><h3 id="1-19-画圆（常用）">1.19  画圆（常用）</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606165035478.png" alt="image-20230606165035478" style="zoom:67%;" /><h3 id="1-20-曲线投影到曲面上的投影曲线">1.20 曲线投影到曲面上的投影曲线</h3><p>​**常用投影类型：**沿某一方向</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606171039814.png" alt="image-20230606171039814" style="zoom:67%;" /><h3 id="1-21-两曲面相交的相交线">1.21 两曲面相交的相交线</h3><p>​经过拉伸的两个曲面，使用相交，曲面相交处回生成交线。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606173208351.png" alt="image-20230606173208351" style="zoom:67%;" /><h3 id="1-22-作曲面上的平行线">1.22 作曲面上的平行线</h3><p>​</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606175626235.png" alt="image-20230606175626235" style="zoom:67%;" /><h3 id="1-23-两曲线的倒圆角">1.23 两曲线的倒圆角</h3><p>​常用圆角类型：3D圆角</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606180151407.png" alt="image-20230606180151407" style="zoom:67%;" /><h3 id="1-24-两曲线的桥接">1.24 两曲线的桥接</h3><p>​点连续：/ 相切连续：/</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606182217893.png" alt="image-20230606182217893" style="zoom:67%;" /><h3 id="1-25-曲面的偏移">1.25 曲面的偏移</h3><p>​偏移量不要太大，不然会出现元素报错。</p><img src="image-20230606183559709.png" alt="image-20230606183559709" style="zoom:67%;" /><h2 id="2-修-3">2.修</h2><h3 id="2-1-平移元素（曲线-曲面）">2.1 平移元素（曲线/曲面）</h3><p>​可以偏移曲线/曲面等</p><table><thead><tr><th style="text-align:center">以方向、距离平移</th><th style="text-align:center">以点到点平移</th><th style="text-align:center">以坐标平移</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606185515537.png" alt="image-20230606185515537" style="zoom:67%;" /></td><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606192716412.png" alt="image-20230606192716412" style="zoom:67%;" /></td><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606193625419.png" alt="image-20230606193625419" style="zoom:67%;" /></td></tr></tbody></table><h3 id="2-2-旋转元素（曲线-曲面）">2.2 旋转元素（曲线/曲面）</h3><p>​可以旋转曲线/曲面等</p><table><thead><tr><th style="text-align:center">以轴线-角度元素旋转</th><th>以轴线-两个元素旋转</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606194016677.png" alt="image-20230606194016677" style="zoom:67%;" /></td><td><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606194347631.png" style="zoom:67%;" /></td></tr></tbody></table><h3 id="2-3-对称元素（曲线-曲面）">2.3 对称元素（曲线/曲面）</h3><p>​可以对称曲线/曲面等</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606195156457.png" alt="image-20230606195156457" style="zoom:67%;" /><h3 id="2-4-缩放元素（曲线-曲面）">2.4 缩放元素（曲线/曲面）</h3><p>​可以缩放曲线/曲面等</p><p>​参考：通常选一个点</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606195747057.png" alt="image-20230606195747057" style="zoom:67%;" /><h3 id="2-5-通过坐标系移动元素（曲线-曲面）">2.5 通过坐标系移动元素（曲线/曲面）</h3><p>​可以移动曲线/曲面等</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606201012865.png" alt="image-20230606201012865" style="zoom:67%;" /><h3 id="2-6-延伸曲面-曲线">2.6 延伸曲面/曲线</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606202255819.png" alt="image-20230606202255819" style="zoom:67%;" /><h3 id="2-7-缝合曲面">2.7 缝合曲面</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606203310250.png" alt="image-20230606203310250" style="zoom:67%;" /><h3 id="2-8-光顺曲线">2.8 光顺曲线</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606205013197.png" alt="image-20230606205013197" style="zoom:67%;" /><h3 id="2-9-还原曲线或曲面（常用）">2.9 还原曲线或曲面（常用）</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606205808980.png" alt="image-20230606205808980" style="zoom:67%;" /><h3 id="2-10-打散曲线-曲面">2.10 打散曲线/曲面</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606225533893.png" alt="image-20230606225533893" style="zoom:67%;" /><h3 id="2-11-裁剪曲线-曲面（分割命令）">2.11 裁剪曲线/曲面（分割命令）</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606211315145.png" alt="image-20230606211315145" style="zoom:67%;" /><h3 id="2-12-互相修剪曲线-曲面（修剪命令）">2.12 互相修剪曲线/曲面（修剪命令）</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606222953342.png" alt="image-20230606222953342" style="zoom:67%;" /><h3 id="2-13-在曲面里去除不要的曲面">2.13 在曲面里去除不要的曲面</h3><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606223415237.png" alt="image-20230606223415237" style="zoom:67%;" /><h3 id="2-14-扫掠曲面（灵活性高）">2.14 扫掠曲面（灵活性高）</h3><p>​引导曲线：它管的是轮廓</p><p>​脊线：默认和引导曲线一样，它管的是轮廓的引导方向</p><p>​在脊线上的任意一点垂直于脊线作截面，它的截面就是轮廓线。</p><p>注：常用见高亮部分</p><h4 id="2-14-1-扫掠曲面">2.14-1 扫掠曲面</h4><table><thead><tr><th style="text-align:center"><mark>1.轮廓类型：显式，曲面扫掠方式：使用参考曲面</mark></th><th style="text-align:center">示例：</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230606225025555.png" alt="image-20230606225025555" style="zoom:67%;" /></td><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607093841584.png" alt="image-20230607093841584" style="zoom:67%;" /></td></tr></tbody></table><table><thead><tr><th style="text-align:center"><mark>2.轮廓类型：显式，曲面扫掠方式：使用两条引导曲线</mark></th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607104130291.png" alt="image-20230607104130291" style="zoom:80%;" /></td></tr></tbody></table><table><thead><tr><th style="text-align:center">3.轮廓类型：显式，曲面扫掠方式：使用拔模方向</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607111030461.png" alt="image-20230607111030461" style="zoom:67%;" /></td><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607110500132.png" alt="image-20230607110500132" style="zoom:67%;" />拔模角度是指与轮廓线在某方向角度相差XXX。</td></tr></tbody></table><h4 id="2-14-2-两曲线之间的直线扫掠曲面">2.14-2 两曲线之间的直线扫掠曲面</h4><table><thead><tr><th style="text-align:center">1.轮廓类型：直线，曲面扫掠方式：两极限</th><th style="text-align:center">示例：</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607111312500.png" alt="image-20230607111312500" style="zoom:70%;" /></td><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607113046046.png" alt="image-20230607113046046" style="zoom:67%;" /></td></tr></tbody></table><table><thead><tr><th style="text-align:center">2.轮廓类型：直线，曲面扫掠方式：极限和中间（第二个曲线是中间的）</th><th style="text-align:center">示例：</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607112801436.png" alt="image-20230607112801436" style="zoom:67%;" /></td><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607113214468.png" alt="image-20230607113214468" style="zoom:67%;" /></td></tr></tbody></table><table><thead><tr><th style="text-align:center">3.轮廓类型：直线，曲面扫掠方式：使用参考曲面（引导线要在参考曲面上）</th><th style="text-align:center">示例：</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607113507499.png" alt="image-20230607113507499" style="zoom:67%;" /></td><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607113938377.png" alt="image-20230607113938377" style="zoom:67%;" />角度30度表示新生成的曲面与引导线的交线的切线 和 引导线角度为30.</td></tr></tbody></table><h4 id="2-14-3-使用直线扫掠曲线曲面（常用3）">2.14-3 使用直线扫掠曲线曲面（常用3）</h4><table><thead><tr><th style="text-align:center">1.轮廓类型：直线，曲面扫掠方式：使用参考曲线</th><th style="text-align:center">示例：</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607114501329.png" alt="image-20230607114501329" style="zoom:87%;" /></td><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607114834610.png" alt="image-20230607114834610" style="zoom:57%;" />角度表示在引导线与参考线在某方向上角度</td></tr></tbody></table><table><thead><tr><th style="text-align:center">2.轮廓类型：直线，曲面扫掠方式：使用切面</th><th style="text-align:center">示例：</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607115052132.png" alt="image-20230607115052132" style="zoom:67%;" /></td><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607115241046.png" alt="image-20230607115241046" style="zoom:67%;" /></td></tr></tbody></table><table><thead><tr><th style="text-align:center"><mark>3.轮廓类型：直线，曲面扫掠方式：使用拔模方向</mark></th><th style="text-align:center">示例：</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607115629528.png" alt="image-20230607115629528" style="zoom:67%;" /></td><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607120020754.png" alt="image-20230607120020754" style="zoom:67%;" /></td></tr></tbody></table><h4 id="2-14-4-使用直线扫掠双切面曲面">2.14-4 使用直线扫掠双切面曲面</h4><table><thead><tr><th style="text-align:center">3.轮廓类型：直线，曲面扫掠方式：使用双切面</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607120455567.png" alt="image-20230607120455567" style="zoom:67%;" /></td></tr></tbody></table><h4 id="2-14-5-使用圆扫掠双切面曲面">2.14-5 使用圆扫掠双切面曲面</h4><table><thead><tr><th style="text-align:center">1.轮廓类型：圆，曲面扫掠方式：三条引导线</th><th>示例：</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607192350234.png" alt="image-20230607192350234" style="zoom:80%;" /></td><td>三条曲线形成圆弧</td></tr></tbody></table><table><thead><tr><th style="text-align:center">2.轮廓类型：圆，曲面扫掠方式：两个点和半径</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607203111321.png" alt="image-20230607203111321" style="zoom: 50%;" /></td></tr></tbody></table><table><thead><tr><th style="text-align:center">3.轮廓类型：圆，曲面扫掠方式：中心和两个角度</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607204047266.png" alt="image-20230607204047266" style="zoom:67%;" /></td></tr></tbody></table><table><thead><tr><th style="text-align:center">4.轮廓类型：圆，曲面扫掠方式：圆心和半径</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607204800831.png" alt="image-20230607204800831" style="zoom:67%;" /></td></tr></tbody></table><table><thead><tr><th style="text-align:center">5.轮廓类型：圆，曲面扫掠方式：两条引导线和切面</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607205647486.png" alt="image-20230607205647486" style="zoom:67%;" /></td></tr></tbody></table><table><thead><tr><th style="text-align:center">6.轮廓类型：圆，曲面扫掠方式：一条引导线和切面</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607211348774.png" alt="image-20230607211348774" style="zoom:67%;" /></td></tr></tbody></table><table><thead><tr><th style="text-align:center">7.轮廓类型：圆，曲面扫掠方式：限制曲线和切面</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607211609864.png" alt="image-20230607211609864" style="zoom:67%;" /></td></tr></tbody></table><h4 id="2-14-6-使用二次曲线扫掠双切面曲面">2.14-6 使用二次曲线扫掠双切面曲面</h4><table><thead><tr><th style="text-align:center">1.轮廓类型：圆，曲面扫掠方式：两条引导曲线</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607212438626.png" alt="image-20230607212438626" style="zoom:67%;" /></td></tr></tbody></table><table><thead><tr><th style="text-align:center">2.轮廓类型：圆，曲面扫掠方式：三条引导曲线</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@main/zqzb_img/image-20230607214050193.png" alt="image-20230607214050193" style="zoom:67%;" /></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Catia教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Catia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（十五）函数——函数加强：递归、lambda 表达式、高阶函数</title>
      <link href="/pythonbasic15.html"/>
      <url>/pythonbasic15.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2"><p>递归</p></li><li class="lvl-2"><p>lambda 表达式</p></li><li class="lvl-2"><p>高阶函数</p></li></ul><h1 id="一-递归">一. 递归</h1><h2 id="1-1-递归的应用场景">1.1 递归的应用场景</h2><p>递归是一种编程思想，应用场景：</p><ol><li class="lvl-3"><p>在我们日常开发中，如果要遍历一个文件夹下面所有的文件，通常会使用递归来实现；</p></li><li class="lvl-3"><p>在后续的算法课程中，很多算法都离不开递归，例如：快速排序。</p></li></ol><h3 id="1-1-1-递归的特点">1.1.1 递归的特点</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>函数内部自己调用自己</strong></p></li><li class="lvl-2"><p><strong>必须有出口，即结束条件</strong></p><p>当达到出口条件时，函数将一步一步结束递归计算</p></li></ul><h2 id="1-2-应用：3以内数字累加和">1.2 应用：3以内数字累加和</h2><ul class="lvl-0"><li class="lvl-2"><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">递归特点：</span></span><br><span class="line"><span class="string">1. 函数内部也可调用</span></span><br><span class="line"><span class="string">2. 须有出口, 即结束条件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">函数返回值： 写法 和 返回的位置： 函数调用的位置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 3 + 2 + 1</span></span><br><span class="line"><span class="comment"># 6 = 3 + 2以内数字累加和</span></span><br><span class="line"><span class="comment"># 2以内数字累加和 = 2 + 1以内数字累加和</span></span><br><span class="line"><span class="comment"># 1以内数字累计和 = 1 # 出口：当达到结束条件，就开始一层一层结束     递归</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_numbers</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="comment"># 1.如果是1，直接返回1 -- 出口</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:   <span class="comment"># 出口：结束条件</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>   <span class="comment"># 当达到出口条件，就返回1结束递归</span></span><br><span class="line">    <span class="comment"># 2.如果不是1，重复执行累加并返回结果</span></span><br><span class="line">    <span class="keyword">return</span> num + sum_numbers(num-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">sum_result = sum_numbers(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输出结果为6</span></span><br><span class="line"><span class="built_in">print</span>(sum_result)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>执行结果</p></li></ul><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/1.6w4ysirwf3s0.webp" alt="1"></p><p>递归出口问题：</p><p>​当递归没有出口时，报错：超出最大递归深度。</p><h1 id="二-lambda-表达式">二. lambda 表达式</h1><h2 id="2-1-lambda的应用场景">2.1 lambda的应用场景</h2><p>如果<strong>一个函数有一个返回值，并且只有一句代码，可以使用 lambda简化</strong>。</p><p>lambda作用是简化代码。</p><h2 id="2-2-lambda语法">2.2 lambda语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数列表（即函数形参） ： 表达式</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><strong>lambda表达式的<mark>参数可有可无</mark></strong>，函数的参数在lambda表达式中完全适用。</p></li><li class="lvl-2"><p>lambda表达式能接收任何数量的参数==<strong>但只能返回一个表达式的值</strong>==。</p></li></ul><h3 id="2-2-1-示例">2.2.1 示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn1</span>():</span><br><span class="line"><span class="keyword">return</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line">ret1 = fn1()</span><br><span class="line"><span class="built_in">print</span>(ret1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda表达式, lambda也称匿名函数</span></span><br><span class="line"><span class="comment"># 语法：lambda 参数列表 ： 表达式（这里用上式中return后面的表达式）</span></span><br><span class="line"></span><br><span class="line">fn2 = <span class="keyword">lambda</span>: <span class="number">100</span>  <span class="comment">#把lambda表达式保存到变量fn2中</span></span><br><span class="line"><span class="built_in">print</span>(fn2)  <span class="comment"># lambda--也称匿名函数，此时打印的是lambda的内存地址</span></span><br><span class="line"><span class="comment"># 得到 100返回值 调用函数fn2()</span></span><br><span class="line"><span class="built_in">print</span>(fn2())</span><br></pre></td></tr></table></figure><blockquote><p>注意：直接打印lambda表达式，输出的是此lambda表达式的内存地址</p></blockquote><h2 id="2-3-示例：计算a-b">2.3 示例：计算a + b</h2><h3 id="2-3-1-函数实现">2.3.1 函数实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算a+b</span></span><br><span class="line"><span class="comment"># 自定义函数表达</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">ret1 = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(ret1)</span><br></pre></td></tr></table></figure><blockquote><p>思考：需求简单，是否代码多？</p></blockquote><h3 id="2-3-2-lambda实现">2.3.2 lambda实现</h3><p>**注：**对于自定义函数，如果使用lambda表达式（其中，表达式中含形参数）简化时，调用时使用赋值变量加实参即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lambda表达式</span></span><br><span class="line">fn1 = <span class="keyword">lambda</span> a, b: a+b</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="2-4-lambda的参数形式">2.4 lambda的参数形式</h2><h3 id="2-4-1-无参数">2.4.1.无参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无参数</span></span><br><span class="line">fn1 = <span class="keyword">lambda</span>: <span class="number">100</span> <span class="comment"># 自定义函数没有参数时</span></span><br><span class="line"><span class="built_in">print</span>(fn1()) </span><br></pre></td></tr></table></figure><h3 id="2-4-2-一个参数">2.4.2.一个参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a: a</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="string">&#x27;hello world&#x27;</span>))  <span class="comment"># lambda有几个形参，函数调用时候就要传入几个数据</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3-默认参数（缺省参数）">2.4.3.默认参数（缺省参数）</h3><p>​lambda表达式有几个形参，函数调用时就需要几个传入数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a, b, c=<span class="number">100</span>: a + b + c</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1000</span>))</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="2-4-4-可变参数：-args">2.4.4.可变参数：*args</h3><p>​可变参数：用于不确定调用的时候会传递多少个参数(不传参也可以)的场景</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> *args: args</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">10</span>, <span class="number">20</span>, <span class="number">20</span>)) <span class="comment"># 结果：(10, 20, 20)</span></span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">12</span>)) <span class="comment"># 结果：(12,)</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：这里的可变参数传入到lambda之后，返回值为元组。</p><p>用于位置参数传递数据，用于接收位置参数，但是不确定位置参数个数时，使用一个变量*args去接收参数，返回是元组类型，</p></blockquote><h3 id="2-4-5-可变参数：-kwargs">2.4.5.可变参数：**kwargs</h3><p>​可变参数：用于不确定调用的时候会传递多少个参数(不传参也可以)的场景</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> **kwargs: kwargs</span><br><span class="line"><span class="built_in">print</span>(fn1(name=<span class="string">&#x27;python&#x27;</span>, age=<span class="number">20</span>))</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里的可变参数传入到lambda之后，返回值为字典。</p><p>用于关键字参数传递数据，用于接收关键字参数，但是不确定关键字参数个数时，使用一个变量 **kwargs去接收参数，返回是字典类型</p></blockquote><h2 id="2-5-lambda的应用">2.5 lambda的应用</h2><h3 id="2-5-1-带判断的lambda">2.5.1. 带判断的lambda</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a, b: a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b <span class="comment"># a if a &gt; b else b 三目运算符</span></span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">1000</span>, <span class="number">500</span>))</span><br></pre></td></tr></table></figure><h3 id="2-5-2-列表数据按字典key的值排序">2.5.2. 列表数据按字典key的值排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ROSE&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 列表序列名.sort(key=lambda..., reverse=bool型(True或False))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按name key对应的值进行升序排序</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="comment"># 默认按照升序排列，即reverse=false,可不写</span></span><br><span class="line"><span class="built_in">print</span>(students)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按name key对应的值进行降序排序</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;name&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 列表序列名.sort() 默认按照升序排列，即reverse=True</span></span><br><span class="line"><span class="built_in">print</span>(students)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按age key对应的值进行升序排序</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="comment"># 列表序列名.sort() 默认按照升序排列，即reverse=false,可不写</span></span><br><span class="line"><span class="built_in">print</span>(students)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>students.sort(key=lambda x: x['name'])</code>在这段代码中，<mark>x是一个lambda表达式的参数，用于表示students列表中的每个字典元素，在lambda函数中代表每个字典元素本身，也就是说x实际上就是一个字典。</mark></p><p>该段代码将包含学生姓名及年龄等信息的字典按照姓名（name）的首字母进行升序排序。其中sort()函数的key参数指定了排序时所使用的关键字，而通过lambda函数定义的参数x则是用于提取字典元素中作为排序依据的name值，从而实现按照name值进行排序的功能。在这里，<mark>lambda表达式相当于一个匿名函数，用于提供sort()函数所需的关键字</mark>。</p></blockquote><h1 id="三-高阶函数">三. 高阶函数</h1><p><mark>把函数作为参数传入</mark>，这样的函数称为高阶函数，高阶函数是函数式编程的体现。函数式编程就是指这种高度抽象的编程范式。</p><h2 id="3-1-体验高阶函数">3.1 体验高阶函数</h2><p>在Python中，<code>abs()</code>函数可以完成对数字求绝对值计算。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">abs</span>(-<span class="number">10</span>)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p><code>round()</code>函数可以完成对数字的四舍五入计算。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">1.2</span>)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">round</span>(<span class="number">1.9</span>)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>需求：任意两个数字，按照指定要求整理数字后再进行求和计算。</p><ul class="lvl-0"><li class="lvl-2"><p>方法1</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_num</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a) + <span class="built_in">abs</span>(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = add_num(-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>方法2</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_num</span>(<span class="params">a, b, fun</span>):</span><br><span class="line">    <span class="keyword">return</span> fun(a) + fun(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = sum_num(-<span class="number">1</span>, <span class="number">2</span>, <span class="built_in">abs</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：两种方法对比之后，发现，方法2的代码会更加简洁，函数灵活性更高。</p></blockquote><p>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p><h2 id="3-2-内置高阶函数">3.2 内置高阶函数</h2><h3 id="3-1-1-map-—迭代">3.1.1 map()—迭代</h3><p>​<strong>map(func, lst)</strong>，==将传入的函数变量func作用到lst变量的每个元素中，并将结果组成新的列表(Python2)/**迭代器(Python3)**返回。==如果要转换为列表, 可以使用 list() 来转换。</p><p>需求：计算<code>list1</code>序列中各个数字的2次方。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"><span class="comment"># func = lambda x : x ** 2</span></span><br><span class="line"></span><br><span class="line">result = <span class="built_in">map</span>(func, list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># &lt;map object at 0x0000013769653198&gt; # 打印计算后存在内存里的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))  <span class="comment"># [1, 4, 9, 16, 25] 把结果用列表list转换打印出来</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-reduce-—累积计算">3.2.2 reduce()—累积计算</h3><p>​<strong>reduce(func，lst)</strong>，其中<strong>func必须有两个参数</strong>。<mark>每次func计算的结果继续和序列的下一个元素做累积计算。</mark></p><blockquote><p>注意：reduce()传入的参数func必须接收2个参数。</p></blockquote><p>需求：计算<code>list1</code>序列中各个数字的累加和。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = functools.reduce(func, list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 15</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-filter-—过滤">3.2.3 filter()—过滤</h3><p>​**filter(func, lst)**函数<mark>用于过滤序列, 过滤掉不符合条件的元素, 返回一个 filter 对象</mark>。<strong>如果要转换为列表, 可以使用 list() 来转换。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = <span class="built_in">filter</span>(func, list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># &lt;filter object at 0x0000017AF9DC3198&gt; # 打印计算后存在内存里的地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))  <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h1 id="总结">总结</h1><ul class="lvl-0"><li class="lvl-2"><p>递归</p><ul class="lvl-2"><li class="lvl-6">函数内部自己调用自己</li><li class="lvl-6">必须有出口</li></ul></li><li class="lvl-2"><p>lambda</p><ul class="lvl-2"><li class="lvl-6">语法</li></ul>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数列表: 表达式</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><p>lambda的参数形式</p><ul class="lvl-4"><li class="lvl-10">无参数</li></ul>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span>: 表达式</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-10"><p>一个参数</p></li></ul>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数: 表达式</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-10"><p>默认参数</p></li></ul>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> key=value: 表达式</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-10"><p>不定长位置参数</p></li></ul>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> *args: 表达式</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-10"><p>不定长关键字参数</p></li></ul>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> **kwargs: 表达式</span><br></pre></td></tr></table></figure></li></ul></li><li class="lvl-2"><p>高阶函数</p><ul class="lvl-2"><li class="lvl-6">作用：把函数作为参数传入，化简代码</li><li class="lvl-6">内置高阶函数<ul class="lvl-4"><li class="lvl-10">map()</li><li class="lvl-10">reduce()</li><li class="lvl-10">filter()</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（十四）函数——函数应用：学员管理系统</title>
      <link href="/pythonbasic14.html"/>
      <url>/pythonbasic14.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">应用：学员管理系统</li></ul><h1 id="一-应用：学员管理系统">一. 应用：学员管理系统</h1><h2 id="1-1-系统简介">1.1 系统简介</h2><p>需求：进入系统显示系统功能界面，功能如下：</p><ul class="lvl-0"><li class="lvl-2"><p>1、添加学员</p></li><li class="lvl-2"><p>2、删除学员</p></li><li class="lvl-2"><p>3、修改学员信息</p></li><li class="lvl-2"><p>4、查询学员信息</p></li><li class="lvl-2"><p>5、显示所有学员信息</p></li><li class="lvl-2"><p>6、退出系统</p></li></ul><p>系统共6个功能，用户根据自己需求选取。</p><h2 id="1-2-步骤分析">1.2 步骤分析</h2><ol><li class="lvl-3"><p>显示功能界面</p></li><li class="lvl-3"><p>用户输入功能序号</p></li><li class="lvl-3"><p>根据用户输入的功能序号，执行不同的功能(函数)</p><p>3.1 定义函数</p><p>3.2 调用函数</p></li></ol><h2 id="1-3-需求实现">1.3 需求实现</h2><h3 id="1-3-1-显示功能界面">1.3.1 显示功能界面</h3><p>定义函数<code>print_info</code>，负责显示系统功能。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;欢迎登录学员管理系统&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1: 添加学员&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2: 删除学员&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;3: 修改学员信息&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;4: 查询学员信息&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;5: 显示所有学员信息&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;6: 退出系统&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line">     </span><br><span class="line">print_info()</span><br></pre></td></tr></table></figure><h3 id="1-3-2-用户输入序号，选择功能">1.3.2 用户输入序号，选择功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_num = <span class="built_in">input</span>(<span class="string">&#x27;请选择您需要的功能序号：&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-3-3-根据用户选择，执行不同的功能">1.3.3 根据用户选择，执行不同的功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> user_num == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;添加学员&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> user_num == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;删除学员&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> user_num == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;修改学员信息&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> user_num == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;查询学员信息&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> user_num == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;显示所有学员信息&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> user_num == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;退出系统&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>工作中，需要根据实际需求调优代码。</p><ol><li class="lvl-3">用户选择系统功能的代码需要循环使用，直到用户主动退出系统。</li><li class="lvl-3">如果用户输入1-6以外的数字，需要提示用户。</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 1. 显示功能界面</span></span><br><span class="line">    print_info()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 用户选择功能</span></span><br><span class="line">    user_num = <span class="built_in">input</span>(<span class="string">&#x27;请选择您需要的功能序号：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 根据用户选择，执行不同的功能</span></span><br><span class="line">    <span class="keyword">if</span> user_num == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;添加学员&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> user_num == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;删除学员&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> user_num == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;修改学员信息&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> user_num == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查询学员信息&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> user_num == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;显示所有学员信息&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> user_num == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;退出系统&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入错误，请重新输入!!!&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-3-4-定义不同功能的函数">1.3.4 定义不同功能的函数</h3><p>所有功能函数都是操作学员信息，所有存储所有学员信息应该是一个<mark>全局变量</mark>，数据类型为<mark>列表</mark>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = []</span><br></pre></td></tr></table></figure><p><mark>单个学员：姓名，学号，年龄，性别等，以字典键值对形式存储。最后将每个学员信息（字典）放在整个列表里</mark></p><h4 id="1-3-4-1-添加学员">1.3.4.1 添加学员</h4><ul class="lvl-0"><li class="lvl-2"><p>需求分析</p></li></ul><ol><li class="lvl-3"><p>接收用户输入学员信息，并保存</p></li><li class="lvl-3"><p>判断是否添加学员信息</p><p>2.1 如果学员姓名已经存在，则报错提示</p><p>2.2 如果学员姓名不存在，则准备空字典，将用户输入的数据追加到字典，再列表追加字典数据</p></li><li class="lvl-3"><p>对应的if条件成立的位置调用该函数</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>代码实现</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_info</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 添加学员 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 接收用户输入学员信息</span></span><br><span class="line">    new_id = <span class="built_in">input</span>(<span class="string">&#x27;请输入学号：&#x27;</span>)</span><br><span class="line">    new_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入姓名：&#x27;</span>)</span><br><span class="line">    new_tel = <span class="built_in">input</span>(<span class="string">&#x27;请输入手机号：&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 声明info是全局变量</span></span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测用户输入的姓名是否存在，存在则报错提示并退出当前add_info()函数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> new_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;该用户已经存在！&#x27;</span>)</span><br><span class="line">            <span class="comment"># return作用：退出当前函数，后面添加信息的代码不执行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="comment"># 退出当前add_info()函数，将不执行当前函数后续代码。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果用户输入的姓名不存在，则添加该学员信息，准备空字典</span></span><br><span class="line">    info_dict = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将用户输入的数据追加到字典</span></span><br><span class="line">    info_dict[<span class="string">&#x27;id&#x27;</span>] = new_id</span><br><span class="line">    info_dict[<span class="string">&#x27;name&#x27;</span>] = new_name</span><br><span class="line">    info_dict[<span class="string">&#x27;tel&#x27;</span>] = new_tel</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将这个学员的字典数据追加到列表</span></span><br><span class="line">    info.append(info_dict)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><h4 id="1-3-4-2-删除学员">1.3.4.2 删除学员</h4><ul class="lvl-0"><li class="lvl-2"><p>需求分析</p></li></ul><p>按用户输入的学员姓名进行删除</p><ol><li class="lvl-4"><p>用户输入目标学员姓名</p></li><li class="lvl-4"><p>检查这个学员是否存在</p><p>2.1 如果存在，则列表删除这个数据</p><p>2.2 如果不存在，则提示“该用户不存在”</p></li><li class="lvl-3"><p>对应的if条件成立的位置调用该函数</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>代码实现</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除学员</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">del_info</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;删除学员&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 用户输入要删除的学员的姓名</span></span><br><span class="line">    del_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要删除的学员的姓名：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="comment"># 2. 判断学员是否存在:如果输入的姓名存在则删除(列表里面字典），否则报错提示,break:这个系统不允许重名，删除了一个后面的不需要再遍历</span></span><br><span class="line">    <span class="comment"># 遍历列表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info: <span class="comment"># i--遍历的是列表的下标，从0开始递增</span></span><br><span class="line">        <span class="keyword">if</span> del_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">          <span class="comment"># 列表删除数据 -- 按数据删除remove</span></span><br><span class="line">            info.remove(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;该学员不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><h4 id="1-3-4-3-修改学员信息">1.3.4.3 修改学员信息</h4><ul class="lvl-0"><li class="lvl-2"><p>需求分析</p></li></ul><ol><li class="lvl-3"><p>用户输入目标学员姓名</p></li><li class="lvl-3"><p>检查这个学员是否存在</p><p>2.1 如果存在，则修改这位学员的信息，例如手机号</p><p>2.2 如果不存在，则报错</p></li><li class="lvl-3"><p>对应的if条件成立的位置调用该函数</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>代码实现</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modify_info</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;修改函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 用户输入要修改的学员的姓名</span></span><br><span class="line">    modify_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要修改的学员的姓名：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="comment"># 2. 判断学员是否存在：如果输入的姓名存在则修改手机号，否则报错提示</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> modify_name == i [<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            i[<span class="string">&#x27;tel&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&#x27;请输入新的手机号：&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;该学员不存在&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><h4 id="1-3-4-4-查询学员信息">1.3.4.4 查询学员信息</h4><ul class="lvl-0"><li class="lvl-2"><p>需求分析</p></li></ul><ol><li class="lvl-3"><p>用户输入目标学员姓名</p></li><li class="lvl-3"><p>检查学员是否存在</p><p>2.1 如果存在，则显示这个学员的信息</p><p>2.2 如果不存在，则报错提示</p></li><li class="lvl-3"><p>对应的if条件成立的位置调用该函数</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>代码实现</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询学员</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_info</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;查询学员&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 输入要查找的学员姓名：</span></span><br><span class="line">    search_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查找的学员姓名：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="comment"># 2. 判断学员是否存在：如果输入的姓名存在则显示这位学员信息，否则报错提示</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> search_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;查找到的学员信息如下：----------&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;该学员的学号是<span class="subst">&#123;i[<span class="string">&#x27;id&#x27;</span>]&#125;</span>, 姓名是<span class="subst">&#123;i[<span class="string">&#x27;name&#x27;</span>]&#125;</span>, 手机号是<span class="subst">&#123;i[<span class="string">&#x27;tel&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;该学员不存在&#x27;</span>)</span><br><span class="line">     <span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><h4 id="1-3-4-5-显示所有学员信息">1.3.4.5 显示所有学员信息</h4><ul class="lvl-0"><li class="lvl-2"><p>需求分析</p></li></ul><p>打印所有学员信息</p><ul class="lvl-0"><li class="lvl-2"><p>代码实现</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示所有学员信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_all</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 显示所有学员信息 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;学号\t姓名\t手机号&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="string">&quot;id&quot;</span>]&#125;</span>\t<span class="subst">&#123;i[<span class="string">&quot;name&quot;</span>]&#125;</span>\t<span class="subst">&#123;i[<span class="string">&quot;tel&quot;</span>]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="1-3-4-6-退出系统">1.3.4.6 退出系统</h4><p>在用户输入功能序号<code>6</code>的时候要退出系统，代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">elif</span> user_num == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">    exit_flag = <span class="built_in">input</span>(<span class="string">&#x27;确定要退出吗？yes or no&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> exit_flag == <span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="1-4-自行编写1-字典存储">1.4 自行编写1(字典存储)</h2><p>具体代码见<a href="https://github.com/AnZhiJJ/CODE_Study/blob/Python/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E5%87%BD%E6%95%B0%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8%EF%BC%9A%E5%AD%A6%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.py">GitHub</a></p><h3 id="1-4-1-总结">1.4.1 总结</h3><p>以上字典形式存储数据，在自定义函数内部对其修改时，需要提前声明<code>global stu_user</code>这是对全局变量字典修改，但是想增加学员其他信息无法实现，故使用列表存储。</p><h2 id="1-5-自行编写2-列表存储学员信息-字典存储管理员信息">1.5 自行编写2(列表存储学员信息+字典存储管理员信息)</h2><p>具体代码见<a href="https://github.com/AnZhiJJ/CODE_Study/blob/Python/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E5%87%BD%E6%95%B0%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8%EF%BC%9A%E5%AD%A6%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.py">GitHub</a></p><h3 id="1-5-1-总结">1.5.1 总结</h3><h4 id="1-5-1-1-for与if处理">1.5.1.1 for与if处理</h4><p>优化前：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stu_info:</span><br><span class="line"><span class="keyword">if</span> new_name <span class="keyword">in</span> i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;警告:该用户已经存在,请重新输入！&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>优化后：</p><p>​可以使用 Python 的 <code>any()</code> 函数，将列表推导式和条件语句结合在一起，来简化循环体内的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">any</span>(new_name <span class="keyword">in</span> i[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> i <span class="keyword">in</span> stu_info):</span><br><span class="line"><span class="comment"># 或者这种写法 if any(d[&#x27;name&#x27;] == new_name for d in stu_info):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;警告:该用户已经存在！&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><blockquote><p><code>any()</code> 函数接受一个可迭代对象作为参数，如果其中任意一个元素满足条件，就返回 <code>True</code>，否则返回 <code>False</code>。在这里，我们传入了一个列表推导式，它会遍历 <code>stu_info</code> 列表中的每个字典，并检查该字典的 <code>'name'</code> 键是否等于用户输入的新姓名 <code>new_name</code>。如果有任何一个字典的姓名匹配成功，那么 <code>any()</code> 函数就会返回 <code>True</code>，表示重名警告，否则返回 <code>False</code>，执行跳出循环的操作。这种写法相比于原来的 for 循环更加简洁，也更易于阅读和维护。</p></blockquote><h4 id="1-5-1-2-if-any-del-name-in-i-name-for-i-in-stu-info-和if-any-del-name-i-name-for-i-in-stu-info-在Python这两种写法区别：">1.5.1.2  <code>if any(del_name in i['name'] for i in stu_info):</code>和<code>if any(del_name== i['name'] for i in stu_info):</code> 在Python这两种写法区别：</h4><blockquote><p>这两种写法的区别在于 <code>in</code> 和 <code>==</code> 的操作方式不同。第一个代码片段使用 <code>in</code> 运算符来检查 <code>del_name</code> 是否出现在学生信息列表中每个元素字典的 <code>name</code> 键对应的值中。这种方式<font color=red>可以用于检查一个字符串是否是另一个字符串的子串，也可以用于检查一个元素是否在一个序列中出现过</font>。该代码返回结果为 <code>True</code> 或 <code>False</code>。第二个代码片段使用 <code>==</code> 运算符来检查 <code>del_name</code> 和学生信息列表中每个元素字典的 <code>name</code> 键对应的值是否完全相等。这种方式<font color=red>只有当两个值完全相同的时候才会返回 <code>True</code>，否则返回 <code>False</code>。</font>因此，如果您想要检查一个字符串是否是另一个字符串的子串，则可以使用第一个代码片段。如果您想检查两个相似但不完全相等的字符串是否匹配，则需要使用第二个代码片段。</p></blockquote><h4 id="1-5-1-3-创建空字典并将数据追加到字典里">1.5.1.3 创建空字典并将数据追加到字典里</h4><p>优化前：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">创建空字典</span><br><span class="line">info_dict = &#123;&#125;</span><br><span class="line"><span class="comment"># 将用户输入的数据追加到字典</span></span><br><span class="line">info_dict[<span class="string">&#x27;id&#x27;</span>] = new_id</span><br><span class="line">info_dict[<span class="string">&#x27;name&#x27;</span>] = new_name</span><br><span class="line">info_dict[<span class="string">&#x27;tel&#x27;</span>] = new_tel</span><br><span class="line">info_dict[<span class="string">&#x27;age&#x27;</span>] = new_age</span><br><span class="line">info_dict[<span class="string">&#x27;gender&#x27;</span>] = new_gender</span><br></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info_dict = &#123;<span class="string">&#x27;id&#x27;</span>: new_id, <span class="string">&#x27;name&#x27;</span>: new_name, <span class="string">&#x27;tel&#x27;</span>: new_tel, <span class="string">&#x27;age&#x27;</span>: new_age, <span class="string">&#x27;gender&#x27;</span>: new_gender&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-1-4-return—退出当前函数处理：">1.5.1.4 return—退出当前函数处理：</h4><p># return作用：退出当前函数，后面代码不执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def add_info():</span><br><span class="line">    &quot;&quot;&quot; 添加学员 &quot;&quot;&quot;</span><br><span class="line">    # 接收用户输入学员信息</span><br><span class="line">    new_id = input(&#x27;请输入学号：&#x27;)</span><br><span class="line">    new_name = input(&#x27;请输入姓名：&#x27;)</span><br><span class="line">    new_tel = input(&#x27;请输入手机号：&#x27;)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    # 声明info是全局变量</span><br><span class="line">    global info</span><br><span class="line"></span><br><span class="line">    # 检测用户输入的姓名是否存在，存在则报错提示并退出当前add_info()函数</span><br><span class="line">    for i in info:</span><br><span class="line">        if new_name == i[&#x27;name&#x27;]:</span><br><span class="line">            print(&#x27;该用户已经存在！&#x27;)</span><br><span class="line">            return # 退出当前add_info()函数</span><br></pre></td></tr></table></figure><p>​这段截取的添加学员信息函数实现中，通过return解决了当输入学员姓名存在时，如何利用return退出当前函数，而不是通过break先退出循环，再解决后续代码不执行问题。</p><h4 id="1-5-1-5-Python中如何区别input输入的数字和除数字以外其它字符：">1.5.1.5 Python中如何区别input输入的数字和除数字以外其它字符：</h4><p>​在 Python 中，使用 <code>input</code> 函数接收用户输入的值时，得到的都是字符串类型（<code>str</code>）。如果您需要将用户输入的值解析为数字类型，可以使用 <code>int()</code> 或 <code>float()</code> 函数进行转换。</p><p>​如果用户输入的不是数字，而是其他字符，则可能会导致转换失败并抛出异常。为了避免这种情况，您可以使用 <code>try-except</code> 结构来处理异常。例如，以下代码演示了如何使用 <code>try-except</code> 来处理用户输入的值：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个数字：&#x27;</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入有误，请重新输入&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;您输入的数字是：&#x27;</span>, num)</span><br></pre></td></tr></table></figure><p>​在这个示例中，我们使用 <code>try</code> 语句来尝试将用户输入的值转换为整数。如果转换失败，会抛出一个 <code>ValueError</code> 异常。在 <code>except</code> 块中，我们打印一条错误消息并提示用户重新输入。如果转换成功，则跳出循环并输出结果。</p><p>​这种方法可以确保程序不会因为用户输入非数字内容而崩溃，同时也给用户提供了友好的提示信息。</p>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（十三）函数——函数提高</title>
      <link href="/pythonbasic13.html"/>
      <url>/pythonbasic13.html</url>
      
        <content type="html"><![CDATA[<h1 id="课程：函数">课程：函数</h1><h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2"><p>变量作用域</p></li><li class="lvl-2"><p>多函数程序执行流程</p></li><li class="lvl-2"><p>函数的返回值</p></li><li class="lvl-2"><p>函数的参数</p></li><li class="lvl-2"><p>拆包和交换两个变量的值</p></li><li class="lvl-2"><p>引用</p></li><li class="lvl-2"><p>可变和不可变类型</p></li></ul><h1 id="一-变量作用域">一. 变量作用域</h1><p>变量作用域指的是变量生效的范围，主要分为两类：<mark>局部变量</mark>和<mark>全局变量</mark>。</p><ul class="lvl-0"><li class="lvl-2"><p>局部变量</p></li></ul><p>所谓局部变量是<strong>定义在函数体内部的变量</strong>，即<strong>只在函数体内部生效。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>():</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 报错：name &#x27;a&#x27; is not defined</span></span><br></pre></td></tr></table></figure><blockquote><p>变量a是定义在<code>testA</code>函数内部的变量，在函数外部访问则立即报错。</p></blockquote><p>局部变量的作用：在函数体内部，临时保存数据，即当函数调用完成后，则销毁局部变量。</p><ul class="lvl-0"><li class="lvl-2"><p>全局变量</p></li></ul><p>所谓全局变量，指的是<strong>在函数体内、外都能生效的变量</strong>。</p><p>思考：如果有一个数据，在函数A和函数B中都要使用，该怎么办？</p><p>答：将这个数据存储在一个全局变量里面。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义全局变量a</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 访问全局变量a，并打印变量a存储的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testB</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 访问全局变量a，并打印变量a存储的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line">testB()  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><p>思考：<code>testB</code>函数需求修改变量a的值为200，如何修改程序？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testB</span>():</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line">testB()  <span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;全局变量a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)  <span class="comment"># 全局变量a = 100</span></span><br></pre></td></tr></table></figure><p>思考：在<code>testB</code>函数内部的<code>a = 200</code>中的变量a是在修改全局变量<code>a</code>吗？</p><p>答：不是。观察上述代码发现，15行得到a的数据是100，仍然是定义全局变量a时候的值，而没有返回</p><p><code>testB</code>函数内部的200。综上：<code>testB</code>函数内部的<code>a = 200</code>是定义了一个局部变量。</p><h2 id="思考：如何在函数体内部修改全局变量？">思考：<mark>如何在函数体内部修改全局变量？</mark></h2><p>在函数体内部修改全局变量前，<mark>添加<code>global 全局变量名</code>关键字声明a是全局变量</mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testB</span>():</span><br><span class="line">    <span class="comment"># global 关键字声明a是全局变量</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line">testB()  <span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;全局变量a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)  <span class="comment"># 全局变量a = 200</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li class="lvl-3"><p>如果在函数里面直接把变量 a=200赋值，此时的a不是全局变量的修改，而是相当于在函数内部声明了一个新的局部变量</p></li><li class="lvl-3"><p>如果需要在函数体内部修改全局变量，需要在修改前，先添加<code>global 全局变量名</code>声明a为全局变量，再对变量重新赋值</p></li><li class="lvl-3"><p>==对于全局变量—字典，如果要在自定义函数内部修改字典内部参数时，可以这样声明<code>global 字典名</code>，==列表、集合也是类型写法。</p></li></ol><h3 id="示例">示例</h3><p>​在 Python 中，如果你在函数内部使用了一个未声明为全局变量的变量或对象，并对其进行了修改，则 Python 会将其解释为一个新的局部变量，而不是修改全局变量。</p><p>​如果你想在函数内部修改全局变量时，需要在函数内部显式声明该变量为全局变量。可以使用 <code>global</code> 关键字来实现这一点。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 18&#125;</span><br><span class="line"></span><br><span class="line">def my_func():</span><br><span class="line">    global my_dict</span><br><span class="line">    my_dict[&quot;age&quot;] = 20</span><br><span class="line"></span><br><span class="line">my_func()</span><br><span class="line">print(my_dict)</span><br></pre></td></tr></table></figure><p>​在这个例子中，我们定义了一个名为 <code>my_dict</code> 的全局变量，并将其初始值设置为 <code>&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 18&#125;</code>。然后，我们定义了一个名为 <code>my_func</code> 的函数，其中修改了全局变量 <code>my_dict</code> 中键 <code>&quot;age&quot;</code> 对应的值为 <code>20</code>。需要注意的是，在函数内部我们使用了 <code>global my_dict</code> 来声明 <code>my_dict</code> 是全局变量。最后，我们调用 <code>my_func</code> 函数并输出全局变量 <code>my_dict</code> 的值，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 20&#125;</span><br></pre></td></tr></table></figure><p>​总之，如果你需要在函数内部修改全局变量，记得使用 <code>global</code> 关键字显式声明它是一个全局变量。</p><h2 id="思考：如果没有用global关键字声明，全局变量字典里面键值还是被修改了，是怎么回事？">思考：如果没有用global关键字声明，全局变量字典里面键值还是被修改了，是怎么回事？</h2><p>​如果在函数内部没有使用 <code>global</code> 关键字声明全局变量，并且直接对全局变量进行了修改，那么实际上并不是修改了全局变量本身，而是修改了全局变量所指向的对象。因为在 Python 中，变量其实是一个指向对象的引用，当你对变量进行修改时，实际上是在修改这个引用指向的对象，而不是这个变量本身。</p><p>​当你在函数内部访问一个全局变量时，实际上是在访问全局变量所指向的对象，而不是这个变量本身。如果你对这个对象进行了修改，那么这个修改就会影响到所有引用了它的变量，包括全局变量和其他局部变量。</p><p>下面是一个例子，演示了在函数内部修改全局变量所指向的列表对象的效果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_list = [1, 2, 3]</span><br><span class="line"></span><br><span class="line">def modify_list():</span><br><span class="line">    my_list[0] = 10</span><br><span class="line">    my_list.append(4)</span><br><span class="line"></span><br><span class="line">modify_list()</span><br><span class="line">print(my_list)</span><br></pre></td></tr></table></figure><p>​在这个例子中，我们定义了一个名为 <code>my_list</code> 的全局变量，并将其值设置为 <code>[1, 2, 3]</code>。然后，我们定义了一个名为 <code>modify_list</code> 的函数，其中对全局变量 <code>my_list</code> 所指向的列表对象进行了修改，将第一个元素的值改为了 <code>10</code>，并添加了一个新的元素 <code>4</code>。需要注意的是，在函数内部我们没有显式声明 <code>my_list</code> 是全局变量。最后，我们调用 <code>modify_list</code> 函数，并输出全局变量 <code>my_list</code> 的值，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[10, 2, 3, 4]</span><br></pre></td></tr></table></figure><p>​可以看到，尽管我们在函数内部并没有使用 <code>global</code> 关键字声明 <code>my_list</code> 是全局变量，但是对全局变量所指向的列表对象进行的修改仍然生效了。</p><h1 id="二-多函数程序执行流程">二. 多函数程序执行流程</h1><p>一般在实际开发过程中，<strong>一个程序往往由多个函数（后面知识中会讲解类）组成</strong>，并且多个函数共享某些数据，如下所示：</p><ul class="lvl-0"><li class="lvl-2"><p>共用全局变量</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 定义全局变量</span></span><br><span class="line">glo_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">global</span> glo_num</span><br><span class="line">    <span class="comment"># 修改全局变量</span></span><br><span class="line">    glo_num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="comment"># 调用test1函数中修改后的全局变量</span></span><br><span class="line">    <span class="built_in">print</span>(glo_num)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 调用test1函数，执行函数内部代码：声明和修改全局变量</span></span><br><span class="line">test1()</span><br><span class="line"><span class="comment"># 3. 调用test2函数，执行函数内部代码：打印</span></span><br><span class="line">test2()  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>返回值作为参数传递</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 保存函数test1的返回值</span></span><br><span class="line">result = test1()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.将函数返回值所在变量作为参数传递到test2函数</span></span><br><span class="line">test2(result)  <span class="comment"># 50</span></span><br></pre></td></tr></table></figure><h1 id="三-函数的返回值">三. 函数的返回值</h1><p>思考：如果一个函数如些两个return (如下所示)，程序如何执行？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">return_num</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = return_num()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>答：<strong>只执行了第一个return</strong>，原因<mark>是因为return可以退出当前函数，导致return下方的代码不执行。</mark></p><p>思考：如果一个函数要有多个返回值，该如何书写代码？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">return_num</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = return_num()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># (1, 2)--y</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li class="lvl-3"><p><mark><code>return a, b</code>写法，返回多个数据的时候，默认是元组类型。</mark></p></li><li class="lvl-3"><p><mark>return后面可以连接列表、元组或字典，以返回多个值。</mark></p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (<span class="number">1</span>, <span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;anzhi&#x27;</span>) <span class="comment"># 返回元组</span></span><br><span class="line"><span class="comment"># return [2, 3, 4] # 返回列表</span></span><br><span class="line"><span class="comment"># return &#123;&#x27;name&#x27;:&#x27;anzhiyu&#x27;, &#x27;age&#x27;:23, &#x27;gender&#x27;:&#x27;Man&#x27;, &#x27;stu_id&#x27;:&#x27;2022345&#x27;&#125; # 返回字典</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="四-函数的参数">四. 函数的参数</h1><h2 id="4-1-位置参数">4.1 位置参数</h2><p>位置参数：调用函数时<strong>根据函数定义的参数位置</strong>来传递参数。</p><p>把数据放到自定义函数对应的位置上，才能正确传递数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name, age, gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<mark>传递和定义参数的顺序及个数必须一致。</mark></p><p>如果顺序不一致，虽然不会报错，但是得到的数据无意义。</p></blockquote><h2 id="4-2-关键字参数">4.2 关键字参数</h2><p>**函数调用，通过“键=值”形式加以指定(即传递参数）。**可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。</p><p><mark>函数调用，通过“键=值”形式匹配，此时传递的参数顺序可以随意，只要“键=值”对应正确</mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name, age, gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">&#x27;Rose&#x27;</span>, age=<span class="number">20</span>, gender=<span class="string">&#x27;女&#x27;</span>) <span class="comment">#如果有位置参数时，位置参数必须在关键字参数的前面</span></span><br><span class="line">user_info(name=<span class="string">&#x27;ange&#x27;</span>, gender=<span class="string">&#x27;man&#x27;</span>, age=<span class="number">234</span>) <span class="comment">#顺序随意，只要“键=值”对应，打印结果正确</span></span><br><span class="line">user_info(gender=<span class="string">&#x27;man&#x27;</span>, age=<span class="number">234</span>, name=<span class="string">&#x27;ange&#x27;</span>)<span class="comment"># 顺序随意，只要“键=值”对应，打印结果正确</span></span><br></pre></td></tr></table></figure><p>注意：<strong>函数调用时，<font color=blue>如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。</font></strong></p><h2 id="4-3-缺省参数">4.3 缺省参数</h2><p><strong>缺省参数也叫默认参数，用于定义函数，为参数提供默认值</strong>，调用函数时可不传该默认参数的值（注意：<font color=red>所有位置参数必须出现在默认参数前，包括函数定义和调用</font>)。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name, age, gender=<span class="string">&#x27;男&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">20</span>)  <span class="comment"># 没有为缺省参数传值，表示使用了默认值</span></span><br><span class="line">user_info(<span class="string">&#x27;Rose&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;女&#x27;</span>) <span class="comment"># 为缺省参数传值，没有使用默认值</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：函数调用时，<mark>如果为缺省参数传值则修改默认参数值；否则使用这个默认值。</mark></p></blockquote><h2 id="4-4-不定长参数">4.4 不定长参数</h2><p>不定长参数也叫可变参数。**用于不确定调用的时候会传递多少个参数(**不传参也可以)的场景。此时，==可用包裹(packing)位置参数，或者包裹关键字参数，来进行参数传递，==会显得非常方便。</p><p><strong>以”填写表格信息时，有些是必填项，有些是选填项（可以不填）“为例，思考“不定长参数”意义</strong></p><ul class="lvl-0"><li class="lvl-2"><p>包裹位置传递</p><ol><li class="lvl-7">用于位置参数传递数据，用于接收位置参数，但是不确定位置参数个数时，<strong>使用一个变量*args去接收参数，返回是元组类型，</strong></li><li class="lvl-8">*args相当于把传递进来的数据打包，用于函数体内部使用。</li></ol><blockquote><p>位置参数：调用函数时<strong>根据函数定义的参数位置</strong>来传递参数。</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">*args</span>): <span class="comment"># 这里面的位置需要用*格式，后面变量名args，可以修改，一般用这个默认变量名</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>) <span class="comment">#结果：(&#x27;TOM&#x27;,)---返回一个元组</span></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">18</span>)  <span class="comment"># (&#x27;TOM&#x27;, 18)</span></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;man&#x27;</span>) <span class="comment">#结果：(&#x27;TOM&#x27;, 20, &#x27;man&#x27;)</span></span><br><span class="line">user_info() <span class="comment">#结果：()---可以为空</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<mark>传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，<strong>args是元组类型</strong>，这就是包裹位置传递</mark>。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>包裹关键字传递</p><ol><li class="lvl-7">用于关键字参数传递数据，用于接收关键字参数，但是不确定关键字参数个数时，*<em>使用一个变量 *<em>kwargs去接收参数，返回是字典类型</em></em></li><li class="lvl-7">**kwargs相当于把传递进来的数据打包，用于函数体内部使用。</li></ol></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">**kwargs</span>):  <span class="comment">#这里面关键字需要为**格式，后面变量名kwargs，可以修改，一般用这个默认变量名</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">user_info() <span class="comment">#结果： &#123;&#125;</span></span><br><span class="line">user_info(name=<span class="string">&#x27;TOM&#x27;</span>, age=<span class="number">18</span>, <span class="built_in">id</span>=<span class="number">110</span>)<span class="comment">#结果：&#123;&#x27;name&#x27;: &#x27;TOM&#x27;, &#x27;age&#x27;: 18, &#x27;id&#x27;: 110&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>综上：无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程。</p></blockquote><h1 id="五-拆包和交换变量值">五. 拆包和交换变量值</h1><h2 id="5-1-拆包">5.1 拆包</h2><p>即：把整体数据拆开</p><ul class="lvl-0"><li class="lvl-2"><p>拆包：元组</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">return_num</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span>   <span class="comment">#以元组类型返回这两个数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1, num2 = return_num()  </span><br><span class="line"><span class="built_in">print</span>(num1)  <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(num2)  <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>拆包：字典</p><p>字典数据拆包：变量存储的数据是字典的key值</p><p>想要取得字典里面的Value值，以<code>字典名[key值]</code>取得</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="comment"># dict1 有两个键值对，拆包的时候用两个变量接收数据</span></span><br><span class="line">a, b = dict1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对字典进行拆包，取出来的是字典的key</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># name</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># age</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dict1[a])  <span class="comment"># TOM 字典没有下标，是以键key来查找key对应的值value,即dict1[key1]=value1</span></span><br><span class="line"><span class="built_in">print</span>(dict1[b])  <span class="comment"># 18</span></span><br></pre></td></tr></table></figure><h2 id="5-2-交换变量值">5.2 交换变量值</h2><p>需求：有变量<code>a = 10</code>和<code>b = 20</code>，交换两个变量的值。</p><ul class="lvl-0"><li class="lvl-2"><p>方法一</p></li></ul><p>借助第三变量存储数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 定义中间变量</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 将a的数据存储到c</span></span><br><span class="line">c = a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 将b的数据20赋值到a，此时a = 20</span></span><br><span class="line">a = b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 将之前c的数据10赋值到b，此时b = 10</span></span><br><span class="line">b = c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>方法二</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">a, b = b, a</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h1 id="六-引用">六. 引用</h1><h2 id="6-1-了解引用">6.1 了解引用</h2><p>在python中，==<strong>值是靠引用来传递来的。</strong>==简单理解，<strong>引用是一个“变量名”。</strong></p><p><strong>我们可以用<code>id()</code>来判断两个变量是否为同一个值的引用。</strong> 我们可以<strong>将id值理解为那块内存的地址标识</strong>。</p><p><mark>id()相当于取变量的内存地址</mark></p><p><mark>Python中无论什么数据类型，数据都是靠引用来传递的</mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. int类型----不可变数据类型----存入的数据不能再次修改了</span></span><br><span class="line"><span class="comment"># 1.不可变： int: 1.1声明变量保存整型数据，把这个数据赋值到另一个变量； id()检测两个变量的id值(内存的十进制)</span></span><br><span class="line">a = <span class="number">1</span> </span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># 140708464157520</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))  <span class="comment"># 140708464157520</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 1,说明int类型为不可变数据类型，当修改int类型a的数据时，a会指向修改后的数据，而原数据1是没有被修改的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为修改a的数据，内存要另外开辟一份内存存储2，id()检测a和b的地址不同</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># 140708464157552，此时得到是的数据2的内存地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))  <span class="comment"># 140708464157520</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表---------可变数据类型----存入的原数据可以修改</span></span><br><span class="line">aa = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">bb = aa</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(aa))  <span class="comment"># 2325297783432</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(bb))  <span class="comment"># 2325297783432</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aa.append(<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(bb)  <span class="comment"># [10, 20, 30], 列表为可变类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(aa))  <span class="comment"># 2325297783432</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(bb))  <span class="comment"># 2325297783432</span></span><br></pre></td></tr></table></figure><h2 id="6-2-引用当做实参">6.2 引用当做实参</h2><p>引用是否可以当作实参传入</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求： 引用是否可以当作实参</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.定义函数：要有形参</span></span><br><span class="line"><span class="string">1.1 访问打印形参看是否有数据</span></span><br><span class="line"><span class="string">1.2 查看形参的id</span></span><br><span class="line"><span class="string">1.3 改变形参的数据，查看这个形参并打印id,看id值是否相同</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.调用函数 --把可变和不可变两种类型依次当作实参传入</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line">    a += a</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># int：---不可变类型---计算前后id值不同</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">test1(b)  <span class="comment"># 表明可以当作实参传入的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表：---可变类型---计算前后id值相同</span></span><br><span class="line">c = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line">test1(c)</span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190220111744493.png" alt="image-20190220111744493"></p><h1 id="七-可变数据类型和不可变数据类型">七. 可变数据类型和不可变数据类型</h1><p>在Python程序中，数据类型可以分为可变数据类型和不可变数据类型。<b><font color=red>所谓可变类型与不可变类型是指：数据能够直接进行修改，如果能直接修改那么就是可变，否则是不可变.</font></b></p><h2 id="7-1具体的区别">7.1具体的区别</h2><ol><li class="lvl-3"><p>不可变数据类型是指<strong>一旦创建就<font color=red>无法更改其值</font>的数据类型。</strong>==Python中的整数int、浮点数float、字符串str、元组tuple等都属于不可变数据类型。==使用赋值语句给不可变数据类型赋值时，会创建一个新的对象，而不是修改原有的对象。</p></li></ol><p>例如，在Python中执行如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 5</span><br><span class="line">b = a</span><br><span class="line">b = b + 1</span><br><span class="line">print(a)  # 输出 5</span><br><span class="line">print(b)  # 输出 6</span><br></pre></td></tr></table></figure><p>可以看到，当给变量<code>b</code>赋值时，实际上是创建了一个新的整数对象<code>6</code>，并将其赋值给变量<code>b</code>，此时变量<code>a</code>仍然指向原来的整数对象<code>5</code>。</p><ol start="2"><li class="lvl-3"><p>可变数据类型则是指<strong>一旦创建后，其值可以被更改的数据类型</strong>。==Python中的列表list、字典dict、集合set等都属于可变数据类型。==对于可变数据类型，使用赋值语句进行操作时，会修改原有的对象。</p></li></ol><p>例如，在Python中执行如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = [1, 2, 3]</span><br><span class="line">b = a</span><br><span class="line">b[0] = 4</span><br><span class="line">print(a)  # 输出 [4, 2, 3]</span><br><span class="line">print(b)  # 输出 [4, 2, 3]</span><br></pre></td></tr></table></figure><p>注意到，当将<code>a</code>赋值给<code>b</code>时，实际上是让<code>b</code>指向了<code>a</code>所指向的列表对象。此时，我们对<code>b</code>进行修改，即修改了原有的列表对象，所以<code>a</code>和<code>b</code>同时发生了变化。</p><p>因此，这就是不可变类型和可变类型之间的一个重要区别，在代码中需要注意其使用方式。</p><ul class="lvl-0"><li class="lvl-2"><p>可变类型</p><ul class="lvl-2"><li class="lvl-4">列表</li><li class="lvl-4">字典</li><li class="lvl-4">集合</li></ul></li><li class="lvl-2"><p>不可变类型</p><ul class="lvl-2"><li class="lvl-4">整型</li><li class="lvl-4">浮点型</li><li class="lvl-4">字符串</li><li class="lvl-4">元组</li></ul></li></ul><h1 id="八-总结">八. 总结</h1><ul class="lvl-0"><li class="lvl-2"><p>变量作用域</p><ul class="lvl-2"><li class="lvl-4">全局：函数体内外都能生效</li><li class="lvl-4">局部：当前函数体内部生效</li></ul></li><li class="lvl-2"><p>函数多返回值写法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> 表达式<span class="number">1</span>, 表达式<span class="number">2.</span>..</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>函数的参数</p><ul class="lvl-2"><li class="lvl-4">位置参数<ul class="lvl-4"><li class="lvl-6">形参和实参的个数和书写顺序必须一致</li></ul></li><li class="lvl-4">关键字参数<ul class="lvl-4"><li class="lvl-6">写法： <code>key=value</code></li><li class="lvl-6">特点：形参和实参的书写顺序可以不一致；关键字参数必须书写在位置参数的后面</li></ul></li><li class="lvl-4">缺省参数<ul class="lvl-4"><li class="lvl-6">缺省参数就是默认参数</li><li class="lvl-6">写法：<code>key=vlaue</code></li></ul></li><li class="lvl-4">不定长位置参数<ul class="lvl-4"><li class="lvl-6">用*args收集所有位置参数，返回一个<strong>元组</strong></li></ul></li><li class="lvl-4">不定长关键字参数<ul class="lvl-4"><li class="lvl-6">用**kwargs收集所有关键字参数，返回一个<strong>字典</strong></li></ul></li></ul></li><li class="lvl-2"><p>引用：Python中，数据的传递都是通过引用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（十二）函数——函数基础</title>
      <link href="/pythonbasic12.html"/>
      <url>/pythonbasic12.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">函数的作用</li><li class="lvl-2">函数的使用步骤</li><li class="lvl-2">函数的参数作用</li><li class="lvl-2">函数的返回值作用</li><li class="lvl-2">函数的说明文档</li><li class="lvl-2">函数嵌套</li></ul><h1 id="函数的作用">函数的作用</h1><p>需求：用户到ATM机取钱：</p><ol><li class="lvl-3"><p>输入密码后显示&quot;选择功能&quot;界面</p></li><li class="lvl-3"><p>查询余额后显示&quot;选择功能&quot;界面</p></li><li class="lvl-3"><p>取2000钱后显示&quot;选择功能&quot;界面</p></li></ol><blockquote><p>特点：显示“选择功能”界面需要重复输出给用户，怎么实现？</p></blockquote><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20181231211912413-6262352.png" alt="image-20181231211912413"></p><p>函数就是将<mark>一段具有独立功能的代码块</mark> 整合到一个整体并命名，在需要的位置<mark>调用这个名称</mark>即可完成对应的需求。</p><blockquote><p>函数在开发过程中，可以更高效的实现<mark>代码重用</mark>。</p></blockquote><h1 id="函数的使用步骤">函数的使用步骤</h1><h2 id="定义函数">定义函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数</span>):</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h2 id="调用函数">调用函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p></blockquote><ol><li class="lvl-4"><p>不同的需求，参数可有可无。</p></li><li class="lvl-4"><p>在Python中，函数必须<mark>先定义后调用</mark>。</p></li></ol><h2 id="示例">示例</h2><p>需求：复现ATM取钱功能。</p><h3 id="视频写的">视频写的</h3><ol><li class="lvl-3"><p>搭建整体框架(复现需求)</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;密码正确登录成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示&quot;选择功能&quot;界面</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;查询余额完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示&quot;选择功能&quot;界面</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;取了2000元钱&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示&quot;选择功能&quot;界面</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>确定“选择功能”界面内容</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;查询余额&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;存款&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;取款&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>封装&quot;选择功能&quot;</p></li></ol><blockquote><p>注意：一定是先定义函数，后调用函数。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 封装ATM机功能选项 -- 定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----请选择功能-----&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;查询余额&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;存款&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;取款&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----请选择功能-----&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>调用函数</p></li></ol><p>在需要显示“选择功能”函数的位置调用函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;密码正确登录成功&#x27;</span>)</span><br><span class="line"><span class="comment"># 显示&quot;选择功能&quot;界面 -- 调用函数</span></span><br><span class="line">select_func()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;查询余额完毕&#x27;</span>)</span><br><span class="line"><span class="comment"># 显示&quot;选择功能&quot;界面 -- 调用函数</span></span><br><span class="line">select_func()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;取了2000元钱&#x27;</span>)</span><br><span class="line"><span class="comment"># 显示&quot;选择功能&quot;界面 -- 调用函数</span></span><br><span class="line">select_func()</span><br></pre></td></tr></table></figure><h3 id="自己写的">自己写的</h3><p><mark>自定义函数必须先定义，再调用</mark></p><p><mark>函数名只能小写</mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 函数只能先定义再调用</span></span><br><span class="line"><span class="comment"># 搭建整体框架</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入密码登录成功后显示功能</span></span><br><span class="line"><span class="string">查询余额后显示功能</span></span><br><span class="line"><span class="string">取完钱后显示功能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定选择功能界面:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">selects_fun</span>(<span class="params">j</span>):</span><br><span class="line"><span class="keyword">if</span> j == <span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;查询余额，余额XXX元人民币整&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> j == <span class="number">2</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;取款XXX元人民币整&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> j == <span class="number">3</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;存款XXX元人民币整&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> j == <span class="number">4</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;完成操作，ATM机即将退出银行卡！&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> j &lt; <span class="number">4</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----请选择功能-----&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1-查询余额&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2-存款&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3-取款&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;4-退卡&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----请选择功能-----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nextroots_fun</span>(<span class="params">number</span>):</span><br><span class="line"><span class="keyword">match</span> number:  <span class="comment"># 使用match...case语句只能在Python3.10版本及以上版本才能运行</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:  <span class="comment"># 显示功能界面: 显示余额</span></span><br><span class="line">selects_fun(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 显示功能界面: 显示余额</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:  <span class="comment"># 显示功能界面: 取款</span></span><br><span class="line">selects_fun(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:  <span class="comment"># 显示功能界面: 存款</span></span><br><span class="line">selects_fun(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:  <span class="comment"># 显示功能界面: 退卡</span></span><br><span class="line">selects_fun(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">case</span> _:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对不起，该功能暂未开发，请重新选择！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">password_dly = <span class="number">792638</span>  <span class="comment"># 提前内置密码</span></span><br><span class="line"><span class="comment"># print(type(password_dly))  # int类型</span></span><br><span class="line"><span class="keyword">while</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">password = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入6位银行卡密码:&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> password == password_dly:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;恭喜您登录成功&#x27;</span>)</span><br><span class="line"><span class="comment"># 显示功能界面: 显示余额 存款 取款</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----请选择功能-----&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1-查询余额&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2-存款&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3-取款&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;4-退卡&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----请选择功能-----&#x27;</span>)</span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请选择您的下一步:&quot;</span>))</span><br><span class="line">nextroots_fun(n)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">4</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;注意:请及时取出银行卡,妥善保存！&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="number">2</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密码输入错误，请重新输入&quot;</span>)</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密码输入错误超过三次，卡被ATM机吞入，&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请联系银行工作人员，凭本人有效证件领取银行卡！！！&quot;</span><span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>结论：</p><blockquote><p>1.函数先定义后调用， 若先调用会报错<br>2.如果没有调用函数，函数里面的代码不会执行<br>3.函数执行流程当调用函数的时候，解释器会回到定义函数的地方去执行函数内部的代码，代码执行完成之后，继续执行向下执行定义函数的时候，函数体内部缩进的代码并没有执行</p></blockquote><h1 id="函数的参数作用">函数的参数作用</h1><p>思考：完成需求如下：一个函数完成两个数1和2的加法运算，如何书写程序？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_num1</span>():</span><br><span class="line">    result = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">add_num1()</span><br><span class="line"></span><br><span class="line"><span class="comment">#自己写的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_nums</span>(<span class="params">i, j</span>):</span><br><span class="line">ret = i + j</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add_nums(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>思考：上述add_num1函数只能完成数字1和2的加法运算，如果想要这个函数变得更灵活，可以计算任何用户指定的两个数字的和，如何书写程序？</p><p>分析：用户要在调用函数的时候指定具体数字，那么在定义函数的时候就需要接收用户指定的数字。<strong>函数调用时候指定的数字和定义函数时候接收的数字即是函数的参数。</strong></p><p><strong>定义函数的参数—形参，不可变</strong></p><p><strong>调用函数的参数—实参，可变</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义函数时同时定义了接收用户数据的参数a和b，a和b是形参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_num2</span>(<span class="params">a, b</span>):</span><br><span class="line">    resu lt = a + b</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数时传入了真实的数据10 和 20，真实数据为实参</span></span><br><span class="line">add_num2(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己写的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_nums</span>(<span class="params">i, j</span>):</span><br><span class="line">ret = i + j</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add_nums(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><h1 id="函数的返回值return作用">函数的返回值return作用</h1><p>例如：我们去超市购物，比如买烟，给钱之后，是不是售货员会返回给我们烟这个商品，在函数中，<strong>如果需要返回结果给用户需要使用函数返回值</strong>return。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">buy</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;烟&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用变量保存函数返回值</span></span><br><span class="line">goods = buy()</span><br><span class="line"><span class="built_in">print</span>(goods)</span><br></pre></td></tr></table></figure><p><mark>return作用：</mark></p><blockquote><p>1.负责函数返回值</p><p>2.退出当前函数体，导致<strong>函数体内部的return下方所有代码不被执行</strong></p></blockquote><h2 id="应用"><strong>应用</strong></h2><p>需求：制作一个计算器，计算任意两数字之和，并·保存结果。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_num</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用result变量保存函数返回值</span></span><br><span class="line">result = sum_num(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h1 id="函数的说明文档">函数的说明文档</h1><p>思考：定义一个函数后，程序员如何书写程序能够快速提示这个函数的作用？</p><p>答：<strong>注释</strong></p><p>思考：如果代码多，我们是不是需要在很多代码中找到这个函数定义的位置才能看到注释？如果想更方便的查看函数的作用怎么办？</p><p>答：函数的说明文档</p><blockquote><p>函数的说明文档也叫函数的文档说明。</p></blockquote><h2 id="语法">语法</h2><ul class="lvl-0"><li class="lvl-2"><p>定义函数的说明文档</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 说明文档的位置 &quot;&quot;&quot;</span></span><br><span class="line">    代码</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看函数的说明文档</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(函数名)</span><br></pre></td></tr></table></figure><h2 id="快速体验">快速体验</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_num</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 求和函数 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>(sum_num)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190219112749727.png" alt="image-20190219112749727"></p><p>**注：**在自定义函数内部第一行加三对双引号，在引号内部加说明</p><h1 id="函数嵌套调用">函数嵌套调用</h1><p>所谓函数嵌套调用指的是<mark>一个函数里面又调用了另外一个函数</mark>。</p><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testB</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testB start----&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这里是testB函数执行的代码...(省略)...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testB end----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testA start----&#x27;</span>)</span><br><span class="line">     <span class="comment"># 嵌套调用函数B</span></span><br><span class="line">    testB()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testA end----&#x27;</span>)</span><br><span class="line"></span><br><span class="line">testA()</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190219113648783.png" alt="image-20190219113648783"></p><ul class="lvl-0"><li class="lvl-2"><p>执行流程</p></li></ul><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/1.png" alt="image-20190219113648783"></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>如果函数A中，调用了另外一个函数B，那么先把函数B中的任务都执行完毕之后才会回到上次 函数A执行的位置。</p></li></ul></blockquote><h1 id="函数应用">函数应用</h1><h2 id="打印图形">打印图形</h2><ol><li class="lvl-3"><p>打印一条横线</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_line</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_line()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190219155107988.png" alt="image-20190219155107988"></p><ol start="2"><li class="lvl-3"><p>打印多条横线</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_line</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_lines</span>(<span class="params">num</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; num:</span><br><span class="line">        print_line()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_lines(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己写的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_line</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;--&quot;</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">line_num</span>(<span class="params">number</span>):</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, number): <span class="comment"># i &lt; number</span></span><br><span class="line">print_line()</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">line_num(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;打印行数:&#x27;</span>)))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190219155040124.png" alt="image-20190219155040124"></p><h2 id="函数计算">函数计算</h2><ol><li class="lvl-3"><p>求三个数之和</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_num</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = sum_num(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>求三个数平均值</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">average_num</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    sumResult = sum_num(a, b, c)</span><br><span class="line">    <span class="keyword">return</span> sumResult / <span class="number">3</span></span><br><span class="line"></span><br><span class="line">result = average_num(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 2.0 #以整数形式打印 print(&#x27;%2d&#x27; % average_num(1, 2, 3))</span></span><br></pre></td></tr></table></figure><h1 id="总结">总结</h1><ul class="lvl-0"><li class="lvl-2"><p>函数的作用：封装代码，高效的代码重用</p></li><li class="lvl-2"><p>函数使用步骤</p><ul class="lvl-2"><li class="lvl-4">定义函数</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4"><p>调用函数</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数名()</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>函数的参数：函数调用的时候可以传入真实数据，增大函数的使用的灵活性</p><ul class="lvl-2"><li class="lvl-4"><strong>形参：函数定义时书写的参数(非真实数据)</strong></li><li class="lvl-4"><strong>实参：函数调用时书写的参数(真实数据)</strong></li></ul></li><li class="lvl-2"><p>函数的返回值</p><ul class="lvl-2"><li class="lvl-4">作用：函数调用后，返回需要的计算结果</li><li class="lvl-4">写法</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> 表达式</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>函数的说明文档</p><ul class="lvl-2"><li class="lvl-4">作用：保存函数解释说明的信息</li><li class="lvl-4">写法</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 函数说明文档 &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>函数嵌套调用：一个函数内部嵌套调用另外一个函数</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读笔记（一）：双向梯形夹芯板对压成形的数值模拟研究</title>
      <link href="/LiteratureReadingNotes1.html"/>
      <url>/LiteratureReadingNotes1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第1章-绪论">第1章 绪论</h1><h2 id="1-1-研究背景">1.1 研究背景</h2><h3 id="1-1-1-夹芯板构成">1.1.1 夹芯板构成</h3><p>夹芯板由上、下两块高强度面板及在垂直于面板方向有足够刚度的较厚、轻质的芯材组成，采用一定的成型工艺使三者组合在一起。即<strong>面板+芯层结构+面板</strong></p><p>由于夹芯板结构的具体形式以及面板、芯材材料的多样性，可以通过合理的搭配组合来有效地提高材料利用率。</p><h4 id="面板材料">面板材料</h4><p>面板材料通常可以选择钢板、铝板、硬质料板、胶合板、纸板、复合材料层合板甚至混泥土板等</p><h4 id="芯层材料">芯层材料</h4><p>芯层材料根据实际需要可分为软夹芯和硬夹芯，其中，</p><p>软夹芯可以是泡沫塑料如泡沫铝、高分子合成泡沫、铝箔、玻璃纤维强塑料、碳纤维布等，</p><p>硬夹芯包括金属丝编织物、陶瓷、橡胶阻尼材料、轻质木材等[^4-6]。</p><h3 id="1-1-2-常见夹芯结构">1.1.2 常见夹芯结构</h3><p>如果按照夹层结构芯层的材料分，常见的夹芯结构可以大致分为三类：泡沫铝夹芯夹层板、金属型材夹芯夹层板和聚合物泡沫夹芯夹层板。</p><h4 id="泡沫铝夹芯夹层板">泡沫铝夹芯夹层板</h4><p>泡沫铝夹芯夹层板的<strong>夹芯层材料选用具有优异吸声、吸能、减震、抗冲击的泡沫铝，上、下面板通常采用具有一定强度的不锈钢板、铝合金板等材料</strong>,这样可以弥补泡沫铝多孔结构导致强度比较低的缺陷。</p><p>为了提高夹芯结构整体刚度和强度，有的泡沫铝芯层板往往在内部植入加强筋[^7,8]。聚合物泡沫也是夹芯板的常见芯材之一，具有质量轻、比强度高、抗疲劳性能好、抗冲击吸 能强、绝热、隔音、减震等一系列优异性能。</p><h4 id="型材夹心板">型材夹心板</h4><p>夹芯板的芯材除了泡沫铝和聚合物，型材也是主要芯材之一，根据型材的具体形式不同，<strong>型材夹芯板主要分为蜂窝夹芯板和异型夹芯板两种。</strong></p><p><strong>蜂窝夹芯板</strong></p><p>金属蜂窝夹芯板[^9-14]的成型工艺是将预先制备好的铝蜂窝芯和上、下面板进行胶结或者焊合。</p><p>使用焊接法制造的焊接蜂窝板的力能性能院高于同规格的胶粘蜂窝板，被越来越多地应用于航空、航天、交 通运输、军事领域。</p><p><strong>异型夹芯板</strong></p><p>异型夹芯板也可以称为点阵夹芯板，主要有 V 型、X 型、梯形、O 型、Z 型、I 型等，几种夹芯结构如图 1.1 所示。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Science+/%E5%B0%8F%E8%AE%BA%E6%96%87/image-20230526100151493.png" alt="^image-20230526100151493"></p><p><strong>波纹夹芯板也属于异型夹芯板的一种</strong>，上下面板通常使用不锈钢、高强钢、低碳钢、铝合金等金属材料，夹芯采用各种形状的波纹形板或型材板，按具体形式的不同可 以主要分为以下三类：曲线类波纹夹芯板、折线类波纹夹芯板和型材类夹芯板，如图 1.2 所示。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Science+/read_note/image-20230526100518206.png" alt="^image-20230526100518206"></p><p>波纹夹芯板有许多显著的优点，<strong>如能够减小零件的质量进而提高比强度和比刚度来实现轻量化、降噪减震、改善抗撞击性、低畸变无需校准、内部防腐蚀、增强热绝缘性和防火安全性以及可通过精确预制标准件便于快速组装以降低制造成本等</strong>，这些优点使 其得以广泛地应用，同时获得比较明显的经济效益<sup id="fnref:15"><a href="#fn:15" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">15</span></a></sup>。</p><h3 id="1-1-3-本文研究对象">1.1.3 本文研究对象</h3><p>本文研究的<strong>双向梯形夹芯板</strong>是波纹夹芯板的衍生出来的一种结构形式，夹芯是带有梯形凸台、凹坑的铝板，通过模具冲压而成，然后与上下铝板通过钎焊焊接在一起。与 传统的蜂窝板不同，该芯层结构是由整块铝合金板加工而成，芯板内部不会存在由粘接或焊接造成的缺陷。与传统的波纹板相比，在正交两个方向上都具有一定的抗弯刚度， 使其获得更好的抵抗不同方向变形的承载性能。</p><h2 id="1-2-夹芯板的特点及应用">1.2 夹芯板的特点及应用</h2><h3 id="1-2-1-夹芯板的特点">1.2.1 夹芯板的特点</h3><p>夹芯板具有许多传统常规材料所不具备的特点，总结起来主要有以下几点：</p><p>（1）密度小、质量轻、刚度大</p><blockquote><p>夹芯板的芯层结构多为空洞，实体部分截面积很小，使它的密度相比于钢板、铝板等普通板材来说要小的多，所以夹芯板的质量很轻。<strong>夹芯部分厚且轻，将上下面板分离使其两者之间的距离变大，并且与两个面板用一定的工艺连接在一起成为一个整体，其结构特性类似于工字梁，上面板相当于工字梁翼缘，夹芯相当于工字梁腹板。中间夹芯层的高度远大于上、下面板的厚度，这样使得上下面板被架高而远离原来中心轴，由惯性矩公式可知横截面惯性矩被放大很多倍，同时夹芯层也具有一定的刚度，可以支撑面板不易发生失稳，使得这种结构在面板很薄的情况下同样具有很大的刚度，从而达到了轻量化的效果，这就是“三明治”刚度效应。</strong></p></blockquote><p>（2）隔（吸）热性好、减振能力强</p><blockquote><p>夹层结构与一般的防护材料相比，在有效地抵制爆炸时的强烈冲击的同时也隔绝了巨大的热量，此外还避免了刚体位移过大导致的非强度破坏，体现了很好的隔热性和减振性。蜂窝板中的夹芯结构互不相通，空气被完全封闭而不能流动，可以达到阻碍热量和声波传递的目的，因此蜂窝板具有很好的隔音隔热性。 此外，夹层材料有多种选择，可供选择的材料包括金属材料和非金属材料，金属材料有碳纤维、玻璃纤维、芳纶纤维等复合材料<sup id="fnref:16"><a href="#fn:16" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">16</span></a></sup>，金属材料有铝合金、钛合金、不锈钢等。高分子化合物因其良好的比强度高性能被越来越多地用于作为夹层结构的材料。面板材料通常可以选择钢板、铝板、硬质料板、胶合板、纸板、复合材料层合板甚至混泥 土板等。通过合理搭配上下面板材料和夹芯材料可以制作不同的夹层结构，进而发挥出 不同场合不同领域所需要实现的不同功能。</p></blockquote><h3 id="1-2-2-夹芯板的应用">1.2.2 夹芯板的应用</h3><p>夹层结构最早主要应用于航空领域<sup id="fnref:17"><a href="#fn:17" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">17</span></a></sup>，并在 1969 年美国宇宙飞船登上月球的过程 中发挥了关键作用。从 20 世纪 60 年代开始，夹层技术逐渐地应用在其他的领域，如飞机、卫星、航天飞行器、轨道车辆、船舶和建筑等，从而进入了夹层结构多元化应用的 时代。目前，夹层结构主要应用在以下几个方面：</p><p>（1）飞机</p><p>飞机结构设计的一大原则就是在满足强度要求的前提下保证结构尽可能轻、薄[^18-20]。为了达到轻量化的目的，具有高比刚度的夹层结构显然是有效的选择。蜂窝夹层结构在机翼前缘方向舵，后缘壁板、尾翼壁板、直升机的旋翼、发动机罩、发动 机舱门、发动机整流罩等结构中有夹层结构的大量应用<sup id="fnref:21"><a href="#fn:21" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">21</span></a></sup>。</p><p>（2）卫星和航天运载飞行器</p><p>由于夹层结构的诸多优点，使其得以广泛地应用于国内外卫星上的抛物面天线、太 阳能电池帆板、仪器安装板和各种载荷舱等主要构件。</p><p>卫星上经常使用的一种夹层板是由以碳纤维复合材料作为面板与蜂窝夹芯组合的，然后再经过后期的优化设计使其膨胀系数降为零，这样即使在温差较大的环境中其形状位置也不会发生较大的变化。卫星的主体结构主要都采用了这种碳纤维复合材料的夹芯板，它不仅可以有效地抵抗温差，还 有很高的比强度和比刚度，在保持较小的重量情况下可以有效地承载各种的载荷。</p><p>法国通讯一号卫星上使用的是蜂窝夹芯板，在夹芯层中填充了泡沫材料后使其具有了减振和 吸收冲击波的功能，在这个卫星的信号反射器上还将这种夹芯板做成了抛物面使其得以 更好地发挥优势作用。</p><p>（3）轨道车辆、船舶</p><p>国内最早将夹层结构应用在铁路客车上要追溯到长春客车厂生产的第一批北京地铁客车，车门门板使用的就是蜂窝铝板<sup id="fnref:23"><a href="#fn:23" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">23</span></a></sup>，随后生产的25A型客车上也出现了这种蜂窝结构，并成功开发了制造这种结构的成型工艺和相应的大幅面热压机<sup id="fnref:24"><a href="#fn:24" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">24</span></a></sup>。</p><p>夹层结构在汽车上也有较多的应用，常常出现在车身外蒙皮、车身结构、车架结构、保险杠、座椅、车门等结构中，很好的起到了减轻车体重量的作用。例如，将纸蜂窝芯和上下以防锈钢板为面板用一定工艺制成的蜂窝板，用在汽车地板和车顶衬里，会表现出较好的吸声性能<sup id="fnref:25"><a href="#fn:25" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">25</span></a></sup>。</p><p>夹层结构开始在各种轮船的承载部位上有了用武之地，如船体甲板、船壳等结构。据统计显示，夹层结构的结构件和非结构件分别比传统材料（木材、金属等）制造的构件轻50%和75%以上，可见夹层结构在减轻船体重量实现轻量化方面起到了不可替代的作用，节约的资源不可估量<sup id="fnref:26"><a href="#fn:26" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">26</span></a></sup>。</p><p>（4）建筑</p><p>不同的夹芯材料和结构与不同的面板材料可搭配组合成多种芯层结构，能够满足不同的建筑需要，如工业厂房、公共建筑、组合房屋、净化工程等多个建筑领域<sup id="fnref:27"><a href="#fn:27" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">27</span></a></sup>。泡沫夹芯结构和蜂窝夹芯结构都具有质量轻、隔热隔音、较好的保温性能等优点，应用在屋面或墙体维护结构上都可以大幅度地减轻建筑物的自重，并且有较好的承载能力，外观精美，同时地震时也可减轻人员伤亡和经济损失。国内也开始逐渐使用蜂窝铝板和纸蜂窝板等材料，如东方明珠电视塔、上海虹桥机场候机楼墙等著名建筑的幕墙都采用了蜂窝铝幕墙[^28-29]。图1.10为夹层结构在建筑幕墙上的应用情况。</p><h2 id="1-3-夹芯板的研究现状">1.3 夹芯板的研究现状</h2><h3 id="1-3-1-夹芯板理论研究">1.3.1 夹芯板理论研究</h3><p>目前关于夹芯板的力学分析模型主要有三种，包括单层板壳模型、三维实体模型、三层板模型<sup id="fnref:30"><a href="#fn:30" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">30</span></a></sup></p><p><strong>单层板壳模型</strong></p><p>单层板壳模型是将夹芯板等效成单层板，并具有一定的厚度，只能运用中厚板理论进行分析，这种模型通常使用两种等效模型，即静态等效模型和动态等效模型。Q.H.Cheng<sup id="fnref:31"><a href="#fn:31" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">31</span></a></sup>运用静态等效理论将夹芯板看作一块普通的各向同性板，进而得出了关于波纹夹芯板的等效弹性模量的计算方法；T.S.Lok<sup id="fnref:32"><a href="#fn:32" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">32</span></a></sup>采用动态等效理论将夹芯板看作尺寸和刚度都不变的正交各向异性板，对夹层结构的动态响应问题进行了相关的研究。但这种模型将夹芯板等效为整体的一块板，精度必然大大降低。</p><p><strong>三维实体模型</strong></p><p>三维实体模型是基于均匀性和连续性的假设，运用三维弹性理论来研究夹芯板。基于这种理论，Noor<sup id="fnref:33"><a href="#fn:33" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">33</span></a></sup>研究了夹芯板的屈曲与振动问题，Burton<sup id="fnref:34"><a href="#fn:34" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">34</span></a></sup>则对夹层圆柱壳在静力热载荷下的振动问题进行了详细的研究。但这种模型的计算过程非常复杂，实用性不强。</p><p><strong>三层板模型</strong></p><p>前两种模型的缺点在一定程度上都限制了其广泛的应用，而三层模型恰恰弥补了它们的缺点，该理论是将夹芯板等效成上下面板和中间夹芯三层，当面板为层合板时则分为多层，目前此理论被应用于大多数的夹层结构分析中。</p><p><strong>线性理论和非线性理论</strong></p><p>学者们通过组合各种假设产生了多种理论，具体可以分为线性理论和非线性理论。</p><p>相比于非线性理论，线性理论（一阶剪切理论）的位移模式和力学分析过程都比较简单，精度也比较高，使其得以广泛地应用。这些理论主要有：Reissner理论<sup id="fnref:35"><a href="#fn:35" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">35</span></a></sup>、Hoff理论<sup id="fnref:36"><a href="#fn:36" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">36</span></a></sup>、普鲁卡克夫—杜庆华理论<sup id="fnref:37"><a href="#fn:37" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">37</span></a></sup>。自上世纪四五十年代起，研究学者们在这些理论的基础上对夹层板的力学分析做了大量的相关研究，这其中具有代表性的有中科院北京力学研究所关于夹层板的弯曲稳定和振动的研究<sup id="fnref:38"><a href="#fn:38" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">38</span></a></sup>，综合考虑各种主要因素，提出了各种力学因素的作用，使用不同的方程参数，理论上解释其相互关系，为以后研究人员合理的选择简化方程提供了思路；另外，<strong>胡海昌院士在复变函数理论的基础上，简化了弯曲基本方程，用两个新的函数来表示方程中的函数，很大程度地简化了求解过程，完美解决了夹芯板的反对称小挠度的一些难题<sup id="fnref:39"><a href="#fn:39" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">39</span></a></sup>。</strong></p><p>此外，国内外还有大批学者在以上三种经典的线性理论基础上，加以修正或运用不同的数学方法，对夹芯板的力学分析问题进行了相关了研究工作。<strong>马超、邓宗白等人在2011年修正了Reissner理论，在原有理论方程的基础上增加了夹芯的刚度项，并将夹芯层的面内应力和弯曲刚度考虑在内，使用同样的解耦方法得到了挠度和转角的表达式</strong><sup id="fnref:40"><a href="#fn:40" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">40</span></a></sup>。<strong>李东华在2012年基于Reissner理论，对夹芯层为功能梯度材料的夹芯板在均匀载荷作用下的弯曲问题进行了相关研究，推导出了平衡方程并用三角级数展开法实现了方程的求解</strong><sup id="fnref:41"><a href="#fn:41" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">41</span></a></sup>。<strong>D.A.Maturi在2014年研究了夹芯板的静力学和自由振动问题，运用了新的分层理论加以分析，其中每层都使用了独立的自由度，这种思想也有一定的借鉴意义</strong><sup id="fnref:42"><a href="#fn:42" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">42</span></a></sup>。</p><h3 id="1-3-2-夹芯板的力学性能研究">1.3.2 夹芯板的力学性能研究</h3><p>对于金属夹芯板的研究大多集中于蜂窝板和波纹板，蜂窝板的应用较广泛，研究也相对成熟，在蜂窝板的力学性能研究方面根据不同的受力方式可分为平压、侧压、三点弯曲及其他力学性能。</p><p>（1）平压性能</p><blockquote><p>对蜂窝板结构静态压缩过程变形失稳和破坏现象的研究最早是由Gibson等人<sup id="fnref:43"><a href="#fn:43" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">43</span></a></sup>完成的，提出了蜂窝板的两种失稳机制，即弹性屈曲和结构塑性崩塌，并得到了两种失稳和破坏的宏观极限应力。McFVarland<sup id="fnref:44"><a href="#fn:44" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">44</span></a></sup>和Wierzbicki<sup id="fnref:45"><a href="#fn:45" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">45</span></a></sup>对由塑性屈曲造成的六边形蜂窝结构轴向坍塌现象进行了相关研究，发现了孔壁会按波长渐进地折叠，此波长约为孔壁边长，并得出了可匹配的塌陷模式，得出塑性屈曲应力的估算式。王飞等<sup id="fnref:46"><a href="#fn:46" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">46</span></a></sup>采用数值模拟的方法系统地分析了结构失稳和破坏的三种特征以及相应的力学机制，得出的结论是导致结构失稳或破坏的直接原因是结构变形分岔。付应海<sup id="fnref:47"><a href="#fn:47" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">47</span></a></sup>基于实验研究了芯子开槽后蜂窝板的平压强度变化情况，得出其压缩特性曲线。孙亚平等人<sup id="fnref:48"><a href="#fn:48" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">48</span></a></sup>基于薄板大挠度理论对具有正交各向异性、孔壁有初始变形的纸蜂窝结构在面外压力作用下表现出来的破坏形式进行了相关的研究，得出了纸蜂窝结构的面外载荷理论模型，并得到了相关的临界载荷计算公式，更进一步地分析了蜂窝板的各个结构参数对面外承载能力的影响。</p></blockquote><p>（2）侧压性能</p><blockquote><p>计宏伟等人<sup id="fnref:49"><a href="#fn:49" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">49</span></a></sup>通过蜂窝板的侧压强度试验方法系统地分析了温度、湿度、加载速度等主要因素对侧压强度的影响，得出的结论是：蜂窝板的侧压强度随着温度的升高先增大后减小，临界温度为50度；相对湿度对侧压强度的影响是负面的；而蜂窝板的侧压强度会随着加载速度的增大而增大。邵文全等人<sup id="fnref:50"><a href="#fn:50" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">50</span></a></sup>研究了含有脱硫缺陷的蜂窝纸板的侧压强度以及在侧压载荷下的变形特征及破坏形式，得出了侧压强度的实验测量结果和脱硫缺陷对其所造成的影响。中科院北京力学研究所<sup id="fnref:51"><a href="#fn:51" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">51</span></a></sup>对四边简支的正交各向异性的蜂窝板在受到纵向均匀压力时表现出的稳定性进行了详细的研究工作。周祝林<sup id="fnref:52"><a href="#fn:52" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">52</span></a></sup>通过胶粘蜂窝板的侧压实验得出了其六种破坏形式，并分别得出了纵向承载能力理论计算公式。</p></blockquote><p>（3）三点弯曲性能</p><blockquote><p>主要通过数值模拟和实验两个方面来研究蜂窝板的三点弯曲性能。KelseyS等人<sup id="fnref:53"><a href="#fn:53" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">53</span></a></sup>研究了蜂窝芯的等效刚度，通过位移法和力法得出了蜂窝夹芯的面外等效剪切模量的上下极限值。祝涛等人<sup id="fnref:54"><a href="#fn:54" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">54</span></a></sup>修正了Gibson公式，得到了蜂窝板面内载荷对壁板弯曲的影响，给出了蜂窝芯层非线性等效拉伸弹性模量的拟合方法。王萍萍等人<sup id="fnref:55"><a href="#fn:55" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">55</span></a></sup>基于薄板弯曲理论计算出单蜂窝等效弹性模量。KapilM等人<sup id="fnref:56"><a href="#fn:56" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">56</span></a></sup>对泡沫铝夹层板在弯曲载荷作用下进行了数值模拟研究，得出了其主要的破坏模式。彭明军等人<sup id="fnref:57"><a href="#fn:57" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">57</span></a></sup>通过数值模拟分析了蜂窝芯两个方向的边长和壁厚对蜂窝板在三点弯曲载荷下疲劳强度的影响。<strong>Zou等人<sup id="fnref:58"><a href="#fn:58" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">58</span></a></sup>使用有限元软件对蜂窝板的三点弯曲过程进行了数值模拟仿真，发现了夹芯板与等效板之间应力状态的差别</strong>。Jeom等人<sup id="fnref:59"><a href="#fn:59" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">59</span></a></sup>对铝蜂窝板的三点弯曲过程进行了实验研究，发现壁厚的增加可以推迟塑性变形的发生，增大了破坏强度。Onck等人<sup id="fnref:60"><a href="#fn:60" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">60</span></a></sup>通过三点弯曲实验得到了蜂窝板在受单向压力载荷时芯层的高度与破坏形式之间的关系。</p></blockquote><p>（4）其他力学性能</p><blockquote><p>蜂窝板的其他力学性能的研究主要集中在蜂窝结构的冲击性能。从1998年之后的数年间，程小全、寇长河等人<sup id="fnref:61"><a href="#fn:61" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">61</span></a></sup>对蜂窝板受低速冲击做了大量的研究，全面地研究了蜂窝板的损伤情况，研究结果表明，内部损伤大于外部损伤，上面板的各界面出现了分层现象并伴随着局部开裂；蜂窝芯的主要破坏形式是壁板皱曲，损伤面积要比面板大两倍左右。**卢文浩等人<sup id="fnref:62"><a href="#fn:62" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">62</span></a></sup>基于对单个蜂窝单元进行的理论分析，用有限元软件模拟了蜂窝结构在受到冲击载荷下的变形情况，结果发现变形模式较为稳定，可以吸收大量的能量，很好的起到了缓冲吸能的作用。**Zhao和Gary<sup id="fnref:63"><a href="#fn:63" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="">63</span></a></sup>对蜂窝结构在动态冲击下的变形情况进行了实验研究，得出载荷速率对面板的破坏模式影响很大，对面内的破坏行为却没有影响。</p></blockquote><h2 id="1-4-选题意义和主要研究内容">1.4 选题意义和主要研究内容</h2><h3 id="1-4-1-选题意义">1.4.1 选题意义</h3><p>但是目前国内外关于夹芯板的研究主要集中在力学性能和小挠度变形方面， 如平压性能、侧压性能、三点弯曲性能、吸能性能的研究等，而对夹芯板成形方面的研究工作较少。因此，<strong>本文以双向梯形夹芯板为对象，着重研究其成形特点以及改变各截面参数对成形结果的影响，这一工作对夹芯板曲面结构件的生产和优化设计有一定的指 导意义。</strong></p><h3 id="1-4-2-研究内容">1.4.2 研究内容</h3><p>本文主要的研究内容包括以下几个部分：</p><p>（1）基于修正 Reissner 夹芯板理论的假设分析了双向梯形夹芯板的弯曲问题，得出了刚度常数和弹性常数之间的关系；采用有限元分析法对夹芯进行等效分析，得到了夹芯的等效弹性常数。 （2）<strong>利用有限元软件 ABAQUS 中 Explicit 模块对双向梯形夹芯板的对压成形过程建立有限元模型</strong>，以夹芯板柱面、球面这两种典型几何形状的成形件为研究对象，探究成形过程中可能出现的缺陷，并分析总结出相应的成形特点。</p><p>（3）以夹芯板柱面为研究对象，对双向梯形夹芯板的对压成形过程进行数值模拟，探讨上面板厚度、下面板厚度、夹芯板厚度、焊接区尺寸等截面参数对双向梯形夹芯板成形性能的影响。</p><p>（4）以多点成形方法作为成形手段，在多点成形压力机上进行对压实验，成形出柱面、球面件，并运用三维扫描仪 PRO CMM 对成形件进行测量，然后通过后处理软件对试验件进行分析，验证数值模拟的准确性。</p><h1 id="第-3-章-双向梯形夹芯板的成形数值模拟研究">第 3 章 双向梯形夹芯板的成形数值模拟研究</h1><p>本章将使用有限元软件 ABAQUS 对双向梯形夹芯板的对压成形过程进行数值模拟，以柱面和球面为研究对象，分析双向梯形夹芯板成形单曲度曲面和双曲度曲面时的成形特点与规律。</p><h2 id="3-1-有限元模型的建立">3.1 有限元模型的建立</h2><p><strong>多点成形技术</strong>：多点成形是金属板材三维曲面成形的一种柔性加工方法，原理是将整体模具离散化，由一系列有序布置、高度可调的基本体（或称冲头）组成柔性模具代替传统冲压成形的整体模具[^68-71]。通过计算机可以单独调节每个基本体的高度从而形成不同的包络面，最终实现对不同形状的三维曲面 件的柔性成形。</p><p><strong>以柱面、球面这两种典型几何形状的曲面为研究对象</strong>，利用有限元软件 ABAQUS 中 Explicit 模块对双向梯形夹芯板在无压边条件下多点成形单曲度曲面和双曲度曲面的过程建立有限元模型，研究成形过程中可能出现的缺陷，并分析总结出相应的成形特点与规律。</p>]]></content>
      
      
      <categories>
          
          <category> 文献阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文献笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（十一）数据序列——推导式</title>
      <link href="/pythonbasic11.html"/>
      <url>/pythonbasic11.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2"><p>列表推导式</p></li><li class="lvl-2"><p>字典推导式</p></li><li class="lvl-2"><p>集合推导式</p><p>推导式是用来从一个序列（例如列表、元组或集合）中快速生成另一个序列。</p><p>推导式可简化代码抒写。</p></li></ul><h1 id="列表推导式">列表推导式</h1><p>作用：用一个表达式<mark>创建一个有规律的列表</mark>或<mark>控制一个有规律列表</mark>。</p><p>列表推导式又叫列表生成式。</p><h2 id="示例">示例</h2><p>需求：创建一个0-10的列表。</p><ul class="lvl-0"><li class="lvl-2"><p>while循环实现</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.准备一个空列表</span></span><br><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.书写循环，依次追加数字到空列表list1中</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    list1.append(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>for循环实现</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    list1.append(i)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><mark>列表推导式实现</mark></p><p><font color=red><code>列表推导式语法结构-- [返回对象 for 临时变量i in 序列]</code></font></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h2 id="带if的列表推导式">带if的列表推导式</h2><p>需求：创建0-10的偶数列表</p><ul class="lvl-0"><li class="lvl-2"><p>方法一：range()步长实现</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>方法二：if实现</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="多个for循环实现列表推导式">多个for循环实现列表推导式</h3><p>需求：创建列表如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>代码如下：</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><blockquote><p>range(开始，结束)，不会遍历到结束</p></blockquote><h1 id="字典推导式">字典推导式</h1><p>思考：如果有如下两个列表：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;man&#x27;</span>]</span><br></pre></td></tr></table></figure><p>如何快速合并为一个字典？</p><p>答：字典推导式</p><p>字典推导式作用：快速合并列表为字典或提取字典中目标数据。</p><h2 id="示例-2">示例</h2><ol><li class="lvl-3"><p>创建一个字典：字典key是1-5数字，value是这个数字的2次方。</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dict1 = &#123;k: v for i in range(1,5)</span></span><br><span class="line">dict1 = &#123;i: i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># &#123;1: 1, 2: 4, 3: 9, 4: 16&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>将两个列表合并为一个字典</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表数据个数一致时：</span></span><br><span class="line">list1 = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;man&#x27;</span>]</span><br><span class="line">dict1 = &#123;list1[i]: list2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(list1))&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表数据个数不一致时：</span></span><br><span class="line">list3 = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">list4 = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;man&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(list3)&gt;<span class="built_in">len</span>(list4):</span><br><span class="line">lens = <span class="built_in">len</span>(list4)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">lens = <span class="built_in">len</span>(list3)</span><br><span class="line">dict2 = &#123;list3[i]: list4[j] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, lens) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, lens)&#125;</span><br><span class="line"><span class="built_in">print</span>(dict2)</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>提取字典中目标数据</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">counts = &#123;<span class="string">&#x27;MBP&#x27;</span>: <span class="number">268</span>, <span class="string">&#x27;HP&#x27;</span>: <span class="number">125</span>, <span class="string">&#x27;DELL&#x27;</span>: <span class="number">201</span>, <span class="string">&#x27;Lenovo&#x27;</span>: <span class="number">199</span>, <span class="string">&#x27;acer&#x27;</span>: <span class="number">99</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：提取上述电脑数量大于等于200的字典数据</span></span><br><span class="line">count1 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> counts.items() <span class="keyword">if</span> value &gt;= <span class="number">200</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(count1)  <span class="comment"># &#123;&#x27;MBP&#x27;: 268, &#x27;DELL&#x27;: 201&#125;</span></span><br></pre></td></tr></table></figure><h1 id="集合推导式">集合推导式</h1><p>需求：创建一个集合，数据为下方列表的2次方。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">set1 = &#123;i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> list1&#125;</span><br><span class="line"><span class="built_in">print</span>(set1)  <span class="comment"># &#123;1, 4&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：集合<mark>有数据去重功能。</mark></p></blockquote><h1 id="总结">总结</h1><ul class="lvl-0"><li class="lvl-2"><p>推导式的作用：简化代码</p></li><li class="lvl-2"><p>推导式写法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表推导式</span></span><br><span class="line">[xx <span class="keyword">for</span> xx <span class="keyword">in</span> <span class="built_in">range</span>()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典推导式</span></span><br><span class="line">&#123;xx1: xx2 <span class="keyword">for</span> ... <span class="keyword">in</span> ...&#125;</span><br><span class="line">dict1.items()/dict1.keys()/dict1.values()</span><br><span class="line"><span class="comment"># 集合推导式</span></span><br><span class="line">&#123;xx <span class="keyword">for</span> xx <span class="keyword">in</span> ...&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（十）数据序列——公共操作</title>
      <link href="/pythonbasic10.html"/>
      <url>/pythonbasic10.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">运算符</li><li class="lvl-2">公共方法</li><li class="lvl-2">容器类型转换</li></ul><h1 id="运算符">运算符</h1><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">支持的容器类型</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">合并</td><td style="text-align:center">字符串、列表、元组</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">复制</td><td style="text-align:center">字符串、列表、元组</td></tr><tr><td style="text-align:center">in</td><td style="text-align:center">元素是否存在</td><td style="text-align:center">字符串、列表、元组、<mark>字典</mark></td></tr><tr><td style="text-align:center">not in</td><td style="text-align:center">元素是否不存在</td><td style="text-align:center">字符串、列表、元组、<mark>字典</mark></td></tr></tbody></table><h2 id="合并">+ 合并</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串 </span></span><br><span class="line">str1 = <span class="string">&#x27;aa&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;bb&#x27;</span></span><br><span class="line">str3 = str1 + str2</span><br><span class="line"><span class="built_in">print</span>(str3)  <span class="comment"># aabb</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表 </span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list2 = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">list3 = list1 + list2</span><br><span class="line"><span class="built_in">print</span>(list3)  <span class="comment"># [1, 2, 10, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组 </span></span><br><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">t2 = (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">t3 = t1 + t2</span><br><span class="line"><span class="built_in">print</span>(t3)  <span class="comment"># (10, 20, 100, 200)</span></span><br></pre></td></tr></table></figure><h2 id="复制">* 复制</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">10</span>)  <span class="comment"># ----------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list1 * <span class="number">4</span>)  <span class="comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="string">&#x27;world&#x27;</span>,)</span><br><span class="line"><span class="built_in">print</span>(t1 * <span class="number">4</span>)  <span class="comment"># (&#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="in或not-in">in或not in</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;abcd&#x27;</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abcd&#x27;</span>)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> list1)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> list1)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;aa&#x27;</span> <span class="keyword">in</span> t1)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;aa&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> t1)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h1 id="公共方法">公共方法</h1><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>计算容器中元素个数</td></tr><tr><td>del 或 del()</td><td>删除</td></tr><tr><td>max()</td><td>返回容器中元素最大值</td></tr><tr><td>min()</td><td>返回容器中元素最小值</td></tr><tr><td>range(start, end, step)</td><td>生成从start到end的数字，步长为 step(不写，默认为1），供for循环使用</br>start可以不写，默认从0开始；但end必须要写；<mark>范围是左闭右开型</mark></td></tr><tr><td>enumerate()</td><td>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</td></tr></tbody></table><h2 id="len">len()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(str1))  <span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1))  <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t1))  <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 集合</span></span><br><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s1))  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 字典</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dict1))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h2 id="del">del()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="keyword">del</span> str1</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="keyword">del</span>(list1[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(list1)  <span class="comment"># [20, 30, 40]</span></span><br></pre></td></tr></table></figure><h2 id="max">max()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(str1))  <span class="comment"># g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(list1))  <span class="comment"># 40</span></span><br></pre></td></tr></table></figure><h2 id="min">min()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(str1))  <span class="comment"># a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(list1))  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><h2 id="range">range()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 3 5 7 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><blockquote><p>注意：range()生成的序列不包含end数字。start不写默认从0开始。</p></blockquote><h2 id="enumerate">enumerate()</h2><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enumerate</span>(可遍历对象, start=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：start参数用来设置遍历数据的下标的起始值，默认为0。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>快速体验</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># enumerate 返回结果是元组，元组第一个数据是原迭代对象的数据对应的下标，元组第二个数据是原迭代对象的数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1, start=<span class="number">1</span>):</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">for</span> index, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1, start=<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;下标是<span class="subst">&#123;index&#125;</span>, 对应的字符是<span class="subst">&#123;char&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230524223816932.png" alt="image-20230524223816932" style="zoom: 67%;" /><blockquote><p><mark>enumerate 返回结果是元组，元组第一个数据是原迭代对象的数据对应的下标，元组第二个数据是原迭代对象的数据</mark></p></blockquote><h1 id="容器类型转换">容器类型转换</h1><h2 id="tuple-–元组">tuple()–元组</h2><p>作用：将某个序列转换成元组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>]</span><br><span class="line">s1 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>,  <span class="number">400</span>, <span class="number">500</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># tuple()--转换成元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(s1))</span><br></pre></td></tr></table></figure><h2 id="list-–列表">list()–列表</h2><p>作用：将某个序列转换成列表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">s1 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># list()--转换成列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(t1))</span><br></pre></td></tr></table></figure><h2 id="set-–集合">set()–集合</h2><p>作用：将某个序列转换成集合</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>]</span><br><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set()--转换成集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(list1)) <span class="comment"># &#123;40, 10, 50, 20, 30&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(t1))  <span class="comment"># &#123;&#x27;e&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;d&#x27;, &#x27;a&#x27;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>1. 集合可以快速完成列表去重<br>2. 集合不支持下标</p></blockquote><h1 id="总结">总结</h1><ul class="lvl-0"><li class="lvl-2"><p>运算符</p><ul class="lvl-2"><li class="lvl-4"><ul class="lvl-4"><li class="lvl-6"></li></ul></li><li class="lvl-4">in / not in</li></ul></li><li class="lvl-2"><p>公共方法</p><ul class="lvl-2"><li class="lvl-4">len()</li><li class="lvl-4">del()</li><li class="lvl-4">range()</li><li class="lvl-4">enumerate()</li></ul></li><li class="lvl-2"><p>数据类型转换</p><ul class="lvl-2"><li class="lvl-4">tuple()</li><li class="lvl-4">list()</li><li class="lvl-4">set()</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（九）数据序列——集合</title>
      <link href="/pythonbasic9.html"/>
      <url>/pythonbasic9.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">创建集合</li><li class="lvl-2">集合数据的特点</li><li class="lvl-2">集合的常见操作</li></ul><h1 id="集合">集合</h1><h2 id="创建集合">创建集合</h2><p>创建集合使用<code>&#123;&#125;</code>或<code>set()</code>， 但是<strong>如果要创建空集合只能使用<code>set()</code></strong>，因为<code>&#123;&#125;</code>用来创建空字典。</p><blockquote><p><strong>特点：</strong></p><ol><li class="lvl-3"><mark>集合可以去掉重复数据；</mark></li><li class="lvl-3"><mark>集合数据是无序的，故不支持下标</mark></li></ol></blockquote><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">s2 = &#123;<span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">50</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2) <span class="comment"># 打印时 自动去除重复的数据</span></span><br><span class="line"></span><br><span class="line">s3 = <span class="built_in">set</span>(<span class="string">&#x27;abcdefg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建空集合</span></span><br><span class="line">s4 = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s4))  <span class="comment"># set</span></span><br><span class="line"></span><br><span class="line">s5 = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s5))  <span class="comment"># dict</span></span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305222032975.png" alt="image-20190318104620690" style="zoom:50%;" /><h2 id="集合常见操作方法">集合常见操作方法</h2><h3 id="增加数据">增加数据</h3><ul class="lvl-0"><li class="lvl-2"><p>add(),追加<strong>单个数据</strong></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line">s1.add(<span class="number">100</span>)</span><br><span class="line">s1.add(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)  <span class="comment"># &#123;100, 10, 20&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>因为集合有去重功能，所以，当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>update(), 追加的<strong>数据是序列</strong>。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment"># s1.update(100)  # 报错</span></span><br><span class="line">s1.update([<span class="number">100</span>, <span class="number">200</span>]) <span class="comment"># 增加列表序列</span></span><br><span class="line">s1.update(<span class="string">&#x27;abc&#x27;</span>) <span class="comment"># 增加单个字符串序列，会拆分</span></span><br><span class="line">s1.update([<span class="string">&#x27;anzhiyu&#x27;</span>, <span class="string">&#x27;anyw&#x27;</span>]) <span class="comment"># 增加列表序列，其中数据类型是字符型，不会拆分</span></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305222032756.png" alt="image-20190318121424514"></p><h3 id="删除数据">删除数据</h3><ul class="lvl-0"><li class="lvl-2"><p>remove()，删除集合中的指定数据，<strong>如果数据不存在则报错。</strong></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">s1.remove(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">s1.remove(<span class="number">10</span>)  <span class="comment"># 报错</span></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>discard()，删除集合中的指定数据，<strong>如果数据不存在也不会报错。</strong></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">s1.discard(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">s1.discard(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>pop()，随机删除集合中的某个数据，并返回这个数据。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line">del_num = s1.pop()</span><br><span class="line"><span class="built_in">print</span>(del_num)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure><h3 id="查找数据（判断数据是否在集合序列）">查找数据（判断数据是否在集合序列）</h3><ul class="lvl-0"><li class="lvl-2"><p>in：判断数据在集合序列</p></li><li class="lvl-2"><p>not in：判断数据不在集合序列</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> s1) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> s1) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h1 id="总结">总结</h1><ul class="lvl-0"><li class="lvl-2"><p>创建集合</p><ul class="lvl-2"><li class="lvl-4">有数据集合</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;数据<span class="number">1</span>, 数据<span class="number">2</span>, ...&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4"><p>无数据集合</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>常见操作</p><ul class="lvl-2"><li class="lvl-4">增加数据<ul class="lvl-4"><li class="lvl-6">add()</li><li class="lvl-6">update()</li></ul></li><li class="lvl-4">删除数据<ul class="lvl-4"><li class="lvl-6">remove()</li><li class="lvl-6">discard()</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（八）数据序列——字典</title>
      <link href="/pythonbasic8.html"/>
      <url>/pythonbasic8.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">字典的应用场景</li><li class="lvl-2">创建字典的语法</li><li class="lvl-2">字典常见操作</li><li class="lvl-2">字典的循环遍历</li></ul><h1 id="字典">字典</h1><h2 id="字典的应用场景">字典的应用场景</h2><p>思考1： 如果有多个数据，例如：‘Tom’, ‘男’, 20，如何快速存储？</p><p>答：列表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>]</span><br></pre></td></tr></table></figure><p>思考2：如何查找到数据’Tom’？</p><p>答：查找到下标为0的数据即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>思考3：如果将来数据顺序发生变化，如下所示，还能用<code>list1[0]</code>访问到数据’Tom’吗？。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;Tom&#x27;</span>]</span><br></pre></td></tr></table></figure><p>答：不能，数据’Tom’此时下标为2。</p><p>思考4：数据顺序发生变化，每个数据的下标也会随之变化，如何保证数据顺序变化前后能使用同一的标准查找数据呢？</p><p>答：字典，字典里面的数据是以<mark>键值对</mark>形式出现，字典数据和数据顺序没有关系，即字典不支持下标，后期无论数据如何变化，只需要按照对应的键的名字查找数据即可。</p><h2 id="创建字典的语法">创建字典的语法</h2><p>字典特点：</p><ul class="lvl-0"><li class="lvl-2"><p>符号为<mark>大括号</mark></p></li><li class="lvl-2"><p>数据为<mark>键值对</mark>形式出现</p></li><li class="lvl-2"><p>各个键值对之间用<mark>逗号</mark>隔开</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#123;&#125;键值对 各个键值对用逗号隔开</span></span><br><span class="line"><span class="comment"># 有数据的字典</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;Tom&quot;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建空字典</span></span><br><span class="line">dict2 = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict2))</span><br><span class="line"></span><br><span class="line">dict3 = <span class="built_in">dict</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict3))</span><br></pre></td></tr></table></figure><blockquote><p>注意：一般称<font color=red>冒号前面的为键(key)，简称k；冒号后面的为值(value)，简称v。</font></p></blockquote><h2 id="字典常见操作">字典常见操作</h2><h3 id="增">增</h3><p>写法：<mark>字典序列[key] = 值</mark></p><p><font color=red>如果key存在则修改这个key对应的值；如果key不存在则新增此键值对。</font></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">dict1[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;Rose&#x27;</span></span><br><span class="line"><span class="comment"># 结果：&#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"></span><br><span class="line">dict1[<span class="string">&#x27;id&#x27;</span>] = <span class="number">110</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;, &#x27;id&#x27;: 110&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<font color=red>字典为可变类型。</font></p></blockquote><h3 id="删">删</h3><ul class="lvl-0"><li class="lvl-2"><p>del() / del ：删除字典或删除字典中指定键值对。</p><p>具体语法：<code>del(字典序列)</code>或者<code>del 字典序列[key]</code></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line"><span class="comment"># 结果：&#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 20&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>clear()：清空字典</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">dict1.clear()</span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="改">改</h3><p>写法：<mark>字典序列[key] = 值</mark></p><blockquote><p>注意：如果key存在则修改这个key对应的值 ；如果key不存在则新增此键值对。</p></blockquote><h3 id="查">查</h3><h4 id="key值查找">key值查找</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># Tom</span></span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;id&#x27;</span>])  <span class="comment"># 报错 KeyError: &#x27;id&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果当前查找的key存在，则返回对应的值；否则则报错。</p></blockquote><h4 id="get">get()</h4><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字典序列.get(key, 默认值)</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果当前查找的key不存在则返回第二个参数(默认值)，如果省略第二个参数，则返回None。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>快速体验</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;name&#x27;</span>))  <span class="comment"># Tom</span></span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;id&#x27;</span>, <span class="number">110</span>))  <span class="comment"># 110</span></span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;id&#x27;</span>))  <span class="comment"># None</span></span><br></pre></td></tr></table></figure><h4 id="keys">keys()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.keys())  <span class="comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;])</span></span><br></pre></td></tr></table></figure><h4 id="values">values()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.values())  <span class="comment"># dict_values([&#x27;Tom&#x27;, 20, &#x27;男&#x27;])</span></span><br></pre></td></tr></table></figure><h4 id="items">items()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.items())  <span class="comment"># dict_items([(&#x27;name&#x27;, &#x27;Tom&#x27;), (&#x27;age&#x27;, 20), (&#x27;gender&#x27;, &#x27;男&#x27;)])</span></span><br></pre></td></tr></table></figure><h2 id="字典的循环遍历">字典的循环遍历</h2><h3 id="遍历字典的key">遍历字典的key</h3><p>返回可迭代的对象，即字典<strong>所有的key值</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1.keys():</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305222026408.png" alt="image-20190212103905553"></p><h3 id="遍历字典的value">遍历字典的value</h3><p>返回字典的可迭代对象，即字典<strong>所有的value值</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict1.values():</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305222026409.png" alt="image-20190212103957777"></p><h3 id="遍历字典的元素-键值对">遍历字典的元素(键值对)</h3><p>遍历字典的元素返回<strong>元组</strong>，<mark>每个元组都是键值对，由key和value值组成的</mark></p><blockquote><p>xx.items():返回可迭代对象，内部是元组，元组有2个数据</p><p>元组数据1是字典的key,元组数据2是字典的value</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305222026411.png" alt="image-20190212104046564"></p><h3 id="font-color-red-遍历字典的键值对（拆包）-font"><font color=red>遍历字典的键值对（拆包）</font></h3><blockquote><p>xx.items():返回可迭代对象，内部是元组，元组有2个数据</p><p>元组数据1是字典的key,元组数据2是字典的value</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># xx.items():返回可迭代对象，内部是元组，元组有2个数据</span></span><br><span class="line"><span class="comment"># 元组数据1是字典的key,元组数据2是字典的value</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span> = <span class="subst">&#123;value&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="comment">#print(key)</span></span><br><span class="line"><span class="comment">#print(value)</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305222026412.png" alt="image-20190212104223143"></p><h1 id="总结">总结</h1><ul class="lvl-0"><li class="lvl-2"><p>定义字典</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义有数据的字典</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空字典</span></span><br><span class="line">dict2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">dict3 = <span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>常见操作</p><ul class="lvl-2"><li class="lvl-4">增/改</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字典序列[key] = 值</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查找</p><ul class="lvl-2"><li class="lvl-4">字典序列[key]</li><li class="lvl-4">keys()</li><li class="lvl-4">values()</li><li class="lvl-4">items()</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（七）数据序列——列表与元组</title>
      <link href="/pythonbasic7.html"/>
      <url>/pythonbasic7.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">列表的应用场景</li><li class="lvl-2">列表的格式</li><li class="lvl-2">列表的常用操作</li><li class="lvl-2">列表的循环遍历</li><li class="lvl-2">列表的嵌套使用</li><li class="lvl-2">元组的应用场景</li><li class="lvl-2">定义元组</li><li class="lvl-2">元组常见操作</li></ul><h1 id="列表">列表</h1><h2 id="列表的应用场景">列表的应用场景</h2><p>思考：有一个人的姓名(TOM)怎么书写存储程序？</p><p>答：变量。———————————-</p><p>思考：如果一个班级100位学生，每个人的姓名都要存储，应该如何书写程序？声明100个变量吗？</p><p>答：列表即可， 列表一次性可以存储多个数据。</p><p><mark>列表中的数据允许更改。</mark></p><h2 id="列表的格式">列表的格式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>, 数据<span class="number">4.</span>.....]</span><br></pre></td></tr></table></figure><p>列表特点：</p><ul class="lvl-0"><li class="lvl-2"><p>符号为<mark>方括号[ ]</mark></p></li><li class="lvl-2"><p>数据可以为<mark>不同的数据类型</mark>出现</p></li><li class="lvl-2"><p>列表可以一次性存储多个数据</p></li></ul><blockquote><p>注：<strong>一个列表存储的数据最好是相同的类型</strong></p></blockquote><h2 id="列表的常用操作">列表的常用操作</h2><p>列表的作用是一次性存储多个数据，程序员可以对这些数据进行的操作有：增、删、改、查。</p><h3 id="查找">查找</h3><h4 id="下标">下标</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">0</span>])  <span class="comment"># Tom</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">1</span>])  <span class="comment"># Lily</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>])  <span class="comment"># Rose</span></span><br></pre></td></tr></table></figure><h4 id="函数">函数</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>index()：返回指定数据所在位置的下标 。</strong></p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列（或列表序列名）.index(数据, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>快速体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name_list.index(<span class="string">&#x27;Lily&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果查找的数据不存在则报错。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><strong>count()：统计指定数据在当前列表中出现的次数。</strong></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name_list.count(<span class="string">&#x27;Lily&#x27;</span>))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>len()：访问列表长度，即列表中数据的个数。</strong></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(name_list))  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h4 id="逻辑判断是否存在">逻辑判断是否存在</h4><p><b><font color=red>此判断可以运用到列表、元组、字典等</font></b></p><ul class="lvl-0"><li class="lvl-2"><p>in：判断指定数据在某个列表序列，如果在返回True，否则返回False</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lily&#x27;</span> <span class="keyword">in</span> name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lilys&#x27;</span> <span class="keyword">in</span> name_list)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>not in：判断指定数据不在某个列表序列，如果不在返回True，否则返回False</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lily&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lilys&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> name_list)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><p>需求：查找用户输入的名字是否已经存在。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要搜索的名字：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您输入的名字是<span class="subst">&#123;name&#125;</span>, 名字已经存在&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您输入的名字是<span class="subst">&#123;name&#125;</span>, 名字不存在&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="增加">增加</h3><p><b><font color=red>列表是可变类型，其中数据可改的</font></b></p><p>作用：增加指定数据到列表中。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>append()：列表结尾追加数据</strong>。可以将序列追加到列表中。</p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列（或列表序列名）.append(数据)</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.append(<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;xiaoming&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305200942437.png" alt="image-20190130160154636"></p><blockquote><p>列表追加数据的时候，<b>直接在原列表里面追加了指定数据，即修改了原列表，故列表为可变类型数据。</b></p></blockquote><ol start="3"><li class="lvl-3"><p>注意点</p></li></ol><p><font color=red>如果append()追加的数据是一个序列，则追加整个序列到列表</font></p><p><mark>可以把字典序列（列表序列或集合序列）追加到列表，如<code>stu_info.append(info_dict)</code>,<code>列表名.append(字典名)</code></mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.append([<span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, [&#x27;xiaoming&#x27;, &#x27;xiaohong&#x27;]]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>extend()：列表结尾追加数据，<font color=blue>如果数据是一个序列，则将这个序列的数据逐一添加到列表。</font></p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列（或列表序列名）.extend(数据)</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>快速体验</p><p>2.1 单个数据(会拆开追加)</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend(<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;x&#x27;, &#x27;i&#x27;, &#x27;a&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><p>​       <strong>2.2 序列数据</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend([<span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;xiaoming&#x27;, &#x27;xiaohong&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><font color=red>insert()：指定位置新增数据。</font></p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列（或列表序列名）.insert(位置下标, 数据)</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>快速体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.insert(<span class="number">1</span>, <span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;xiaoming&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><h3 id="删除">删除</h3><ul class="lvl-0"><li class="lvl-2"><p>del— <font color=red>删除指定下标的数据，如果不指定下标，默认删除整个列表。</font></p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> 目标</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>快速体验</p><p>2.1 删除列表<code>del 列表名</code></p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：报错提示：name &#x27;name_list&#x27; is not defined</span></span><br><span class="line"><span class="keyword">del</span> name_list</span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><p>​2.2 删除指定下标的数据<code>del 列表名[下标]</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> name_list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><font color=red>pop()：删除指定下标的数据，如果不指定下标，默认删除最后一个数据。并返回该数据。</font></p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列（或列表序列名）.pop(下标)</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>快速体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;RoSE&#x27;</span>, <span class="string">&#x27;TOM&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># pop()--删除指定下标的数据，如果不指定下标，默认删除最后一个数据</span></span><br><span class="line"><span class="comment"># 无论是否安装下标还是删除最后一个，pop函数都会返回这个被删除的数据</span></span><br><span class="line">del_name = name_list.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(del_name) <span class="comment"># TOM</span></span><br><span class="line"><span class="built_in">print</span>(name_list) <span class="comment"># [&#x27;Lily&#x27;, &#x27;RoSE&#x27;, &#x27;TOM&#x27;]</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>remove()：<strong>移除</strong>列表中某个数据的<strong>第一个匹配项</strong>。(可以删除指定数据，当该数据在列表中超过多个时，只删除第一个。)</p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列（或列表序列名）.remove(数据)</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>示-例</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.remove(<span class="string">&#x27;Rose&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>clear()：清空列表</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.clear()</span><br><span class="line"><span class="built_in">print</span>(name_list) <span class="comment"># 结果： []</span></span><br></pre></td></tr></table></figure><h3 id="修改">修改</h3><ul class="lvl-0"><li class="lvl-2"><p>修改指定下标数据</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list[<span class="number">0</span>] = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;aaa&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>逆置：reverse()</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">num_list.reverse()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[8, 6, 3, 2, 5, 1]</span></span><br><span class="line"><span class="built_in">print</span>(num_list)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><mark>排序：sort()</mark></p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列（列表序列名）.sort(key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：reverse表示排序规则，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对列表按照字典key值来排序，升序/降序</span></span><br><span class="line">students = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span>&#125;]</span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;name&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(stdents</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>快速体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lists = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># sort() 升序(默认) 和 降序</span></span><br><span class="line">lists.sort(reverse=<span class="literal">False</span>) <span class="comment"># [1, 2, 3, 5, 7]</span></span><br><span class="line"><span class="built_in">print</span>(lists)</span><br><span class="line">lists.sort(reverse=<span class="literal">True</span>) <span class="comment"># [7, 5, 3, 2, 1]</span></span><br><span class="line"><span class="built_in">print</span>(lists)</span><br></pre></td></tr></table></figure><h3 id="复制">复制</h3><p>函数：copy()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_li2 = name_list.copy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_li2)</span><br></pre></td></tr></table></figure><h2 id="列表的循环遍历">列表的循环遍历</h2><p>需求：依次打印列表中的各个数据。</p><h3 id="while">while</h3><ul class="lvl-0"><li class="lvl-2"><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(name_list):</span><br><span class="line"><span class="comment"># name = input(&#x27;请输入用户名:&#x27;)</span></span><br><span class="line"><span class="comment"># if name in name_list:</span></span><br><span class="line"><span class="comment"># print(f&#x27;您输入的用户名是&#123;name&#125;，已经存在，请重新输入&#x27;)</span></span><br><span class="line"><span class="comment"># continue</span></span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment"># print(f&#x27;您输入的用户名是&#123;name&#125;,请继续下一步！&#x27;)</span></span><br><span class="line"><span class="comment"># break</span></span><br><span class="line"><span class="built_in">print</span>(name_list[i])</span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>执行结果</p></li></ul><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305221629137.png" alt="image-20230522162854475"></p><h3 id="for">for</h3><ul class="lvl-0"><li class="lvl-2"><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name_list: <span class="comment"># i从列表name_list下标0开始遍历</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>执行结果</p></li></ul><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305221629137.png" alt="image-20230522162854475"></p><h2 id="列表嵌套">列表嵌套</h2><p>所谓列表嵌套指的就是一个列表里面包含了其他的子列表。</p><p>应用场景：要存储班级一、二、三三个班级学生姓名，且每个班级的学生姓名在一个列表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [[<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小绿&#x27;</span>], [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>], [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]]</span><br></pre></td></tr></table></figure><blockquote><p>思考： 如何查找到数据&quot;李四&quot;？</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步：按下标查找到李四`所在的列表</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步：从李四所在的列表里面，再按下标找到数据李四</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="综合应用-–-随机分配办公室">综合应用 – 随机分配办公室</h2><p>需求：有三个办公室，8位老师，8位老师随机分配到3个办公室</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.准备数据</span></span><br><span class="line"><span class="string">1.1 8位老师--列表</span></span><br><span class="line"><span class="string">1.2 3个办公室 --列表嵌套</span></span><br><span class="line"><span class="string">2.分配老师到办公室</span></span><br><span class="line"><span class="string">随机分配老师到办公室</span></span><br><span class="line"><span class="string">就是把老师名字写入到办公室列表 --办公室列表追加老师名字数据</span></span><br><span class="line"><span class="string">3.验证是否分配成功</span></span><br><span class="line"><span class="string">打印办公室详细信息，每个办公室的人数和对应的老师名字</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.准备数据</span></span><br><span class="line">teachers = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U+&#x27;</span>, <span class="string">&#x27;K&#x27;</span>]</span><br><span class="line">offices = [[], [], []]</span><br><span class="line"><span class="comment"># 2.分配老师到办公室 -- 取到每个老师数据放到办公室列表 -- 遍历老师列表数据</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> teachers:</span><br><span class="line"><span class="comment"># 列表追加数据 -- append  extend  insert</span></span><br><span class="line"><span class="comment"># 对办公室嵌入列表进行随机选择，选择之后会将遍历得到的teachers数据(老师姓名）存入到办公室列表中去</span></span><br><span class="line">num = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">offices[num].append(name)</span><br><span class="line"><span class="comment"># print(offices)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 验证是否分配成功</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> office <span class="keyword">in</span> offices:</span><br><span class="line"><span class="comment"># 打印办公室人数 --子列表数据的个数</span></span><br><span class="line">counts = <span class="built_in">len</span>(office)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;办公室<span class="subst">&#123;i&#125;</span>人数是<span class="subst">&#123;counts&#125;</span>,办公室里面老师有:&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印子列表中老师姓名</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> office:</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="元组">元组</h1><h2 id="元组的应用场景">元组的应用场景</h2><p>思考：如果想要存储多个数据，但是这些数据是不能修改的数据，怎么做？</p><p>答：列表？列表可以一次性存储多个数据，但是列表中的数据允许更改。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;元组</span></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"></span><br><span class="line">num_list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num_list))  <span class="comment"># &lt;class &#x27;list&#x27;&gt;列表</span></span><br></pre></td></tr></table></figure><p><mark>一个元组可以存储多个数据，元组内的数据是不能修改的。</mark></p><h2 id="定义元组">定义元组</h2><p>元组特点：定义元组使用<mark>小括号</mark>，且<mark>逗号</mark>隔开各个数据，</p><p><font color=red>元组中数据可以是不同的数据类型</font></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多个数据元组</span></span><br><span class="line">t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个数据元组</span></span><br><span class="line">t2 = (<span class="number">10</span>,)</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果定义的元组只有一个数据，那么这个数据后面也要添加逗号，否则数据类型为唯一的这个数据的数据类型</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2 = (<span class="number">10</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t2))  <span class="comment"># tuple</span></span><br><span class="line"></span><br><span class="line">t3 = (<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t3))  <span class="comment"># int</span></span><br><span class="line"></span><br><span class="line">t4 = (<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t4))  <span class="comment"># str</span></span><br></pre></td></tr></table></figure><h2 id="元组的常见操作">元组的常见操作</h2><p><strong>元组数据不支持修改，只支持查找</strong>，具体如下：</p><ul class="lvl-0"><li class="lvl-2"><p>按下标查找数据</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">0</span>])  <span class="comment"># aa</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>index()：查找某个数据，<strong>如果数据存在返回对应的下标</strong>，否则报错，语法和列表、字符串的index方法相同。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1.index(<span class="string">&#x27;aa&#x27;</span>))  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>count()：<strong>统计某个数据在当前元组出现的次数</strong>。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1.count(<span class="string">&#x27;bb&#x27;</span>))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>len()：<strong>统计元组中数据的个数</strong>。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tuple1))  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h3 id="关于元组中修改操作">关于元组中修改操作</h3><ul class="lvl-0"><li class="lvl-2"><p>元组内的直接数据如果修改则立即报错</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line">tuple1[<span class="number">0</span>] = <span class="string">&#x27;aaa&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果元组里面<strong>有列表，修改列表里面的数据则是支持的</strong>，故自觉很重要。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple2 = (<span class="number">10</span>, <span class="number">20</span>, [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>], <span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple2[<span class="number">2</span>])  <span class="comment"># 访问到列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：(10, 20, [&#x27;aaaaa&#x27;, &#x27;bb&#x27;, &#x27;cc&#x27;], 50, 30)</span></span><br><span class="line">tuple2[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;aaaaa&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(tuple2)</span><br></pre></td></tr></table></figure><h1 id="总结">总结</h1><ul class="lvl-0"><li class="lvl-2"><p>列表的格式</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>常用操作方法</p><ul class="lvl-2"><li class="lvl-4">index()</li><li class="lvl-4">len()</li><li class="lvl-4">append()</li><li class="lvl-4">pop()</li><li class="lvl-4">remove()</li></ul></li><li class="lvl-2"><p>列表嵌套</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [[<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小绿&#x27;</span>], [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>], [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]]</span><br><span class="line">name_list[<span class="number">2</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>定义元组</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">t2 = (<span class="number">10</span>,)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>常用操作方法</p><ul class="lvl-2"><li class="lvl-4">index()</li><li class="lvl-4">len()</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（六）数据序列——字符串</title>
      <link href="/pythonbasic6.html"/>
      <url>/pythonbasic6.html</url>
      
        <content type="html"><![CDATA[<h2 id="目标">目标</h2><ul class="lvl-0"><li class="lvl-2">认识字符串</li><li class="lvl-2">下标</li><li class="lvl-2">切片</li><li class="lvl-2">常用操作方法</li></ul><h2 id="认识字符串">认识字符串</h2><p>字符串是 Python 中最常用的数据类型。我们一般使用引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">b = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br></pre></td></tr></table></figure><blockquote><p>注意：控制台显示结果为<code>&lt;class 'str'&gt;</code>， 即数据类型为str(字符串)。</p></blockquote><h3 id="字符串特征">字符串特征</h3><ul class="lvl-0"><li class="lvl-2"><p>一对单引号或双引号（一引号）字符串</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name1 = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">name2 = <span class="string">&quot;Rose&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>三对单引号或双引号（三引号）字符串</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name3 = <span class="string">&#x27;&#x27;&#x27; Tom &#x27;&#x27;&#x27;</span></span><br><span class="line">name4 = <span class="string">&quot;&quot;&quot; Rose &quot;&quot;&quot;</span></span><br><span class="line">a = <span class="string">&#x27;&#x27;&#x27; i am Tom, </span></span><br><span class="line"><span class="string">        nice to meet you! &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">b = <span class="string">&quot;&quot;&quot; i am Rose, </span></span><br><span class="line"><span class="string">        nice to meet you! &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<mark>三引号形式的字符串支持换行。</mark></p></blockquote><blockquote><p>思考：如果创建一个字符串<code> I'm Tom</code>?</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&quot;I&#x27;m Tom&quot;</span></span><br><span class="line">d = <span class="string">&#x27;I\&#x27;m Tom&#x27;</span> <span class="comment"># 加转义字符\</span></span><br></pre></td></tr></table></figure><h3 id="字符串输出">字符串输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)  <span class="comment"># 直接输出</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s&#x27;</span> % name)  <span class="comment"># 格式化字符输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;我的名字是<span class="subst">&#123;name&#125;</span>&#x27;</span>)   <span class="comment"># f&#x27;&#123;&#125;&#x27;输出</span></span><br></pre></td></tr></table></figure><h3 id="字符串输入">字符串输入</h3><p>在Python中，使用==<code>input()</code>接收用户输入。==</p><ul class="lvl-0"><li class="lvl-2"><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的名字：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的名字是<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))</span><br><span class="line"></span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的密码：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的密码是<span class="subst">&#123;password&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>输出结果</p></li></ul><div align='center'>  <img src='https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305142011613.png' width=600px style="zoom:98%;"></div><h2 id="下标">下标</h2><p><code>“下标”</code>又叫<code>“索引”</code>，就是编号。比如火车座位号，座位号的作用：按照编号快速找到对应的座位。同理，下标的作用即是通过下标快速找到对应的数据。</p><p>Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</p><p>Python 访问子字符串，可以使用方括号<code>[]</code>来截取字符串，字符串的截取的语法格式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量[头下标:尾下标]</span><br></pre></td></tr></table></figure><blockquote><p><mark>不包含尾下标对应的数据， 正负整数均可</mark></p></blockquote><p>索引值以 <strong>0</strong> 为开始值，<strong>-1</strong> 为从末尾的开始位置。</p><div align='center'>  <img src='https://static.runoob.com/wp-content/uploads/123456-20200923-1.svg' width=650px style="zoom:98%;"></div><div align='center'>  <img src='https://www.runoob.com/wp-content/uploads/2014/05/python-str-runoob.png' width=450px style="zoom:78%;"></div><h3 id="示例">示例</h3><p>需求：字符串<code>name = &quot;abcdef&quot;</code>，取到不同下标对应的数据。</p><ul class="lvl-0"><li class="lvl-2"><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;abcdef&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>输出结果</p></li></ul><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305142011582.png" alt="image-20190129174231104"></p><blockquote><p>注意：下标从<mark>0</mark>开始。</p></blockquote><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305142012883.png" alt="image-20190129174231104"></p><h2 id="切片">切片</h2><p>切片是指<strong>对操作的对象截取其中一部分的操作</strong>。<strong>字符串、列表、元组</strong>都支持切片操作。</p><h3 id="语法">语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">序列[开始位置下标:结束位置下标:步长]</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><ol><li class="lvl-3"><b><font color=red>不包含结束位置下标对应的数据(相当于左闭右开）， 正负整数均可；</font></b></li><li class="lvl-3">步长是选取间隔，正负整数均可，<b><font color=red>默认步长为1。</font></b></li><li class="lvl-3"><b><font color=red>若步长为负数，表示倒序排列选取.</font></b></li></ol></blockquote><h3 id="示例（仔细体会字符串切片语法含义）">示例（仔细体会字符串切片语法含义）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">2</span>:<span class="number">5</span>:<span class="number">1</span>])  <span class="comment"># 234# 不包含结束位置的下标对应的数据</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">2</span>:<span class="number">5</span>:<span class="number">2</span>])  <span class="comment"># 24</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># 234</span></span><br><span class="line"><span class="built_in">print</span>(str1[:<span class="number">5</span>])  <span class="comment"># 01234 -如果不写开始，默认从字符串下标0开始选取</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">1</span>:])  <span class="comment"># 123456789 -如果不写结束，选取到字符串下标结束</span></span><br><span class="line"><span class="built_in">print</span>(str1[:])  <span class="comment"># 0123456789 -如果不写开始和结束，表示选取字符串所有</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str1[::-<span class="number">1</span>])  <span class="comment"># 9876543210 -若步长为负数，表示倒序排列选取</span></span><br><span class="line"><span class="built_in">print</span>(str1[-<span class="number">4</span>:-<span class="number">1</span>])  <span class="comment"># 678 - 下标表示字符串最后一个数据，依次向前类推</span></span><br><span class="line"><span class="built_in">print</span>(str1[-<span class="number">4</span>:-<span class="number">1</span>:<span class="number">1</span>])  <span class="comment"># 678</span></span><br><span class="line"><span class="built_in">print</span>(str1[-<span class="number">4</span>:-<span class="number">1</span>:-<span class="number">1</span>])  <span class="comment"># 不能选取出数据，从-4开始到-1结束，选取方向为从左到右，但是步长为-1:从右向左选取</span></span><br><span class="line"><span class="comment"># ****如果选取方向（下标开始到结束的方向) 和 步长的方向有冲突，则无法选取数据</span></span><br><span class="line"><span class="built_in">print</span>(str1[-<span class="number">1</span>:-<span class="number">4</span>:-<span class="number">1</span>])  <span class="comment"># 选取方向从-1到-4 (从右向左） 而步长-1也为从右向左方向选取 无冲突</span></span><br></pre></td></tr></table></figure><h2 id="常用操作方法">常用操作方法</h2><p>字符串的常用操作方法有查找、修改和判断三大类。</p><h3 id="查找">查找</h3><p>所谓字符串查找方法即是查找子串在字符串中的位置或出现的次数。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>find()</strong>：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列(或序列名).find(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li class="lvl-3"><p>快速体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 12 字符串下标从0开始</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world and itcast and itheima and Python&quot;</span>.find(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;and&#x27;</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world and itcast and itheima and Python&quot;</span>.find(<span class="string">&#x27;and&#x27;</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;ands&#x27;</span>))  <span class="comment"># -1 找不到子串 返回-1</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>index()</strong>：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则<strong>则报异常</strong>。</p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列(或序列名).index(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li class="lvl-3"><p>快速体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.index(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(mystr.index(<span class="string">&#x27;and&#x27;</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line"><span class="built_in">print</span>(mystr.index(<span class="string">&#x27;ands&#x27;</span>))  <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>rfind()： 和find()功能相同，但查找方向为<mark>右侧</mark>开始。</p></li><li class="lvl-2"><p>rindex()：和index()功能相同，但查找方向为<mark>右侧</mark>开始。</p></li><li class="lvl-2"><p><strong>count()</strong>：返回某个子串在字符串中出现的次数</p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列(或序列名).count(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<font color=red>开始和结束位置下标可以省略，表示在整个字符串序列中查找。</font></p></blockquote><ol start="2"><li class="lvl-3"><p>快速体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;ands&#x27;</span>))  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;and&#x27;</span>, <span class="number">0</span>, <span class="number">20</span>))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h3 id="修改">修改</h3><p>所谓修改字符串，指的就是通过函数的形式修改字符串中的数据。</p><h4 id="常用-重点">常用(重点)</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>replace()</strong>：替换</p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列(或序列名).replace(旧子串, 新子串, 替换次数)</span><br></pre></td></tr></table></figure><blockquote><p>注意：替换次数如果查出子串出现次数，则替换次数为该子串出现次数。</p></blockquote><ol start="2"><li class="lvl-3"><p>快速体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># repalce() 把and换成he</span></span><br><span class="line"><span class="comment"># ** 说明replace函数有返回值，返回值是修改后的字符串</span></span><br><span class="line">new_str = mystr.replace(<span class="string">&#x27;and&#x27;</span>,<span class="string">&#x27;he&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 替换次数如果超出了子串出现的次数，表示替换所有这个子串</span></span><br><span class="line">new1_str = mystr.replace(<span class="string">&#x27;and&#x27;</span>,<span class="string">&#x27;he&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(mystr)</span><br><span class="line"><span class="built_in">print</span>(new_str)</span><br><span class="line"><span class="built_in">print</span>(new1_str)</span><br><span class="line"><span class="comment"># ** 调用replace函数后，发现原有字符串的数据并没有得到修改，修改后的数据是replace函数的返回值</span></span><br><span class="line"><span class="comment"># -- 说明字符串是不可变数据类型（相当于C语法中的”形参“）</span></span><br><span class="line"><span class="comment"># 数据是否可以改变划分为 可变类型 和 不可变类型</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：数据按照是否能直接修改分为<mark>可变类型</mark>和<mark>不可变类型</mark>两种。字符串类型的数据修改的时候不能改变原有字符串，属于不能直接修改数据的类型即是不可变类型（相当于C语法中的”形参“）。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><strong>split()</strong>：按照指定字符分割字符串。</p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列(或序列名).split(分割字符, num)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<strong>num表示的是分割字符出现的次数</strong>，即将来返回数据个数为num+1个。</p></blockquote><ol start="2"><li class="lvl-3"><p>快速体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;hello world &#x27;, &#x27; itcast &#x27;, &#x27; itheima &#x27;, &#x27; Python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(mystr.split(<span class="string">&#x27;and&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;hello world &#x27;, &#x27; itcast &#x27;, &#x27; itheima and Python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(mystr.split(<span class="string">&#x27;and&#x27;</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and&#x27;, &#x27;itcast&#x27;, &#x27;and&#x27;, &#x27;itheima&#x27;, &#x27;and&#x27;, &#x27;Python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(mystr.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and itcast and itheima and Python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(mystr.split(<span class="string">&#x27; &#x27;</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果分割字符是原有字符串中的子串，分割后则丢失该子串。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><strong>join()</strong>：用一个字符或子串合并字符串，即是将多个字符串合并为一个新的字符串。</p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符或子串.join(多字符串组成的序列)</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>快速体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;chuan&#x27;</span>, <span class="string">&#x27;zhi&#x27;</span>, <span class="string">&#x27;bo&#x27;</span>, <span class="string">&#x27;ke&#x27;</span>]</span><br><span class="line">t1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;ddd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;_&#x27;</span>.join(list1)) <span class="comment"># 结果：chuan_zhi_bo_ke</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;...&#x27;</span>.join(t1)) <span class="comment"># 结果：aa...b...cc...ddd</span></span><br><span class="line"></span><br><span class="line">mylist = [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>]</span><br><span class="line">new_list = <span class="string">&#x27;___&#x27;</span>.join(mylist)</span><br><span class="line"><span class="built_in">print</span>(new_list) <span class="comment"># 结果：aa___bb___cc</span></span><br></pre></td></tr></table></figure><h4 id="大小写转换">大小写转换</h4><ul class="lvl-0"><li class="lvl-2"><p>capitalize()：将字符串第一个字符(首字母）转换成大写。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：Hello world and itcast and itheima and python</span></span><br><span class="line"><span class="built_in">print</span>(mystr.capitalize())</span><br></pre></td></tr></table></figure><blockquote><p>注意：capitalize()函数转换后，只字符串第一个字符大写，其他的字符全都小写。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>title()：将字符串每个单词首字母转换成大写。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：Hello World And Itcast And Itheima And Python</span></span><br><span class="line"><span class="built_in">print</span>(mystr.title())</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>lower()：将字符串中大写转小写。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：hello world and itcast and itheima and python</span></span><br><span class="line"><span class="built_in">print</span>(mystr.lower())</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>upper()：将字符串中小写转大写。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：HELLO WORLD AND ITCAST AND ITHEIMA AND PYTHON</span></span><br><span class="line"><span class="built_in">print</span>(mystr.upper())</span><br></pre></td></tr></table></figure><h4 id="删除空白字符">删除空白字符</h4><ul class="lvl-0"><li class="lvl-2"><p>lstrip()：删除字符串左侧空白字符。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mystr)</span><br><span class="line">new_str = mystr.lstrip()</span><br><span class="line"><span class="built_in">print</span>(new_str) <span class="comment"># 输出：hello world and itcast and itheima and Python</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305142012177.png" alt="image-20190129213453010"></p><ul class="lvl-0"><li class="lvl-2"><p>rstrip()：删除字符串右侧空白字符。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mystr)</span><br><span class="line">new_str = mystr.rstrip()</span><br><span class="line"><span class="built_in">print</span>(new_str)  <span class="comment"># 输出：hello world and itcast and itheima and Python</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305142012488.png" alt="image-20190129213558850"></p><ul class="lvl-0"><li class="lvl-2"><p>strip()：删除字符串两侧空白字符。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mystr)</span><br><span class="line">new_str = mystr.strip()</span><br><span class="line"><span class="built_in">print</span>(new_str)  <span class="comment"># 输出：hello world and itcast and itheima and Python</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305142012790.png" alt="image-20190129213637584"></p><h4 id="字符串对齐">字符串对齐</h4><ul class="lvl-0"><li class="lvl-2"><p>ljust()：返回一个原字符串左对齐,并使用指定字符(默认空格)<strong>填充至对应长度 的新字符串</strong>。</p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.ljust(长度, 填充字符)</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>输出效果</p></li></ol><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305142012780.png" alt="image-20190130141125560" style="zoom:67%;" /><ul class="lvl-0"><li class="lvl-2"><p>rjust()：返回一个原字符串右对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</p></li><li class="lvl-2"><p>center()：返回一个原字符串居中对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</p></li></ul><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/.4ephlln0l7o0.webp" alt="1" style="zoom:67%;" /><h3 id="判断">判断</h3><p>所谓判断即是判断真假，<strong>返回的结果是布尔型数据类型：True 或 False</strong>。</p><h4 id="判断是否以子串开头或结尾">判断是否以子串开头或结尾</h4><ul class="lvl-0"><li class="lvl-2"><p>startswith()：检查字符串是否是以指定子串开头，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.startswith(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>快速体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python   &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"><span class="built_in">print</span>(mystr.startswith(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果False</span></span><br><span class="line"><span class="built_in">print</span>(mystr.startswith(<span class="string">&#x27;hello&#x27;</span>, <span class="number">5</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>endswith()：：检查字符串是否是以指定子串结尾，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</p></li></ul><ol><li class="lvl-3"><p>语法</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.endswith(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>快速体验</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"><span class="built_in">print</span>(mystr.endswith(<span class="string">&#x27;Python&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：False</span></span><br><span class="line"><span class="built_in">print</span>(mystr.endswith(<span class="string">&#x27;python&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：False</span></span><br><span class="line"><span class="built_in">print</span>(mystr.endswith(<span class="string">&#x27;Python&#x27;</span>, <span class="number">2</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><h4 id="判断字符串是否包含字符或数字等">判断字符串是否包含字符或数字等</h4><ul class="lvl-0"><li class="lvl-2"><p>isalpha()：如果字符串<strong>至少有一个字符并且所有字符都是字母</strong>则返回 True, 否则返回 False。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">mystr2 = <span class="string">&#x27;hello12345&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"><span class="built_in">print</span>(mystr1.isalpha())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：False</span></span><br><span class="line"><span class="built_in">print</span>(mystr2.isalpha())</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>isdigit()：如果字符串<strong>只包含数字</strong>则返回 True 否则返回 False。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;aaa12345&#x27;</span></span><br><span class="line">mystr2 = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果： False</span></span><br><span class="line"><span class="built_in">print</span>(mystr1.isdigit())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：False</span></span><br><span class="line"><span class="built_in">print</span>(mystr2.isdigit())</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>isalnum()：如果字符串<strong>至少有一个字符并且所有字符都是字母或数字</strong>则返 回 True,否则返回 False。</p><p><font color=red>isalnum()：<strong>数字或字母或组合</strong></font></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;aaa12345&#x27;</span></span><br><span class="line">mystr2 = <span class="string">&#x27;12345-&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"><span class="built_in">print</span>(mystr1.isalnum())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：False</span></span><br><span class="line"><span class="built_in">print</span>(mystr2.isalnum())</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>isspace()：如果字符串中<strong>只包含空白</strong>，则返回 True，否则返回 False。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;1 2 3 4 5&#x27;</span></span><br><span class="line">mystr2 = <span class="string">&#x27;     &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：False</span></span><br><span class="line"><span class="built_in">print</span>(mystr1.isspace())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"><span class="built_in">print</span>(mystr2.isspace())</span><br></pre></td></tr></table></figure><h2 id="Python-转义字符">Python 转义字符</h2><p>在需要在字符中使用特殊字符时，python 用反斜杠 <code>\</code> 转义字符。如下表：</p><table><thead><tr><th style="text-align:left">转义字符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left"><code>\</code>(在行尾时)</td><td style="text-align:left">续行符</td><td style="text-align:left">源程序：<code>print(&quot;line1 \ ... line2 \ ... line3&quot;)</code> <br/>输出：<code> line1 line2 line3</code></td></tr><tr><td style="text-align:left"><code>\\</code></td><td style="text-align:left">反斜杠符号</td><td style="text-align:left">源程序：<code>print(&quot;\\&quot;) </code> <br/>输出：<code> \</code></td></tr><tr><td style="text-align:left"><code>'</code></td><td style="text-align:left">单引号</td><td style="text-align:left">源程序：<code> print(''')</code> <br/>输出： <code>'</code></td></tr><tr><td style="text-align:left"><code>&quot;</code></td><td style="text-align:left">双引号</td><td style="text-align:left">源程序：<code>print(&quot; &quot; &quot;)</code> <br/>输出：<code>&quot;</code></td></tr><tr><td style="text-align:left"><code>\a</code></td><td style="text-align:left">响铃</td><td style="text-align:left">源程序：<code>print(&quot;\a&quot;)</code><br/>输出：执行后电脑有响声。</td></tr><tr><td style="text-align:left"><code>\b</code></td><td style="text-align:left">退格(Backspace)</td><td style="text-align:left">源程序：<code>print(&quot;Hello \b World!&quot;)</code> <br/> 输出：<code>Hello World!</code></td></tr><tr><td style="text-align:left"><code>\000</code></td><td style="text-align:left">空</td><td style="text-align:left">源程序：<code>&gt;&gt;&gt; print(&quot;\000&quot;) </code> <br/> 输出：<code> </code></td></tr><tr><td style="text-align:left"><code>\n</code></td><td style="text-align:left">换行</td><td style="text-align:left">源程序：<code>&gt;&gt;&gt; print(&quot;\n&quot;)</code> <br/> 输出：<br/></td></tr><tr><td style="text-align:left"><code>\v</code></td><td style="text-align:left">纵向制表符</td><td style="text-align:left">源程序：<code>&gt;&gt;&gt; print(&quot;Hello \v World!&quot;)</code> <br/> 输出： <code>Hello</code>       <br/><code> World!</code></td></tr><tr><td style="text-align:left"><code>\t</code></td><td style="text-align:left">横向制表符</td><td style="text-align:left">源程序：<code>print(&quot;Hello \t World!&quot;)</code> <br/>输出：<code>Hello    World!</code></td></tr><tr><td style="text-align:left"><code>\r</code></td><td style="text-align:left">回车，将 <strong>\r</strong> 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 <strong>\r</strong> 后面的内容完全替换完成。</td><td style="text-align:left">源程序：<code>print('google runoob taobao \r 123456'))</code> <br/>输出：<code> 123456 runoob taobao</code></td></tr><tr><td style="text-align:left"><code>\f</code></td><td style="text-align:left">换页</td><td style="text-align:left">源程序：<code>print(&quot;Hello \f World!&quot;)</code> <br/>输出：<code>Hello</code>       <br/><code> World!</code></td></tr><tr><td style="text-align:left"><code>\yyy</code></td><td style="text-align:left">八进制数，y 代表 0~7 的字符，例如：\012 代表换行。</td><td style="text-align:left">源程序：<code>print(&quot;\110\145\154\154\157\40\127\157\162\154\144\41&quot;)</code> <br/>输出：Hello World!</td></tr><tr><td style="text-align:left"><code>\xyy</code></td><td style="text-align:left">十六进制数，以 \x 开头，y 代表的字符，例如：\x0a 代表换行</td><td style="text-align:left">源程序：<code>print(&quot;\x48\x65\x6c\x6c\x6f\x20\x57\x6f\x72\x6c\x64\x21&quot;</code> <br/>输出：Hello World!</td></tr><tr><td style="text-align:left"><code>\other</code></td><td style="text-align:left">其它的字符以普通格式输出</td><td style="text-align:left"></td></tr></tbody></table><p>使用 <strong>\r</strong> 实现百分比进度：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\r&#123;:3&#125;%&quot;</span>.<span class="built_in">format</span>(i),end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.05</span>)</span><br></pre></td></tr></table></figure><h3 id="示例-2">示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\&#x27;Hello, world!\&#x27;&#x27;</span>)  <span class="comment"># 输出：&#x27;Hello, world!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, world!\nHow are you?&quot;</span>)  <span class="comment"># 输出：Hello, world!</span></span><br><span class="line">                                        <span class="comment">#       How are you?</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, world!\tHow are you?&quot;</span>)  <span class="comment"># 输出：Hello, world!    How are you?</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello,\b world!&quot;</span>)  <span class="comment"># 输出：Hell world!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello,\f world!&quot;</span>)  <span class="comment"># 输出：</span></span><br><span class="line">                           <span class="comment"># Hello,</span></span><br><span class="line">                           <span class="comment">#  world!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The ASCII value of A is&quot;</span>, <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment"># 输出：The ASCII value of A is 65</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\x41 is the ASCII code for A&quot;</span>)  <span class="comment"># 输出：A is the ASCII code for A</span></span><br></pre></td></tr></table></figure><h2 id="Python-字符串运算符">Python 字符串运算符</h2><p>下表实例变量 a 值为字符串 “Hello”，b 变量值为 “Python”：</p><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">字符串连接</td><td style="text-align:left">a + b 输出结果： HelloPython</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">重复输出字符串</td><td style="text-align:left">a*2 输出结果：HelloHello</td></tr><tr><td style="text-align:left">[]</td><td style="text-align:left">通过索引获取字符串中字符</td><td style="text-align:left">a[1] 输出结果 <strong>e</strong></td></tr><tr><td style="text-align:left">[ : ]</td><td style="text-align:left">截取字符串中的一部分，遵循<strong>左闭右开</strong>原则，str[0:2] 是不包含第 3 个字符的。</td><td style="text-align:left">a[1:4] 输出结果 <strong>ell</strong></td></tr><tr><td style="text-align:left">in</td><td style="text-align:left">成员运算符 - 如果字符串中包含给定的字符返回 True</td><td style="text-align:left"><strong>‘H’ in a</strong> 输出结果 True</td></tr><tr><td style="text-align:left">not in</td><td style="text-align:left">成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td style="text-align:left"><strong>‘M’ not in a</strong> 输出结果 True</td></tr><tr><td style="text-align:left">r/R</td><td style="text-align:left">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 <strong>r</strong>（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td><td style="text-align:left"><code>print( r'\n' ) print( R'\n' )</code></td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">格式字符串</td><td style="text-align:left">请看前面章节关于格式化字符串内容。</td></tr></tbody></table><h3 id="示例-3">示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;Python&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a + b 输出结果：&quot;</span>, a + b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a * 2 输出结果：&quot;</span>, a * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a[1] 输出结果：&quot;</span>, a[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a[1:4] 输出结果：&quot;</span>, a[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="string">&quot;H&quot;</span> <span class="keyword">in</span> a) :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;H 在变量 a 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;H 不在变量 a 中&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="string">&quot;M&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> a) :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;M 不在变量 a 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;M 在变量 a 中&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">r&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">R&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a + b 输出结果： HelloPython</span><br><span class="line">a * <span class="number">2</span> 输出结果： HelloHello</span><br><span class="line">a[<span class="number">1</span>] 输出结果： e</span><br><span class="line">a[<span class="number">1</span>:<span class="number">4</span>] 输出结果： ell</span><br><span class="line">H 在变量 a 中</span><br><span class="line">M 不在变量 a 中</span><br><span class="line">\n</span><br><span class="line">\n</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><ul class="lvl-0"><li class="lvl-2"><p>下标</p><ul class="lvl-2"><li class="lvl-4">计算机为数据序列中每个元素分配的从0开始的编号</li></ul></li><li class="lvl-2"><p>切片</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">序列名[开始位置下标:结束位置下标:步长]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>常用操作方法</p><ul class="lvl-2"><li class="lvl-4">find()</li><li class="lvl-4">index()</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（五）流程控制——循环语句</title>
      <link href="/pythonbasic5.html"/>
      <url>/pythonbasic5.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">了解循环</li><li class="lvl-2">while语法【重点】</li><li class="lvl-2">while应用</li><li class="lvl-2">break和continue</li><li class="lvl-2">while循环嵌套【重点】</li><li class="lvl-2">while循环嵌套应用【难点】</li><li class="lvl-2">for循环</li></ul><h1 id="循环语句">循环语句</h1><h2 id="循环简介">循环简介</h2><h3 id="循环的作用">循环的作用</h3><blockquote><p>思考：假如我有个女朋友，有一天我们闹矛盾生气了，女朋友说：道歉，说100遍“媳妇儿，我错了”。这个时候程序员会怎么做？</p><p>答：100遍<code>print('媳妇儿，我错了')</code></p></blockquote><blockquote><p>思考：复制粘贴100次吗？</p><p>答：重复执行100次一样的代码，程序中循环即可</p></blockquote><p>循环的作用：让代码更高效的重复执行。</p><h3 id="循环的分类">循环的分类</h3><p>在Python中，循环分为<code>while</code>和<code>for</code>两种，最终实现效果相同。</p><h2 id="while的语法">while的语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件成立重复执行的代码<span class="number">1</span></span><br><span class="line">    条件成立重复执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>执行流程图：</p><div align='center'>  <img src='https://www.runoob.com/wp-content/uploads/2013/11/886A6E10-58F1-4A9B-8640-02DBEFF0EF9A.jpg' width=450px style="zoom:78%;">  <p  style='text-align:center;font-size:15px;font-family:kaiti;color:red'><b>while循环语句执行流程图</b></p></div><p><mark>需要注意冒号和缩进。另外，在 Python 中没有 do…while 循环。</mark></p><h3 id="示例">示例</h3><p>需求：复现重复执行100次<code>print('媳妇儿，我错了')</code>（输出更简洁一些，我们这里设置5次）。</p><p>分析：初始值是0次，终点是5次，重复做的事情输出“媳妇儿， 我错了”。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 循环的计数器</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿，我错了&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;任务结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="while的应用">while的应用</h2><h3 id="应用一：计算1-100累加和">应用一：计算1-100累加和</h3><p>分析：1-100的累加和，即1 + 2 + 3 + 4 +….，即前两个数字的相加结果 + 下一个数字( 前一个数字 + 1)。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    result += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出5050</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><blockquote><p>注意：为了验证程序的准确性，可以先改小数值，验证结果正确后，再改成1-100做累加。</p></blockquote><h3 id="应用二：计算1-100偶数累加和">应用二：计算1-100偶数累加和</h3><p>分析：1-100的偶数和，即 2 + 4 + 6 + 8…，得到偶数的方法如下：</p><ul class="lvl-0"><li class="lvl-2"><p>偶数即是和2取余结果为0的数字，可以加入条件语句判断是否为偶数，为偶数则累加</p></li><li class="lvl-2"><p>初始值为0 / 2 , 计数器每次累加2</p></li></ul><h4 id="方法一（推荐）：条件判断和2取余数则累加">方法一（推荐）：条件判断和2取余数则累加</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一：条件判断和2取余数为0则累加计算</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        result += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出2550</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h4 id="方法二：计数器控制">方法二：计数器控制</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法二：计数器控制增量为2</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    result += i</span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出2550</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="break和continue">break和continue</h2><p>break和continue是循环中满足一定条件退出循环的两种不同方式。</p><h3 id="理解">理解</h3><p>举例：一共吃5个苹果，吃完第一个，吃第二个…，这里&quot;吃苹果&quot;的动作是不是重复执行？</p><p>情况一：如果吃的过程中，吃完第三个吃饱了，则不需要再吃第4个和第五个苹果，即是吃苹果的动作停止，这里就是break控制循环流程，即<mark>终止此循环</mark>。</p><p>情况二：如果吃的过程中，吃到第三个吃出一个大虫子…,是不是这个苹果就不吃了，开始吃第四个苹果，这里就是continue控制循环流程，即<mark>退出当前一次循环继而执行下一次循环代码</mark>。</p><h4 id="情况一：break">情况一：break</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;吃饱了不吃了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;吃了第<span class="subst">&#123;i&#125;</span>个苹果&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131806948.png" alt="image-20190124114340900" style="zoom:50%;" /><h4 id="情况二：continue">情况二：continue</h4><p><mark>遇到continue会跳出本次循环中continue后面的代码，而进入下一次循环入口判断。</mark></p><p><strong>在continue之前一定要修改计数器，否则会陷入死循环</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;大虫子，第<span class="subst">&#123;i&#125;</span>个不吃了&#x27;</span>)</span><br><span class="line">        <span class="comment"># 在continue之前一定要修改计数器，否则会陷入死循环</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;吃了第<span class="subst">&#123;i&#125;</span>个苹果&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131807181.png" alt="image-20190124114514775"></p><h2 id="while循环嵌套">while循环嵌套</h2><h3 id="应用场景">应用场景</h3><p>故事梗概：有天女朋友又生气了，惩罚：说3遍“媳妇儿， 我错了”，这个程序是不是循环即可？但如果女朋友说：还要刷今天晚饭的碗，这个程序怎么书写？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿， 我错了&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;刷晚饭的碗&#x27;</span>)</span><br></pre></td></tr></table></figure><p>但如果女朋友还是生气，把这套惩罚要连续3天都执行，有如何书写程序？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    <span class="keyword">while</span> 条件:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿， 我错了&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;刷晚饭的碗&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="语法">语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">while</span> 条件<span class="number">2</span>:</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        ......</span><br></pre></td></tr></table></figure><blockquote><p>总结：所谓while循环嵌套，就是一个while里面嵌套一个while的写法，每个while和之前的基础语法是相同的。</p></blockquote><h3 id="示例：复现场景">示例：复现场景</h3><h4 id="代码">代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt; <span class="number">3</span>:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿，我错了&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;刷晚饭的碗&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;一套惩罚结束----------------&#x27;</span>)</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="执行结果">执行结果</h4><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131807182.png" alt="image-20190104161506542"></p><h4 id="理解执行流程">理解执行流程</h4><p>当内部循环执行完成之后，再执行下一次外部循环的条件判断。</p><div align='center'>  <img src='https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131807183.png'  style="zoom:88%;width=1450px;">  <p  style='text-align:center;font-size:15px;font-family:kaiti;color:red'><b>while循环嵌套执行流程图</b></p></div><h2 id="while循环嵌套应用">while循环嵌套应用</h2><h3 id="应用一：打印星号-正方形">应用一：打印星号(正方形)</h3><h4 id="需求">需求</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><h4 id="代码-2">代码</h4><p>分析：一行输出5个星号，重复打印5行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重复打印5行星星</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">4</span>:</span><br><span class="line">    <span class="comment"># 一行星星的打印</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">4</span>:</span><br><span class="line">        <span class="comment"># 一行内的星星不能换行，取消print默认结束符\n</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每行结束要换行，这里借助一个空的print，利用print默认结束符换行</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="应用二：打印星号-三角形">应用二：打印星号(三角形)</h3><h4 id="需求-2">需求</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><h4 id="代码-3">代码</h4><p>分析：<mark>一行输出星星的个数和行号是相等的</mark>，每行：重复打印行号数字个星号，将打印行星号的命令重复执行5次实现打印5行。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重复打印5行星星</span></span><br><span class="line"><span class="comment"># j表示行号</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">4</span>:</span><br><span class="line">    <span class="comment"># 一行星星的打印</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># i表示每行里面星星的个数，这个数字要和行号相等所以i要和j联动</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="九九乘法表">九九乘法表</h3><h4 id="执行结果-2">执行结果</h4><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131807184.png" alt="image-20190104163553616"></p><h4 id="代码-4">代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= i:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d*%d=%-2d&#x27;</span> % (i, j, i*j), end=<span class="string">&#x27;\t&#x27;</span>)  <span class="comment"># 使输出的值右对齐 &#x27;%d * %d =%-2d&#x27;===&gt; % (i, j, i*j),</span></span><br><span class="line"><span class="comment"># print(f&#x27;&#123;i&#125;*&#123;j&#125;=&#123;i*j&#125;&#x27;, end=&#x27;\t&#x27;)</span></span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="for循环">for循环</h2><h3 id="语法-2">语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    重复执行的代码<span class="number">1</span></span><br><span class="line">    重复执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p><mark>序列有：字符串 列表 元组 集合等</mark></p><div align='center'>  <img src='https://www.runoob.com/wp-content/uploads/2013/11/A71EC47E-BC53-4923-8F88-B027937EE2FF.jpg' width=450px style="zoom:78%;">  <p  style='text-align:center;font-size:15px;font-family:kaiti;color:red'><b>for循环语句执行流程图</b></p></div><h3 id="示例-2">示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131807186.png" alt="image-20190104164152311"></p><h3 id="break">break</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">  <span class="comment"># 当某些条件成立 退出循环 -- break: 条件 i取到字符e</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;遇到e不打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131807187.png" alt="image-20190104165242555"></p><h3 id="continue">continue</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">  <span class="comment"># 当某些条件成立 退出当前循环，进入下一次循环 -- continue: 条件 i取到字符e</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;遇到e不打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131807188.png" alt="image-20190104165413160"></p><h2 id="else">else</h2><p>循环可以和else配合使用，else下方缩进的代码指的是<mark>当循环正常结束之后要执行的代码</mark>。</p><h3 id="while…else">while…else</h3><p>需求：女朋友生气了，要惩罚：连续说5遍“媳妇儿，我错了”，如果道歉正常完毕女朋友就原谅我了，这个程序怎么写？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿，我错了&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;媳妇儿原谅我了...&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>思考： 这个print是不是没有循环也能执行？</p></blockquote><h4 id="语法-3">语法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件成立重复执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    循环正常结束之后要执行的代码</span><br></pre></td></tr></table></figure><h4 id="示例-3">示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿，我错了&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇原谅我了，真开心，哈哈哈哈&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131807189.png" alt="image-20190125111816497"></p><h4 id="退出循环的方式">退出循环的方式</h4><p>需求：女朋友生气，要求道歉5遍：媳妇儿，我错了。道歉到第三遍的时候，媳妇埋怨这一遍说的不真诚，是不是就是要退出循环了？这个退出有两种可能性：</p><ul class="lvl-0"><li class="lvl-2"><p>更生气，不打算原谅，也不需要道歉了，程序如何书写？</p></li><li class="lvl-2"><p>只一遍不真诚，可以忍受，继续下一遍道歉，程序如何书写？</p></li></ul><ol><li class="lvl-3"><p>break</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这遍说的不真诚&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿，我错了&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇原谅我了，真开心，哈哈哈哈&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131807190.png" alt="image-20190125111952693"></p><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即<mark>如果是break终止循环的情况，else下方缩进的代码将不执行。</mark></p></blockquote><ol start="2"><li class="lvl-3"><p>continue</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这遍说的不真诚&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span> <span class="comment"># 加入计数器 否则会陷入死循环</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿，我错了&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇原谅我了，真开心，哈哈哈哈&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131807191.png" alt="image-20190125112111170"></p><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以<mark>该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</mark></p></blockquote><h3 id="for…else">for…else</h3><h4 id="语法-4">语法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    重复执行的代码</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    循环正常结束之后要执行的代码</span><br></pre></td></tr></table></figure><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p></blockquote><h4 id="示例-4">示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;循环正常结束之后执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="退出循环的方式-2">退出循环的方式</h4><ol><li class="lvl-3"><p>break终止循环</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;遇到e不打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;循环正常结束之后执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131807192.png" alt="image-20190104165551501"></p><blockquote><p>没有执行else缩进的代码。</p></blockquote><ol start="2"><li class="lvl-3"><p>continue控制循环</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;遇到e不打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;循环正常结束之后执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/202305131807193.png" alt="image-20190104165714740"></p><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote><h2 id="break-和-continue-语句">break 和 continue 语句</h2><p><strong>break 执行流程图：</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2014/09/E5A591EF-6515-4BCB-AEAA-A97ABEFC5D7D.jpg" alt="img"></p><p><strong>continue 执行流程图：</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2014/09/8962A4F1-B78C-4877-B328-903366EA1470.jpg" alt="img"></p><p><strong>while 语句代码执行过程：</strong></p><img src="https://static.runoob.com/images/mix/python-while.webp" alt="img" style="zoom: 43%;" /><p><strong>for 语句代码执行过程：</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2014/05/break-continue-536.png" alt="img"></p><p><strong>break</strong> 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</p><p><strong>continue</strong> 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p><h1 id="总结">总结</h1><ul class="lvl-0"><li class="lvl-2"><p>循环的作用：控制代码重复执行</p></li><li class="lvl-2"><p>while语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件成立重复执行的代码<span class="number">1</span></span><br><span class="line">    条件成立重复执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>while循环嵌套语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">while</span> 条件<span class="number">2</span>:</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        ......</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>for循环语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    重复执行的代码<span class="number">1</span></span><br><span class="line">    重复执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>break退出整个循环</p></li><li class="lvl-2"><p>continue退出本次循环，继续执行下一次重复执行的代码</p></li><li class="lvl-2"><p>else</p><ul class="lvl-2"><li class="lvl-4">while和for都可以配合else使用</li><li class="lvl-4">else下方缩进的代码含义：当循环正常结束后执行的代码</li><li class="lvl-4">break终止循环不会执行else下方缩进的代码</li><li class="lvl-4">continue退出循环的方式执行else下方缩进的代码</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Namesilo与Vercel域名配置</title>
      <link href="/techdoc2.html"/>
      <url>/techdoc2.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bd84b0698c79d496b46e566857085192e6eb621b5c009d73e4ada523ed3d6992"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 技术文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> 域名解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（四）流程控制——条件语句</title>
      <link href="/pythonbasic4.html"/>
      <url>/pythonbasic4.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">条件语句作用</li><li class="lvl-2">if语法</li><li class="lvl-2">if…else…</li><li class="lvl-2">多重判断</li><li class="lvl-2">if嵌套</li></ul><h1 id="了解条件语句">了解条件语句</h1><p>假设一个场景：</p><ul class="lvl-0"><li class="lvl-2"><p>同学们这个年龄去过网吧吗？</p></li><li class="lvl-2"><p>去网吧进门想要上网必须做的一件事是做什么？（考虑重点）</p></li><li class="lvl-2"><p>为什么要把身份证给工作人员？</p></li><li class="lvl-2"><p>是不是就是为了判断是否成年？</p></li><li class="lvl-2"><p>是不是如果成年可以上网？如果不成年则不允许上网？</p></li></ul><p>其实这里所谓的判断就是条件语句，即<strong>条件成立执行某些代码，条件不成立则不执行这些代码</strong>。</p><h1 id="if条件语句">if条件语句</h1><h2 id="if-语法">if 语法</h2><h3 id="语法">语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码<span class="number">1</span></span><br><span class="line">    条件成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h3 id="快速体验">快速体验</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;条件成立执行的代码1&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;条件成立执行的代码2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下方的代码没有缩进到if语句块，所以和if条件无关</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是无论条件是否成立都要执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190103113457876-6486497.png" alt="image-20190103113457876"></p><h2 id="实例：上网">实例：上网</h2><p>需求分析：如果用户年龄大于等于18岁，即成年，输出&quot;已经成年，可以上网&quot;。</p><h3 id="简单版">简单版</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已经成年，可以上网&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;系统关闭&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="进阶版">进阶版</h3><p>新增需求：用户可以输出自己的年龄，然后系统进行判断是否成年，成年则输出&quot;您的年龄是’用户输入的年龄’，已经成年，可以上网&quot;。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># input接受用户输入的数据是字符串类型，条件是age和整型18做判断，所以这里要int转换数据类型</span></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您的年龄&#x27;</span>))  <span class="comment"># 将input输入的已被字符串处理化的数据强制转换为整数类型（int)</span></span><br><span class="line"><span class="comment"># print(type(age))</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的年龄是<span class="subst">&#123;age&#125;</span>,已经成年，可以上网&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;系统关闭&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注：此处需要注意：<mark>将input输入的已被字符串处理化的数据强制转换为整数类型（int)</mark></p><h2 id="if…else…">if…else…</h2><p>作用：条件成立执行if下方的代码; 条件不成立执行else下方的代码。</p><blockquote><p>思考：网吧上网的实例，如果成年，允许上网，如果不成年呢？是不是应该回复用户不能上网？</p></blockquote><h3 id="语法-2">语法</h3><p><code>if 条件：  XXX else: </code></p><p>切记：<mark>条件和else后面都需要带冒号<code>:</code></mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码<span class="number">1</span></span><br><span class="line">    条件成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件不成立执行的代码<span class="number">1</span></span><br><span class="line">    条件不成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h3 id="test：网吧上网">test：网吧上网</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您的年龄：&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,已经成年，可以上网&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,未成年，请自行回家写作业&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;系统关闭&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果条件成立执行了某些代码，那么其他的情况的代码将不会执行。</p></blockquote><h2 id="多重判断">多重判断</h2><blockquote><p>思考：中国合法工作年龄为18-60岁，即如果年龄小于18的情况为童工，不合法；如果年龄在18-60岁之间为合法工龄；大于60岁为法定退休年龄。</p></blockquote><h3 id="语法-3">语法</h3><p><code>else if 条件:</code> 等同于<code> elif 条件:</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码<span class="number">1</span></span><br><span class="line">    条件<span class="number">1</span>成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>：</span><br><span class="line">  条件<span class="number">2</span>成立执行的代码<span class="number">1</span></span><br><span class="line">    条件<span class="number">2</span>成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    以上条件都不成立执行执行的代码</span><br></pre></td></tr></table></figure><blockquote><p>多重判断也可以和else配合使用。一般else放到整个if语句的最后，表示以上条件都不成立的时候执行的代码。</p></blockquote><h3 id="实例：工龄判断">实例：工龄判断</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入年龄:&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的年龄是<span class="subst">&#123;age&#125;</span>，童工&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> (age &gt;= <span class="number">18</span>) <span class="keyword">and</span> (age &lt; <span class="number">60</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的年龄是<span class="subst">&#123;age&#125;</span>，合法可聘用&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">60</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的年龄是<span class="subst">&#123;age&#125;</span>，退休年龄&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>拓展：<code>age &gt;= 18 and age &lt;= 60</code>可以化简为<code>18 &lt;= age &lt;= 60</code>。</p></blockquote><h2 id="if嵌套">if嵌套</h2><blockquote><p>思考：坐公交：如果有钱可以上车，没钱不能上车；上车后如果有空座，则可以坐下；如果没空座，就要站着。怎么书写程序？</p></blockquote><h3 id="语法-4">语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>：</span><br><span class="line">  条件<span class="number">1</span>成立执行的代码</span><br><span class="line">  条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>：</span><br><span class="line">    条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br></pre></td></tr></table></figure><blockquote><p>注意：条件2的if也是处于条件1成立执行的代码的缩进关系内部。</p></blockquote><h3 id="实例：坐公交">实例：坐公交</h3><h4 id="判断是否能上车">判断是否能上车</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 如果有钱，则可以上车</span></span><br><span class="line"><span class="string">    2. 上车后，如果有空座，可以坐下</span></span><br><span class="line"><span class="string">    上车后，如果没有空座，则站着等空座位</span></span><br><span class="line"><span class="string">如果没钱，不能上车</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 假设用 money = 1 表示有钱, money = 0表示没有钱</span></span><br><span class="line">money = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> money == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;土豪，不差钱，顺利上车&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没钱，不能上车，追着公交车跑&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="判断是否能坐下">判断是否能坐下</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 如果有钱，则可以上车</span></span><br><span class="line"><span class="string">    2. 上车后，如果有空座，可以坐下</span></span><br><span class="line"><span class="string">    上车后，如果没有空座，则站着等空座位</span></span><br><span class="line"><span class="string">如果没钱，不能上车</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 假设用 money = 1 表示有钱, money = 0表示没有钱; seat = 1 表示有空座，seat = 0 表示没有空座</span></span><br><span class="line">money = <span class="number">1</span></span><br><span class="line">seat = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> money == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;土豪，不差钱，顺利上车&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> seat == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;有空座，可以坐下&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有空座，站等&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没钱，不能上车，追着公交车跑&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="应用：猜拳游戏">应用：猜拳游戏</h2><p><strong>需求分析：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>参与游戏的角色</p><ul class="lvl-2"><li class="lvl-4">玩家<ul class="lvl-4"><li class="lvl-6">手动出拳</li></ul></li><li class="lvl-4">电脑<ul class="lvl-4"><li class="lvl-6">随机出拳</li></ul></li></ul></li><li class="lvl-2"><p>判断输赢</p><ul class="lvl-2"><li class="lvl-4">玩家获胜</li></ul><table><thead><tr><th style="text-align:center">玩家</th><th>电脑</th></tr></thead><tbody><tr><td style="text-align:center">石头</td><td>剪刀</td></tr><tr><td style="text-align:center">剪刀</td><td>布</td></tr><tr><td style="text-align:center">布</td><td>石头</td></tr></tbody></table><ul class="lvl-2"><li class="lvl-4"><p>平局</p><ul class="lvl-4"><li class="lvl-6">玩家出拳 和 电脑出拳相同</li></ul></li><li class="lvl-4"><p>电脑获胜</p></li></ul></li></ul><p><strong>随机做法：</strong></p><ul class="lvl-0"><li class="lvl-2"><ol><li class="lvl-5">导出random模块</li></ol></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><ol start="2"><li class="lvl-5"><p>使用random模块中的随机整数功能</p><p>random.randint(开始,结束)</p></li></ol></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.randint(<span class="number">0</span>, <span class="number">2</span>)  <span class="comment"># 随机数 类型是int 随机范围:0 1 2</span></span><br></pre></td></tr></table></figure><p><strong>具体实现：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">提示：0-石头，1-剪刀，2-布</span></span><br><span class="line"><span class="string">1. 出拳</span></span><br><span class="line"><span class="string">玩家输入出拳</span></span><br><span class="line"><span class="string">电脑随机出拳</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 判断输赢</span></span><br><span class="line"><span class="string">玩家获胜</span></span><br><span class="line"><span class="string">平局</span></span><br><span class="line"><span class="string">电脑获胜</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入random模块</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1，出拳</span></span><br><span class="line"><span class="comment"># 玩家</span></span><br><span class="line">player = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;玩家请出拳：0--石头；1--剪刀；2--布；&#x27;</span>))</span><br><span class="line"><span class="comment"># 电脑随机出拳</span></span><br><span class="line">computer = random.randint(<span class="number">0</span>, <span class="number">2</span>)  <span class="comment"># 随机数 类型是int 随机范围0 1 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;电脑出的是：<span class="subst">&#123;computer&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.判断输赢</span></span><br><span class="line"><span class="comment"># 利用与 或 非来作为if条件逻辑判断</span></span><br><span class="line"><span class="keyword">if</span> ((player == <span class="number">0</span>) <span class="keyword">and</span> (computer == <span class="number">1</span>)) <span class="keyword">or</span> ((player == <span class="number">2</span>) <span class="keyword">and</span> (computer == <span class="number">0</span>)) <span class="keyword">or</span> ((player == <span class="number">1</span>) <span class="keyword">and</span> (computer == <span class="number">2</span>)):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;玩家获胜&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> player == computer:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;平局&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;电脑获胜&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="三目运算符">三目运算符</h2><p>三目运算符也叫三元运算符。</p><p><strong>语法如下：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">条件成立执行的表达式 <span class="keyword">if</span> 条件 <span class="keyword">else</span> 条件不成立执行的表达式</span><br></pre></td></tr></table></figure><p><strong>在C语言中</strong>，只有一个三目操作符（也称条件操作符）即：</p><blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">exp1 ? exp2 : exp3</span><br></pre></td></tr></table></figure><p><strong>表达式1若为真，则由表达式2来赋值；表达式1若为假，则由表达式3来赋值.</strong><br>其求值规则为：<mark><strong>如果表达式1的值为真，则以表达式2的值作为整个条件表达式的值，否则以表达式3的值作为整个条件表达式的值。条件表达式通常用于赋值语句之中。</strong></mark></p></blockquote><p><strong>快速体验：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">c = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求 ： 有两个变量，比较大小 如果变量1大于变量2 执行变量1-变量2 否则 执行变量2-变量1</span></span><br><span class="line">a = <span class="number">110</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = a - b <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b - a</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><h1 id="match…case语句-此语句只能用于python3-10以上版本">match…case语句(此语句只能用于python3.10以上版本)</h1><p>在 Python 中没有 <strong>switch…case</strong> 语句，但在 Python3.10 版本添加了 <strong>match…case</strong>，功能也类似，详见下文<a href="https://www.dongwm.com/post/match-case/">https://www.dongwm.com/post/match-case/</a></p><p>match 后的对象会依次与 case 后的内容进行匹配，如果匹配成功，则执行匹配到的表达式，否则直接跳过，<strong>_</strong> 可以匹配一切。</p><h2 id="语法格式：">语法格式：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> subject(变量名):</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_1&gt;:</span><br><span class="line">        &lt;action_1&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_2&gt;:</span><br><span class="line">        &lt;action_2&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_3&gt;:</span><br><span class="line">        &lt;action_3&gt;</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        &lt;action_wildcard&gt;</span><br></pre></td></tr></table></figure><p><strong>case _:</strong> 类似于 C 和 Java 中的 <strong>default:</strong>，当其他 case 都无法匹配时，匹配这条，保证永远会匹配成功。</p><h2 id="示例1">示例1</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">http_error</span>(<span class="params">status</span>):</span><br><span class="line">    <span class="keyword">match</span> status:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bad request&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Not found&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">418</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;I&#x27;m a teapot&quot;</span></span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Something&#x27;s wrong with the internet&quot;</span></span><br><span class="line"></span><br><span class="line">mystatus=<span class="number">400</span></span><br><span class="line"><span class="built_in">print</span>(http_error(<span class="number">400</span>))</span><br></pre></td></tr></table></figure><p>以上是一个输出 HTTP 状态码的实例，输出结果为：<code>Bad request</code></p><p><code>match</code>后面跟要匹配的变量，<code>case</code>后面跟不同的条件，之后是符合条件需要执行的语句。最后一个case加下划线表示缺省匹配，如果前面的条件没有匹配上就跑到这个case里面执行，相当于之前的<code>else</code>。</p><p>这其实是一个典型的<code>switch-case</code>用法，如果只是这样，我也觉得确实没必要添加这个新语法，一方面代码没有做到优化，一方面缩进反而更多了。</p><p>但是<code>match-case</code>语法能做的事情远超C/Go这些语言里的<code>switch-case</code>，它其实是Scala, Erlang等语言里面的<code>match-case</code>，它支持复杂的模式匹配，接下来我会通过多个模式的例子详细演示这个新的语法的灵活性和pythonic。</p><h2 id="示例2">示例2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Select</span>(<span class="params">j</span>):</span><br><span class="line"><span class="comment"># if j == 0:</span></span><br><span class="line"><span class="comment"># print(&#x27;-----请选择功能-----&#x27;)</span></span><br><span class="line"><span class="comment"># print(&quot;查询余额&quot;)</span></span><br><span class="line"><span class="comment"># print(&quot;存款&quot;)</span></span><br><span class="line"><span class="comment"># print(&quot;取款&quot;)</span></span><br><span class="line"><span class="comment"># print(&#x27;-----请选择功能-----&#x27;)</span></span><br><span class="line"><span class="keyword">if</span> j == <span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;查询余额，余额XXX元人民币整&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> j == <span class="number">2</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;取款XXX元人民币整&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> j == <span class="number">3</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;存款XXX元人民币整&quot;</span>)</span><br><span class="line">    </span><br><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请选择您的下一步:&quot;</span>))</span><br><span class="line"><span class="keyword">match</span> number:</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment"># 显示功能界面: 显示余额</span></span><br><span class="line">Select(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="comment"># 显示功能界面: 取款</span></span><br><span class="line">Select(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment"># 显示功能界面: 存款</span></span><br><span class="line">Select(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">case</span> _:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对不起，该功能暂未开发，请重新选择！&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="多个匹配条件">多个匹配条件</h2><p>一个 case 也可以设置多个匹配条件，条件使用 <strong>｜</strong> 隔开，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">case</span> <span class="number">401</span>|<span class="number">403</span>|<span class="number">404</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Not allowed&quot;</span></span><br></pre></td></tr></table></figure><h1 id="总结">总结</h1><ul class="lvl-0"><li class="lvl-2"><p>if语句语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>if…else…</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件不成立执行的代码</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>多重判断</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">2</span>成立执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    以上条件都不成立执行的代码</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>if嵌套</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>:</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        ....</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>三目运算符</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">条件成立执行的表达式 <span class="keyword">if</span> 条件 <span class="keyword">else</span> 条件不成立执行的表达式</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-3"><p>match…case语句</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> subject(变量名):</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_1&gt;:</span><br><span class="line">        &lt;action_1&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_2&gt;:</span><br><span class="line">        &lt;action_2&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_3&gt;:</span><br><span class="line">        &lt;action_3&gt;</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        &lt;action_wildcard&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>case _:</strong> 当其他 case 都无法匹配时，匹配这条，保证永远会匹配成功。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（三）基础入门——输入、 强制转换数据类型、 运算符</title>
      <link href="/pythonbasic3.html"/>
      <url>/pythonbasic3.html</url>
      
        <content type="html"><![CDATA[<h2 id="目标">目标</h2><ul class="lvl-0"><li class="lvl-2">输入功能的语法</li><li class="lvl-2">输入input的特点</li><li class="lvl-2">数据类型转换的必要性</li><li class="lvl-2">数据类型转换常用方法</li><li class="lvl-2">掌握常用运算符的作用</li></ul><h2 id="输入">输入</h2><p>在Python中，程序接收用户输入的数据的功能即是输入。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190116102035162-7605235.png" alt="image-20190116102035162" style="zoom: 33%;" /><h3 id="输入的语法">输入的语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span>(<span class="string">&quot;提示信息&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="输入的特点">输入的特点</h3><ul class="lvl-0"><li class="lvl-2"><p>当程序执行到<code>input</code>，<mark>等待用户输入</mark>，输入完成之后才继续向下执行。</p></li><li class="lvl-2"><p>在Python中，<code>input</code>接收用户输入后，一般<mark>存储到变量</mark>，方便使用。</p></li><li class="lvl-2"><p>在Python中，<code>input</code>会把接收到的任意用户<strong>输入的数据</strong>都当做<mark>字符串</mark>处理。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;请输入您的密码：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的密码是:<span class="subst">&#123;password&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br><span class="line"><span class="comment"># 类型是字符串</span></span><br></pre></td></tr></table></figure><p>控制台输出结果如下：</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230511185724914.png" alt="image-20230511185724914"></p><h3 id="总结">总结</h3><ul class="lvl-0"><li class="lvl-2"><p>输入功能</p><ul class="lvl-2"><li class="lvl-4">input(‘提示文字’)</li></ul></li><li class="lvl-2"><p>输入的特点</p><ul class="lvl-2"><li class="lvl-4"><p>一般将input接收的数据存储到变量</p></li><li class="lvl-4"><p>input接收的任何数据默认都是字符串数据类型</p></li></ul></li></ul><h2 id="强制转换数据类型">强制转换数据类型</h2><h3 id="转换数据类型的作用">转换数据类型的作用</h3><p>问：<strong>input()接收用户输入的数据都是字符串类型</strong>，如果用户输入1，想得到整型该如何操作？</p><p>答：转换数据类型即可，即将字符串类型转换成整型。<mark>将input()函数得到的数据（已自动成为字符串）强制转换为其他类型</mark></p><h3 id="转换数据类型的函数">转换数据类型的函数</h3><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><mark>int(x [,base ])</mark></td><td style="text-align:center">将x转换为一个整数</td></tr><tr><td style="text-align:center"><mark>float(x )</mark></td><td style="text-align:center">将x转换为一个浮点数</td></tr><tr><td style="text-align:center">complex(real [,imag ])</td><td style="text-align:center">创建一个复数，real为实部，imag为虚部</td></tr><tr><td style="text-align:center"><mark>str(x )</mark></td><td style="text-align:center">将对象 x 转换为字符串</td></tr><tr><td style="text-align:center">repr(x )</td><td style="text-align:center">将对象 x 转换为表达式字符串</td></tr><tr><td style="text-align:center"><mark>eval(str )</mark></td><td style="text-align:center">用来计算在字符串中的有效Python表达式,并返回一个对象<b><font color=red>（返回数据的原本类型）</font></b></td></tr><tr><td style="text-align:center"><mark>tuple(s )</mark></td><td style="text-align:center">将序列 s 转换为一个元组</td></tr><tr><td style="text-align:center"><mark>list(s )</mark></td><td style="text-align:center">将序列 s 转换为一个列表</td></tr><tr><td style="text-align:center">chr(x )</td><td style="text-align:center">将一个整数转换为一个Unicode字符</td></tr><tr><td style="text-align:center">ord(x )</td><td style="text-align:center">将一个字符转换为它的ASCII整数值</td></tr><tr><td style="text-align:center">hex(x )</td><td style="text-align:center">将一个整数转换为一个十六进制字符串</td></tr><tr><td style="text-align:center">oct(x )</td><td style="text-align:center">将一个整数转换为一个八进制字符串</td></tr><tr><td style="text-align:center">bin(x )</td><td style="text-align:center">将一个整数转换为一个二进制字符串</td></tr></tbody></table><h3 id="快速体验">快速体验</h3><p>需求：input接收用户输入，用户输入“1”，将这个数据1转换成整型。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 接收用户输入</span></span><br><span class="line">num = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的幸运数字：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;您的幸运数字是<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 检测接收到的用户输入的数据类型 -- str类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 转换数据类型为整型 -- int类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">int</span>(num)))</span><br></pre></td></tr></table></figure><h3 id="实验">实验</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. float() -- 转换成浮点型</span></span><br><span class="line">num1 = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(num1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">float</span>(num1)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. str() -- 转换成字符串类型</span></span><br><span class="line">num2 = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>(num2))) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. tuple() -- 将一个序列转换成元组</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]  <span class="comment"># list列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">tuple</span>(list1)))  <span class="comment"># tuple元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. list() -- 将一个序列转换成列表</span></span><br><span class="line">t1 = (<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)  <span class="comment"># tuple元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>(t1)))  <span class="comment"># list列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. eval() -- 将字符串中的数据转换成Python表达式原本类型（返回数据的原本类型）</span></span><br><span class="line">str1 = <span class="string">&#x27;10&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;10.1&#x27;</span></span><br><span class="line">str3 = <span class="string">&#x27;(1000, 2000, 3000)&#x27;</span></span><br><span class="line">str4 = <span class="string">&#x27;[1, 2, 3]&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str1)))  <span class="comment"># int</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str2)))  <span class="comment"># float</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str3)))  <span class="comment"># tuple元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str4)))  <span class="comment"># list 列表</span></span><br></pre></td></tr></table></figure><p>注：<b><font color=red>print得到数据是不会将得到的数据字符串化处理的，只有当格式化输出需要时，在print()函数加入格式化字符才会输出相应的类型</font></b></p><h3 id="总结-2">总结</h3><ul class="lvl-0"><li class="lvl-2"><p>转换数据类型常用的函数</p><ul class="lvl-2"><li class="lvl-4">int()</li><li class="lvl-4">float()</li><li class="lvl-4">str()</li><li class="lvl-4">list()</li><li class="lvl-4">tuple()</li><li class="lvl-4">eval()</li></ul></li></ul><h2 id="运算符">运算符</h2><h3 id="运算符的分类">运算符的分类</h3><ul class="lvl-0"><li class="lvl-2"><p>算数运算符</p></li><li class="lvl-2"><p>赋值运算符</p></li><li class="lvl-2"><p>复合赋值运算符</p></li><li class="lvl-2"><p>比较运算符</p></li><li class="lvl-2"><p>逻辑运算符</p></li></ul><h3 id="算数运算符">算数运算符</h3><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:left">1 + 1 输出结果为 2</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:left">1-1 输出结果为 0</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:left">2 * 2 输出结果为 4</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除（除尽）</td><td style="text-align:left">10 / 2 输出结果为 5</td></tr><tr><td style="text-align:center"><mark>//</mark></td><td style="text-align:center"><mark>整除</mark>(取商，往小的方向取整数)</td><td style="text-align:left">9 // 4 输出结果为2</td></tr><tr><td style="text-align:center"><mark>%</mark></td><td style="text-align:center"><mark>取余</mark>（取模， 返回除法的余数）</td><td style="text-align:left">9 % 4 输出结果为 1</td></tr><tr><td style="text-align:center"><mark>**</mark></td><td style="text-align:center"><mark>指数</mark></td><td style="text-align:left">2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2</td></tr><tr><td style="text-align:center">()</td><td style="text-align:center">小括号</td><td style="text-align:left">小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9</td></tr></tbody></table><blockquote><p>注意：</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></p></li><li class="lvl-2"><p>只要运算中含浮点数（小数），计算出来的值一定是浮点数（小数）</p></li></ul><h3 id="赋值运算符">赋值运算符</h3><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">赋值</td><td style="text-align:center">将<code>=</code>右侧的结果赋值给等号左侧的变量</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>单个变量赋值</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>多个变量赋值</strong></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1, float1, str1 = <span class="number">10</span>, <span class="number">0.5</span>, <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(num1)</span><br><span class="line"><span class="built_in">print</span>(float1)</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230511210657988.png" alt="image-20230511210657988" style="zoom:70%;" /><ul class="lvl-0"><li class="lvl-2"><p><strong>多变量赋相同值</strong></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230511211124415.png" alt="image-20230511211124415" style="zoom:67%;" /><h3 id="复合赋值运算符">复合赋值运算符</h3><table><thead><tr><th style="text-align:center">运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td style="text-align:center">+=</td><td>加法赋值运算符</td><td>c += a 等价于 c = c + a</td></tr><tr><td style="text-align:center">-=</td><td>减法赋值运算符</td><td>c -= a 等价于 c = c- a</td></tr><tr><td style="text-align:center">*=</td><td>乘法赋值运算符</td><td>c *= a 等价于 c = c * a</td></tr><tr><td style="text-align:center">/=</td><td>除法赋值运算符</td><td>c /= a 等价于 c = c / a</td></tr><tr><td style="text-align:center">//=</td><td>整除赋值运算符</td><td>c //= a 等价于 c = c // a</td></tr><tr><td style="text-align:center">%=</td><td>取余赋值运算符</td><td>c %= a 等价于 c = c % a</td></tr><tr><td style="text-align:center">**=</td><td>幂赋值运算符</td><td>c ** = a 等价于 c = c ** a</td></tr><tr><td style="text-align:center">:=</td><td>海象运算符，可在表达式内部为变量赋值。</td><td></td></tr></tbody></table><p>对于海象运算符=，它是<strong>Python3.8 版本新增运算符</strong>。在这个示例中，赋值表达式可以避免调用 <code>len()</code> 两次:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (n := <span class="built_in">len</span>(a)) &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;List is too long (<span class="subst">&#123;n&#125;</span> elements, expected &lt;= 10)&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"><span class="comment"># 输出101  a = a + 1,最终a = 100 + 1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">b *= <span class="number">3</span></span><br><span class="line"><span class="comment"># 输出6  b = b * 3,最终b = 2 * 3</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">c = <span class="number">10</span></span><br><span class="line">c += <span class="number">1</span> + <span class="number">2</span></span><br><span class="line"><span class="comment"># 输出13, 先算运算符右侧1 + 2 = 3， c += 3 , 推导出c = 10 + 3</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p><strong>对于复杂的含复合赋值运算符的表达式:</strong></p><p><mark>先算复合赋值运算符右侧的表达式，再算复合赋值运算。</mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = <span class="number">56</span></span><br><span class="line">d *= <span class="number">10</span> + <span class="number">1</span></span><br><span class="line"><span class="comment"># d *= 11 -- d = 56*11</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符">比较运算符</h3><p>比较运算符也叫关系运算符， 通常用来判断。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)</td><td>如a=3,b=3，则（a == b) 为 True</td></tr><tr><td>!=</td><td>不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)</td><td>如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True</td></tr><tr><td>&gt;</td><td>运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &gt; b) 为 True</td></tr><tr><td>&lt;</td><td>运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &lt; b) 为 False</td></tr><tr><td>&gt;=</td><td>运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &lt; b) 为 False如a=3,b=3，则(a &gt;= b) 为 True</td></tr><tr><td>&lt;=</td><td>运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a=3,b=3，则(a &lt;= b) 为 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">7</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a == b)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a != b)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; b)   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a &gt; b)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><mark>结果只能得到True或False,用于判断语句较多</mark></p><h3 id="逻辑运算符">逻辑运算符</h3><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔&quot;与&quot;：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td><td>True and False， 返回 False。</td></tr><tr><td>or</td><td>x or y</td><td>布尔&quot;或&quot;：如果 x 是 True，它返回 True，否则它返回 y 的值。</td><td>False or True， 返回 True。</td></tr><tr><td>not</td><td>not x</td><td>布尔&quot;非&quot;：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not True 返回 False, not False 返回 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">3</span></span><br><span class="line"><span class="comment"># 1 and 与（且） 都真才真</span></span><br><span class="line"><span class="built_in">print</span>((a &lt; b) <span class="keyword">and</span> (c &gt; b))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>((a &gt; b) <span class="keyword">and</span> (c &gt; b))  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  or 或 有一真为真，都假才假</span></span><br><span class="line"><span class="built_in">print</span>((a &gt; b) <span class="keyword">or</span> (c &gt; b))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>((a &gt; c) <span class="keyword">or</span> (c &gt; b))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 not 非  真即非假</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span>(c)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> (a &gt; b)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><strong>使用运算符时，尽量加小括号（）来运算</strong></p><h4 id="拓展">拓展</h4><p>数字之间的逻辑运算</p><blockquote><p><mark>and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字<br>or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</mark></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">c = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> c)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">and</span> c)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">and</span> b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> c)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">or</span> c)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h3 id="位运算符">位运算符</h3><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p><table><thead><tr><th style="text-align:center">运算符</th><th>描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td><strong>按位与</strong>运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td style="text-align:left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td style="text-align:center">|</td><td><strong>按位或</strong>运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td style="text-align:left">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td style="text-align:center">^</td><td><strong>按位异或</strong>运算符：当两对应的二进位相异时，结果为1</td><td style="text-align:left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td style="text-align:center">~</td><td><strong>按位取反</strong>运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。<strong>~x</strong> 类似于 <strong>-x-1</strong></td><td style="text-align:left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td><strong>左移动</strong>运算符：运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补0。</td><td style="text-align:left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td><strong>右移动</strong>运算符：把&quot;&gt;&gt;“左边的运算数的各二进位全部右移若干位，”&gt;&gt;&quot;右边的数指定移动的位数</td><td style="text-align:left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">60</span>            <span class="comment"># 60 = 0011 1100 </span></span><br><span class="line">b = <span class="number">13</span>            <span class="comment"># 13 = 0000 1101 </span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">c = a &amp; b        <span class="comment"># 12 = 0000 1100</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;1 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line">c = a | b        <span class="comment"># 61 = 0011 1101 </span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;2 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line">c = a ^ b        <span class="comment"># 49 = 0011 0001</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;3 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line">c = ~a           <span class="comment"># -61 = 1100 0011</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;4 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line">c = a &lt;&lt; <span class="number">2</span>       <span class="comment"># 240 = 1111 0000</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;5 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line">c = a &gt;&gt; <span class="number">2</span>       <span class="comment"># 15 = 0000 1111</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;6 - c 的值为：&quot;</span>, c)</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> - c 的值为： <span class="number">12</span></span><br><span class="line"><span class="number">2</span> - c 的值为： <span class="number">61</span></span><br><span class="line"><span class="number">3</span> - c 的值为： <span class="number">49</span></span><br><span class="line"><span class="number">4</span> - c 的值为： -<span class="number">61</span></span><br><span class="line"><span class="number">5</span> - c 的值为： <span class="number">240</span></span><br><span class="line"><span class="number">6</span> - c 的值为： <span class="number">15</span></span><br></pre></td></tr></table></figure><h2 id="总结-3">总结</h2><ul class="lvl-0"><li class="lvl-2"><p>算数运算的优先级</p><ul class="lvl-2"><li class="lvl-4">混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></li></ul></li><li class="lvl-2"><p>赋值运算符</p><ul class="lvl-2"><li class="lvl-4">=</li></ul></li><li class="lvl-2"><p>复合赋值运算符</p><ul class="lvl-2"><li class="lvl-4">+=</li><li class="lvl-4">-=</li><li class="lvl-4">优先级<ol><li class="lvl-7">先算复合赋值运算符右侧的表达式</li><li class="lvl-7">再算复合赋值运算的算数运算</li><li class="lvl-7">最后算赋值运算</li></ol></li></ul></li><li class="lvl-2"><p>比较运算符</p><ul class="lvl-2"><li class="lvl-4">判断相等： ==</li><li class="lvl-4">大于等于： &gt;=</li><li class="lvl-4">小于等于：&lt;=</li><li class="lvl-4">不等于： !=</li></ul></li><li class="lvl-2"><p>逻辑运算符</p><ul class="lvl-2"><li class="lvl-4">与： and</li><li class="lvl-4">或：or</li><li class="lvl-4">非：not</li></ul></li><li class="lvl-2"><p>位运算符</p><ul class="lvl-2"><li class="lvl-6">按位与&amp;</li><li class="lvl-6">按位或|</li><li class="lvl-6">按位异或^</li><li class="lvl-6">按位取反~</li><li class="lvl-6">左移动&lt;&lt; 、右移动&gt;&gt;</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（二）基础入门——输出</title>
      <link href="/pythonbasic2.html"/>
      <url>/pythonbasic2.html</url>
      
        <content type="html"><![CDATA[<h2 id="目标">目标</h2><ul class="lvl-0"><li class="lvl-2">格式化输出<ul class="lvl-2"><li class="lvl-4">格式化符号</li><li class="lvl-4">f-字符串</li></ul></li><li class="lvl-2">print的结束符</li></ul><h2 id="输出">输出</h2><p>作用：程序输出内容给用户</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello Python&#x27;</span>)</span><br><span class="line"></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：输出“今年我的年龄是18岁”</span></span><br></pre></td></tr></table></figure><h2 id="格式化输出">格式化输出</h2><p>所谓的格式化输出即按照一定的格式输出内容。<mark>print()函数<strong>格式化输出</strong>是<strong>按照格式化符号进行输出</strong></mark></p><h3 id="格式化符号">格式化符号</h3><table><thead><tr><th style="text-align:center">格式符号</th><th style="text-align:center">转换</th></tr></thead><tbody><tr><td style="text-align:center"><mark>%s</mark></td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center"><mark>%d</mark></td><td style="text-align:center">有符号的十进制整数（包含正负）</td></tr><tr><td style="text-align:center"><mark>%f</mark></td><td style="text-align:center">浮点数</td></tr><tr><td style="text-align:center">%c</td><td style="text-align:center">字符</td></tr><tr><td style="text-align:center">%u</td><td style="text-align:center">无符号十进制整数</td></tr><tr><td style="text-align:center">%o</td><td style="text-align:center">八进制整数</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">十六进制整数（小写ox）</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:center">十六进制整数（大写OX）</td></tr><tr><td style="text-align:center">%e</td><td style="text-align:center">科学计数法（小写’e’）</td></tr><tr><td style="text-align:center">%E</td><td style="text-align:center">科学计数法（大写’E’）</td></tr><tr><td style="text-align:center">%g</td><td style="text-align:center">%f和%e的简写</td></tr><tr><td style="text-align:center">%G</td><td style="text-align:center">%f和%E的简写</td></tr></tbody></table><blockquote><p><strong>技巧</strong></p><ul class="lvl-1"><li class="lvl-2">%06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出。<ul class="lvl-3"><li class="lvl-4">示例：<mark>表示显示数据的小数点前的前6位，不足补0,且输出整数默认右对齐</mark></li><li class="lvl-4"><b><font color= red>若为%-06d，表示输出整数左对齐</font></b></li></ul></li><li class="lvl-2">%.2f，表示小数点后需要显示的小数位数。<ul class="lvl-3"><li class="lvl-4">示例：表示显示数据的小数点后的前2位</li></ul></li></ul></blockquote><h3 id="格式化符号的运用">格式化符号的运用</h3><p><strong>注意</strong>：在print中如何引用变量，<mark><code>% 变量名</code></mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">23</span></span><br><span class="line">name = <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">weight = <span class="number">75.6</span></span><br><span class="line">stu_id = <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.今年年龄是多少岁 -整数 %d</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;今年年龄是%d岁&#x27;</span> % age)</span><br><span class="line"><span class="comment"># 2.名字是 -字符串 %s</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;名字是%s&#x27;</span> % name)</span><br><span class="line"><span class="comment"># 3.体重是 -浮点数 %f</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;体重是%0.1f&#x27;</span> % weight)</span><br><span class="line"><span class="comment"># 4 学号 - 整数 %d</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;学号是%d&#x27;</span> % stu_id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.名字是x,今年x岁</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;名字%s,今年%02d岁&#x27;</span> % (name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;名字%s,明年%02d岁&#x27;</span> % (name, age+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 名字是x,今年x岁，体重x公斤，学号是x</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;名字%s,今年%d岁，体重%.2f公斤,学号是%06d&#x27;</span> % (name, age, weight, stu_id))</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>今年年龄是23岁名字是tom<br>体重是75.6<br>学号是90<br>名字tom,今年23岁名字tom,明年24岁名字tom,今年23岁，体重75.60公斤,学号是000090</p></blockquote><p>格式化字符串除了%s，还可以写为==<code>f'&#123;表达式&#125;'</code>==</p><blockquote><p>f-格式化字符串是Python3.6中新增的格式化方法，该方法更简单易读。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拓展</span></span><br><span class="line">age = <span class="number">23</span></span><br><span class="line">name = <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">weight = <span class="number">75.6</span></span><br><span class="line">stu_id = <span class="number">90</span></span><br><span class="line"><span class="comment"># 7 名字是x,今年x岁，体重x公斤，学号是x</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;名字<span class="subst">&#123;name&#125;</span>,明年<span class="subst">&#123;age+<span class="number">1</span>&#125;</span>岁，体重<span class="subst">&#123;weight&#125;</span>公斤,学号是<span class="subst">&#123;stu_id&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="转义字符">转义字符</h3><ul class="lvl-0"><li class="lvl-2"><p><code>\n</code>：换行。</p></li><li class="lvl-2"><p><code>\t</code>：制表符，一个tab键（4个空格）的距离。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;hello\nworld&quot;) #在两个需要换行的字符中间加入\n即可</span><br><span class="line">print(&#x27;\tabcd&#x27;) ##在需要字符前空出4个空格加入\t即可</span><br></pre></td></tr></table></figure><p>输出结果：<br><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230509204225546.png" alt="image-20230509204225546"></p><h3 id="结束符">结束符</h3><blockquote><p>想一想，为什么两个print会换行输出？</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;输出的内容&#x27;</span>, end=<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在Python中，<mark>print()， 默认自带<code>end=&quot;\n&quot;</code>这个换行结束符</mark>，所以导致每两个<code>print</code>直接会换行展示，<b><font color=red>用户可以按需求更改结束符。</font></b></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, end=<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;python&quot;</span>, end=<span class="string">&quot;````````&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;wer&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时第二行代码与第三行代码中间会空出一个制表符距离，而不会出现默认换行情况。</p><p>此时第三行代码与第四行代码中间会出现````````，而不会出现默认换行情况。</p></blockquote><h2 id="总结">总结</h2><ul class="lvl-0"><li class="lvl-2"><p>格式化符号</p><ul class="lvl-2"><li class="lvl-4">%s：格式化输出字符串</li><li class="lvl-4">%d：格式化输出整数</li><li class="lvl-4">%f：格式化输出浮点数</li></ul></li><li class="lvl-2"><p>f-字符串</p><ul class="lvl-2"><li class="lvl-4">f’{表达式}’</li></ul></li><li class="lvl-2"><p>转义字符</p><ul class="lvl-2"><li class="lvl-4">\n：换行</li><li class="lvl-4">\t：制表符</li></ul></li><li class="lvl-2"><p>print结束符</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;内容&#x27;</span>, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（一）基础入门——变量、数据类型</title>
      <link href="/pythonbasic1.html"/>
      <url>/pythonbasic1.html</url>
      
        <content type="html"><![CDATA[<h2 id="目标">目标</h2><ul class="lvl-0"><li class="lvl-2">变量的作用</li><li class="lvl-2">定义变量</li><li class="lvl-2">认识数据类型</li></ul><h2 id="变量的作用">变量的作用</h2><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230503114212314.png" alt="image-20230503114212314" style="zoom:60%;aligin:ceter;" /><p>举例体验：我们去图书馆读书，怎么样快速找到自己想要的书籍呢？是不是管理员提前将书放到固定位置，并把这个位置进行了编号，我们只需要在图书馆中按照这个编号查找指定的位置就能找到想要的书籍。</p><p>这个编号其实就是把书籍存放的书架位置起了一个名字，方便后期查找和使用。</p><p>程序中，数据都是临时存储在内存中，为了更快速的查找或使用这个数据，通常我们把这个数据在内存中存储之后定义一个名称，这个名称就是变量。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190122123202213.png" alt="image-20190122123202213"></p><blockquote><p>变量就是<strong>一个存储数据的的时候当前数据所在的内存地址的名字</strong>而已。</p></blockquote><h3 id="定义变量">定义变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量名 = 值(数据)</span><br></pre></td></tr></table></figure><blockquote><p>变量名自定义，要满足<mark>标识符</mark>命名规则。</p></blockquote><h3 id="标识符">标识符</h3><p><strong>标识符命名规则</strong>是Python中定义各种名字的时候的统一规范，具体如下：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>由数字、字母、下划线组成</strong></p></li><li class="lvl-2"><p>不能数字开头，可以放在中间</p></li><li class="lvl-2"><p>不能使用内置关键字（python已经定义的关键字）</p></li><li class="lvl-2"><p>严格区分大小写</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">False     None    True   and      as       assert   break     class  </span><br><span class="line">continue  def     del    elif     else     except   finally   for</span><br><span class="line">from      global  if     import   in       is       lambda    nonlocal</span><br><span class="line">not       or      pass   raise    return   try      while     with  </span><br><span class="line">yield</span><br></pre></td></tr></table></figure><h3 id="变量名的命名">变量名的命名</h3><ul class="lvl-0"><li class="lvl-2"><p>见名知义。</p></li><li class="lvl-2"><p>大驼峰：即每个单词首字母都大写，例如：<code>MyName</code>。</p></li><li class="lvl-2"><p>小驼峰：第二个（含）以后的单词首字母大写，例如：<code>myName</code>。</p></li><li class="lvl-2"><p>下划线(推荐）：例如：<code>my_name</code>。</p></li></ul><h3 id="使用变量">使用变量</h3><p>定义变量时，需**<font color=red>使用单引号’ ',引号里放具体数据</font>**</p><p><mark>变量需要先定义再使用</mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_name = <span class="string">&#x27;TOM&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(my_name)</span><br><span class="line"></span><br><span class="line">schoolName = <span class="string">&#x27;黑马程序员&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(schoolName)</span><br></pre></td></tr></table></figure><h3 id="认识bug">认识bug</h3><p>所谓bug，就是程序中的错误。如果程序有错误，需要程序员排查问题，纠正错误。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190115125845015-7528325.png" alt="image-20190115125845015"></p><h3 id="Debug工具">Debug工具</h3><p>Debug工具是PyCharm IDE中集成的用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程或者调解bug。</p><p>Debug工具使用步骤：</p><ol><li class="lvl-3"><p>打断点</p></li><li class="lvl-3"><p>Debug调试</p></li></ol><h4 id="打断点">打断点</h4><ul class="lvl-0"><li class="lvl-2"><p>断点位置</p></li></ul><p>目标要调试的代码块的第一行代码即可，即一个断点即可。</p><ul class="lvl-0"><li class="lvl-2"><p>打断点的方法</p></li></ul><p><strong>单击</strong>目标代码的<strong>行号右侧空白位置。</strong></p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190115130541289-7528741.png" alt="image-20190115130541289"></p><h3 id="Debug（调试）">Debug（调试）</h3><p>打成功断点后，在文件内部任意位置 — <strong>右键 – Debug（调试）‘文件名’ — 即可调出Debug（调试）工具面板 – 单击Step Over/F8</strong>，即可按步执行代码。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190115130809100-7528889.png" alt="image-20190115130809100"></p><h4 id="Debug输出面板分类">Debug输出面板分类</h4><ul class="lvl-0"><li class="lvl-2"><p>Debugger</p><ul class="lvl-2"><li class="lvl-4">显示变量和变量的细节</li></ul></li><li class="lvl-2"><p>Console</p><ul class="lvl-2"><li class="lvl-4">输出内容</li></ul></li></ul><h2 id="认识数据类型">认识数据类型</h2><p><strong>在 Python 里为了应对不同的业务需求，也把数据分为不同的类型。</strong></p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190111124628584-7181988.png" alt="image-20190111124628584"></p><blockquote><p>检测数据类型的方法：<code>type()</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment"># &lt;class &#x27;int&#x27;&gt; -- 整型</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">1.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))  <span class="comment"># &lt;class &#x27;float&#x27;&gt; -- 浮点型</span></span><br><span class="line"></span><br><span class="line">c = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt; -- 布尔型</span></span><br><span class="line"></span><br><span class="line">d = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))  <span class="comment"># &lt;class &#x27;str&#x27;&gt; -- 字符串</span></span><br><span class="line"></span><br><span class="line">e = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))  <span class="comment"># &lt;class &#x27;list&#x27;&gt; -- 列表</span></span><br><span class="line"></span><br><span class="line">f = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; -- 元组</span></span><br><span class="line"></span><br><span class="line">h = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(h))  <span class="comment"># &lt;class &#x27;set&#x27;&gt; -- 集合</span></span><br><span class="line"></span><br><span class="line">g = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(g))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt; -- 字典--键值对</span></span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><ul class="lvl-0"><li class="lvl-2"><p>定义变量的语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量名 = 值</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>标识符</p><ul class="lvl-2"><li class="lvl-4">由数字、字母、下划线组成</li><li class="lvl-4">不能数字开头</li><li class="lvl-4">不能使用内置关键字</li><li class="lvl-4">严格区分大小写</li></ul></li><li class="lvl-2"><p>数据类型</p><ul class="lvl-2"><li class="lvl-4">整型：int</li><li class="lvl-4">浮点型：float</li><li class="lvl-4">字符串：str</li><li class="lvl-4">布尔型：bool</li><li class="lvl-4">元组：tuple</li><li class="lvl-4">集合：set</li><li class="lvl-4">字典：dic</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conda常用操作及源的配置、pip源的配置</title>
      <link href="/techdoc1.html"/>
      <url>/techdoc1.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="46c1f5e6ab2abc20f57c6fbf5148aee420934de45e29fc3f6f2b81d6f97e9f9e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 技术文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C进阶语法（九）指针的进阶</title>
      <link href="/C9.html"/>
      <url>/C9.html</url>
      
        <content type="html"><![CDATA[<h2 id="指针基础">指针基础</h2><p>指针的主题，我们在初级阶段的《指针》章节已经接触过了，我们知道了指针的概念：</p><blockquote><p>1.指针就是变量，是用来存地址的，地址是唯一标识一块内存空间<br>2.指针的大小是固定的4/8个字节（由平台决定，32位/64位）<br>3.指针是有类型的，通常类型有char、int 、short、long、float、double<br>4.指针类型决定了指针±整数的步长，指针解引用操作的时候的能够访问空间的大小<br>5.指针的运算。</p><ul class="lvl-1"><li class="lvl-2"><strong>指针±整数(==&gt;指针指向的是该地址的上一个或下一个地址）</strong></li><li class="lvl-2"><strong>指针-指针（指向同一内存空间,可得指针之间的元素个数）</strong></li><li class="lvl-2"><strong>指针的关系运算（比较地址大小）</strong></li></ul></blockquote><h2 id="字符指针">字符指针</h2><p>指针类型中存在一种字符指针<code>char*</code></p><p><b>一般使用：</b></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch= <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> *pc = &amp;ch;</span><br><span class="line">    *pc =<span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b>另一种使用方式：</b></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = <span class="string">&quot;hello bit.&quot;</span>;<span class="comment">//这里是把一个字符串放到pstr指针变量里了吗？</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pstr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>注：</strong></em></p><blockquote><p><strong><font color=black>(一）常量指针int const* p 和 const int* p</font></strong></p><p><b><font color=red>const 放在指针变量的 * 左边时，表示该指针所指向的数据（地址内的内容）是常量，即不能通过该指针修改所指向的数据。但p所指向的地址可以变。</font></b></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line">&gt;<span class="type">const</span> <span class="type">int</span> *p = &amp;num;  <span class="comment">// 将const放在*的左边，表示所指向的数据是常量</span></span><br><span class="line">&gt;*p = <span class="number">20</span>;  <span class="comment">// 编译错误，因为p所指向的数据是常量</span></span><br><span class="line">&gt;p++;     <span class="comment">// 合法，p本身不是常量</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，p 是一个指向 num的常量指针，即不能通过 p修改 num的值。但是可以通过 p 修改其指向的地址。</p><p>注**：int const* p定义了一个指向 const int类型数据的指针变量 p，也就是说，p 所指向的数据是一个常量，不能通过 p修改其所指向的数据**。但是 p本身不是常量，可以指向其他的 const int类型数据。</p><p><strong><font color=black>(二）指针常量int* const p</font></strong></p><p><b><font color=red>const放在指针变量的*右边时，表示指针本身是常量。它指向的地址是不可改变的，但地址里的内容可以通过指针改变。</font></b></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line">&gt;<span class="type">int</span> *<span class="type">const</span> p = &amp;num;  <span class="comment">// 将const放在*的左边，并且指针本身也是常量</span></span><br><span class="line">&gt;*p = <span class="number">20</span>;   <span class="comment">// 合法，可以通过p来修改所指向的数据</span></span><br><span class="line">&gt;p++;      <span class="comment">// 编译错误，因为p本身是常量，不能修改其指向的地址</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，int* const p就是一个指针常量，表示定义了一个指向 int 类型的指针变量 p，且这个指针变量是一个常量，其值(地址）不能被改变，但它所指向的 int类型数据（地址内的内容）可以被修改。</p><p><b><font color=black>总结:</font></b></p><p>一般是根据靠近原则来看，<strong>const修饰p那么就是指针本身值（即指向的地址）不变，const修饰*p那么就是指指针指向的变量值（指向的值）不变</strong></p><p><strong><font color=red>加深记忆记住三句话：</font></strong></p><ul class="lvl-1"><li class="lvl-2"><p>指针和 const 谁在前先读谁 ；</p></li><li class="lvl-2"><p>*象征着地址，const象征着内容；</p></li><li class="lvl-2"><p>谁在前面<strong>谁就不允许改变。</strong></p></li></ul></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;abcdefk&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;abcdefk&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* p1 = <span class="string">&quot;abcdefk&quot;</span>;<span class="comment">//const使变量</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* p2 = <span class="string">&quot;abcdefk&quot;</span>;<span class="comment">//常量字符串的地址会在内存中单独开辟一个空间，地址固定，</span></span><br><span class="line"><span class="keyword">if</span> (p1 == p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;haha\n &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if (arr1 = arr2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;hehe\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;haha\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里p1和p2指向的是一个<b><font color=red>同一个常量字符串</font></b>。C/C++会把常量字符串存储到单独的一个内存区域，当几个指针。<strong>指向同一个字符串的时候，他们实际会指向同一块内存。但是用相同的常量字符串去初始化</strong><br><strong>不同的数组的时候就会开辟出不同的内存块</strong>。所以arr11和arr2不同，p1和p2不同。  <strong>来源《剑指offer》</strong></p><h2 id="指针数组">指针数组</h2><blockquote><p><strong>预备知识：</strong></p><ul class="lvl-1"><li class="lvl-2"><p>1.&amp;arr-数组名-此时数组名不是首元素的地址–数组名表示整个数组–&amp;数组名 取出的是整个数组的地址。</p></li><li class="lvl-2"><p>2.sizeof(arr)-sizeof(数组名）-数组名表示整个数组-sizeof(数组名）计算的是整个数组的大小。</p></li><li class="lvl-2"><p>除1、2以外，<strong><font color=blue>数组名表示数组的首元素的地址</font></strong></p></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">int</span>* arr1[<span class="number">10</span>]; <span class="comment">//整形指针的数组</span></span><br><span class="line"><span class="type">char</span> *arr2[<span class="number">4</span>]; <span class="comment">//一级字符指针的数组</span></span><br><span class="line"><span class="type">char</span> **arr3[<span class="number">5</span>];<span class="comment">//二级字符指针的数组```</span></span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr1[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr2[] = &#123; <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr3[] = &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="type">int</span>* parr[] = &#123; arr1,arr2,arr3 &#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E4%B9%9D%E8%8A%82%20%E6%8C%87%E9%92%88%E7%9A%84%E8%BF%9B%E9%98%B6/image-20230422002000521.png" alt="image-20230422002000521"></p><p><strong>指针数组用法：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr1[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr2[] = &#123; <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr3[] = &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* parr[] = &#123; arr1,arr2,arr3 &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(parr[i] + j));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组指针">数组指针</h2><h3 id="数组指针的定义">数组指针的定义</h3><p><strong>数组指针是指针</strong></p><blockquote><p>整形指针：int * pint; 能够指向整形数据的指针。浮点型指针：float * pf; 能够指向浮点型数据的指针。数组指针：能够指向数组的指针</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p1[<span class="number">10</span>];<span class="comment">//==int* p1[10] 指针数组</span></span><br><span class="line"><span class="type">int</span> (*p2)[<span class="number">10</span>];<span class="comment">//数组指针</span></span><br><span class="line"><span class="comment">//p1, p2分别是什么？</span></span><br></pre></td></tr></table></figure><p><strong>指针数组</strong>，对于语句“int* p1[10]”，因为“[]”的优先级要比“*”要高，所以 p1 先与“[]”结合，构成一个数组的定义，数组名为 p1，而“int*”修饰的是数组的内容，即数组的每个元素。也就是说，<strong>该数组包含 10个指向 int 类型数据的指针，<strong>如图 1 所示，因此，它是</strong>一个指针数组</strong>。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E4%B9%9D%E8%8A%82%20%E6%8C%87%E9%92%88%E7%9A%84%E8%BF%9B%E9%98%B6/22201218-19ddd896ae6a45e1b61c7e3ee59b4662.jpg" alt="Attachment"></p><p>​                                                                                                                      图 1</p><p><strong>数组指针</strong>，对于语句“int(*p2)[5]”，“()”的优先级比“[]”高，“*<strong>”号和 p2 构成一个指针的定义</strong>，<strong>指针变量名为 p2</strong>，**而 int 修饰的是数组的内容，即数组的每个元素。**也就是说，<strong>p2 是一个指针，它指向一个包含 10 个 int 类型数据的数组</strong>，如图 2 所示。很显然，它是一个数组指针，<strong>数组在这里并没有名字，是个匿名数组</strong>。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E4%B9%9D%E8%8A%82%20%E6%8C%87%E9%92%88%E7%9A%84%E8%BF%9B%E9%98%B6/22201218-19ddd896ae6a45e1b61c7e3ee59b4662(1).jpg" alt="Attachment"></p><p>​                                                                                                                  图 2</p><p>由此可见，</p><blockquote><p>对指针数组来说，首先它是一个数组，数组的元素都是指针，也就是说该数组存储的是指针，数组占多少个字节由数组本身决定；而对数组指针来说，<strong>首先它是一个指针</strong>，**它指向一个数组，**也就是说它是指向数组的指针，&gt;在 32 位系统下永远占 4 字节，至于它指向的数组占多少字节，这个不能够确定，要看具体情况。</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//int* p = NULL;//p是整形指针 - 指向整形的指针 - 可以存放整形的地址</span></span><br><span class="line"><span class="comment">//char* pc = NULL;//pa是字符指针 - 指向字符的指针 - 可以存放字符的地址</span></span><br><span class="line">                  <span class="comment">//数组指针 - 指向数组的指针 -可以存放数组的地址</span></span><br><span class="line"><span class="comment">//int arr[10] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//arr-首元素地址</span></span><br><span class="line"><span class="comment">//&amp;arr[0]-首元素的地址</span></span><br><span class="line"><span class="comment">//&amp;arr-数组的地址(整个数组）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> (*p)[<span class="number">10</span>] = &amp;arr;<span class="comment">//数组的地址要存起来</span></span><br><span class="line"><span class="comment">//上面的p就是数组指针</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* arr[<span class="number">5</span>];<span class="comment">//指针数组</span></span><br><span class="line"><span class="type">char</span>* (*pa)[<span class="number">5</span>]=&amp;arr;</span><br><span class="line"><span class="comment">//*pa指针指向数组5个元素，即(*pa)[5]；而指向的数组元素类型是char*。</span></span><br><span class="line">  <span class="comment">//故取数组的地址&amp;arr写成：char* (*pa)[5]=&amp;arr； </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E4%B9%9D%E8%8A%82%20%E6%8C%87%E9%92%88%E7%9A%84%E8%BF%9B%E9%98%B6/image-20230422185558143.png" alt="image-20230422185558143" style="zoom:50%;" /><h3 id="数组名VS数组名">&amp;数组名VS数组名</h3><p><strong><font color=red>&amp;arr是取的整个数组的地址</font></strong></p><h3 id="数组指针用法">数组指针用法</h3><h4 id="用法1：">用法1：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>(*pa)[<span class="number">10</span>] = &amp;arr;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(*pa+i));<span class="comment">//*pa==arr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用法2-地址传参">用法2:地址传参</h4><p><strong>二维数组看作一维数组，则其数组名就是首元素的地址</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">arr[i] == *(a+i) == *(p+i) ==  p[i]</span><br><span class="line">  </span><br><span class="line">*(*(p + i) + j)== *(p[i] + j)==(*(p + i))[j]==p[i][j]</span><br></pre></td></tr></table></figure><p><strong>例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(*(p + i) + j);<span class="comment">//(p + i)找到n维数组第i行的地址，(*(p + i) + j)找到n维数组第i行的第j列元素的地址</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数是数组的形式</span></span><br><span class="line"><span class="comment">//void print1(int arr[3][5], int x, int y)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////int i = 0, j = 0;</span></span><br><span class="line"><span class="comment">////for (i = 0;i &lt; x;i++)</span></span><br><span class="line"><span class="comment">////&#123;</span></span><br><span class="line"><span class="comment">////for (j = 0;j &lt; y;j++)</span></span><br><span class="line"><span class="comment">////&#123;</span></span><br><span class="line"><span class="comment">////printf(&quot;%d &quot;, arr[i][j]);</span></span><br><span class="line"><span class="comment">////&#125;</span></span><br><span class="line"><span class="comment">////printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">////&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数是指针的形式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print2</span><span class="params">(<span class="type">int</span> (*p)[<span class="number">5</span>], <span class="type">int</span> x, <span class="type">int</span> y)</span><span class="comment">//int (*p)[5] - 数组指针p是指向含5个元素为int类型的数组</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; x;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; y;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p[i][j]);</span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, *(p[i] + j));</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, * (*(p + i) + j));//(p + i)找到n维数组第i行的地址，(*(p + i) + j)找到n维数组第i行的第j列元素的地址</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, (*(p + i))[j]);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125; &#125;;</span><br><span class="line"><span class="comment">//print1(arr, 3, 5);//arr - 数组名 -数组名就是首元素的地址</span></span><br><span class="line">print2(arr, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">//数组名arr，表示首元素的地址</span></span><br><span class="line">    <span class="comment">//但是二维数组的首元素是二维数组的第一行</span></span><br><span class="line">    <span class="comment">//所以这里传递的arr，其实相当于第一行的地址，是一维数组的地址</span></span><br><span class="line">    <span class="comment">//可以数组指针来接收</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//int arr[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;</span></span><br><span class="line"><span class="comment">//int i = 0;</span></span><br><span class="line"><span class="comment">//int* p = arr;</span></span><br><span class="line"><span class="comment">//for (i = 0;i &lt; 10;i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////printf(&quot;%d &quot;, *(p + i));</span></span><br><span class="line"><span class="comment">////printf(&quot;%d &quot;,p[i]);</span></span><br><span class="line"><span class="comment">////printf(&quot;%d &quot;, *(arr + i));</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, arr[i]);//arr[i] == *(a+i) == *(p+i) ==  p[i]</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">5</span>];<span class="comment">//arr是一个含5个元素的整形数组</span></span><br><span class="line"><span class="type">int</span> *parr1[<span class="number">10</span>];<span class="comment">//parr1是一个数组，数组有10个元素，每个元素的类型是int*,故parr1是指针数组</span></span><br><span class="line"><span class="type">int</span> (*parr2)[<span class="number">10</span>];<span class="comment">//parr2是数组指针，它指向一个含10个元素的数组，数组的元素类型是int</span></span><br><span class="line"><span class="type">int</span> (*parr3[<span class="number">10</span>])[<span class="number">5</span>];<span class="comment">//parr3是数组，该数组的有10个元素，每个元素是一个数组指针；该数组指针指向的数组有5个元素，每个元素类型是int</span></span><br></pre></td></tr></table></figure><h3 id="数组参数、指针参数">数组参数、指针参数</h3><h4 id="一维数组传参">一维数组传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[])</span><span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">10</span>])</span><span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> *arr)</span><span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span> *arr[<span class="number">20</span>])</span><span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span> **arr)</span><span class="comment">//ok//一级指针的地址存放在二级指针里 int **arr</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *arr2[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">    test2(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二维数组传参">二维数组传参</h4><p><strong>二维数组的数组名是首元素的地址，传参时，传入的是<font color=red>数组第一行地址</font></strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>])</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test1</span><span class="params">(<span class="type">int</span> arr[][<span class="number">5</span>])</span><span class="comment">//数组传参，行可以省略，列不可以省略</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span> arr[][])</span><span class="comment">//error</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test3</span><span class="params">(<span class="type">int</span> *arr)</span><span class="comment">//error,二维数组无法存放整形指针中去</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test4</span><span class="params">(<span class="type">int</span>** arr)</span><span class="comment">//error,数组名是第一行地址，而二级指针存放是一级变量（指针）的地址</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="comment">//总结：二维数组传参，函数形参的设计只能省略第一个[]的数字。</span></span><br><span class="line"><span class="comment">//因为对一个二维数组，可以不知道有多少行，但是必须知道一行多少元素。</span></span><br><span class="line"><span class="comment">//这样才方便运算。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test5</span><span class="params">(<span class="type">int</span>* arr[<span class="number">5</span>])</span><span class="comment">//ok？//error</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test6</span><span class="params">(<span class="type">int</span> (*arr)[<span class="number">5</span>])</span><span class="comment">//ok？//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一级指针传参">一级指针传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> *p, <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sz; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p = arr;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//一级指针p，传给函数</span></span><br><span class="line">    print(p, sz);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思考：</strong></p><blockquote><p>当一个函数的参数部分为一级指针的时候，函数能接收什么参数？</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="type">void</span> <span class="title function_">test1</span><span class="params">(<span class="type">int</span> *p)</span></span><br><span class="line">  &#123;&#125;</span><br><span class="line"><span class="comment">//test1函数能接收什么参数？  test1(&amp;a);或test1(p1);</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span>* p1=&amp;a;</span><br><span class="line">  test1(&amp;a);</span><br><span class="line">  test1(p1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">char</span>* p)</span></span><br><span class="line">   &#123;&#125;</span><br><span class="line"><span class="comment">//test2函数能接收什么参数？  test2(&amp;ch);或test2(str);</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; <span class="type">char</span> ch=<span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">  <span class="type">char</span>* str=&amp;ch;</span><br><span class="line">  test2(&amp;ch);</span><br><span class="line">  test2(str);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="二级指针传参">二级指针传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>** ptr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, **ptr);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *p = &amp;n;</span><br><span class="line">    <span class="type">int</span> **pp = &amp;p;<span class="comment">//取一级指针p的地址</span></span><br><span class="line">    test(pp);</span><br><span class="line">    test(&amp;p);</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span>* arr[<span class="number">10</span>];<span class="comment">//指针数组，数组里每个元素都是一级指针</span></span><br><span class="line">  test(arr);<span class="comment">//传过去的是arr数组首元素的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考：</p><blockquote><p>当函数的参数为二级指针的时候，可以接收什么参数？</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">char</span> **p)</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">   </span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">   <span class="type">char</span> c = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">   <span class="type">char</span>*pc = &amp;c;</span><br><span class="line">   <span class="type">char</span>**ppc = &amp;pc;</span><br><span class="line">   <span class="type">char</span>* arr[<span class="number">10</span>];<span class="comment">//指针数组，数组里每个元素都是一级指针</span></span><br><span class="line">   test(&amp;pc);</span><br><span class="line">   test(ppc);</span><br><span class="line">   test(arr);<span class="comment">//Ok?//ok//传过去的是arr数组首元素的地址</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="函数指针">函数指针</h2><p><strong>&amp;函数名 和 函数名 都是函数的地址</strong></p><p>函数指针定义示例：</p><pre><code>int Add(int x, int y)&#123;&#125;int (*pa)(int ,int ) = Add;printf(&quot;%d\n&quot;, (*pa)(2, 3));</code></pre><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数指针 - 是指向函数的指针 -存放函数地址的指针</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> z = x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">/*printf(&quot;%d &quot;, Add(a, b));*/</span></span><br><span class="line"><span class="comment">//&amp;函数名 和 函数名 都是函数的地址</span></span><br><span class="line"><span class="comment">//printf(&quot;%p\n&quot;, &amp;Add);//打印出函数的地址</span></span><br><span class="line"><span class="comment">//printf(&quot;%p\n&quot;, Add);//打印出函数的地址</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> (*pa)(<span class="type">int</span> ,<span class="type">int</span> ) = Add;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (*pa)(<span class="number">2</span>, <span class="number">3</span>));<span class="comment">//5</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用法：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span> (*p)(<span class="type">char</span>*) = Print;</span><br><span class="line">(*p)(<span class="string">&quot;hello bit&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>课件：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面pfun1和pfun2哪个有能力存放test函数的地址？</span></span><br><span class="line"><span class="type">void</span> (*pfun1)();</span><br><span class="line"><span class="comment">//pfun1可以存放。pfun1先和*结合，说明pfun1是指针，指针指向的是一个函数，指向的函数无参数，返回值类型为void。</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">pfun2</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//pfun2表明这是一个函数，其返回类型是void*</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语法 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C进阶语法（八）数据的存储</title>
      <link href="/C8.html"/>
      <url>/C8.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型详细介绍">数据类型详细介绍</h2><p><strong>内置类型</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>    <span class="comment">//字符数据类型</span></span><br><span class="line"><span class="type">short</span>    <span class="comment">//短整型</span></span><br><span class="line"><span class="type">int</span>     <span class="comment">//整形</span></span><br><span class="line"><span class="type">long</span>    <span class="comment">//长整型</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span>  <span class="comment">//更长的整形</span></span><br><span class="line"><span class="type">float</span>    <span class="comment">//单精度浮点数</span></span><br><span class="line"><span class="type">double</span>   <span class="comment">//双精度浮点数</span></span><br></pre></td></tr></table></figure><p>int 和float都是占内存4个字节，但是在内存中存储形式不同</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/第八节 数据的存储/image-1.png" style="zoom: 67%;" /><p><strong>自定义类型（构造类型）</strong>—略，后面会讲。</p><h3 id="类型的基本归类：">类型的基本归类：</h3><p><strong>整形家族：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span><span class="comment">//在内存中以Ascall码存储的</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">char</span></span><br><span class="line"><span class="type">short</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> [<span class="type">int</span>]</span><br><span class="line">    <span class="type">signed</span> <span class="type">short</span> [<span class="type">int</span>]</span><br><span class="line"><span class="type">int</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span></span><br><span class="line"><span class="type">long</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> [<span class="type">int</span>]</span><br><span class="line">    <span class="type">signed</span> <span class="type">long</span> [<span class="type">int</span>]</span><br></pre></td></tr></table></figure><p><strong>浮点型家族</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span></span><br><span class="line"><span class="type">double</span></span><br></pre></td></tr></table></figure><p><strong>构造类型：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt; 数组类型</span><br><span class="line">&gt; 结构体类型 <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&gt;</span> 枚举类型 <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&gt;</span> 联合类型 <span class="class"><span class="keyword">union</span></span></span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680841072601-18.png" /><p><strong>例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//无类型，此时在main中输入100是错误的</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        test(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整形在内存中的存储：">整形在内存中的存储：</h2><h3 id="原码、反码、补码">原码、反码、补码</h3><p>计算机中的<font color=Red><strong>整数（有符号数）</strong></font>有三种表示方法，即原码、反码和补码。</p><p>三种表示方法均有<strong>符号位和数值位</strong>两部分，符号位都是<strong>用0表示“正”，用1表示“负”</strong>，</p><p><strong>无符号数原码、反码、补码都相同</strong></p><p><strong>正数的原、反、补码都相同。</strong></p><p>而数值位<strong>负数的三种表示方法各不相同</strong>。如下：</p><table><thead><tr><th style="text-align:left"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680842673110-7.png" align="left" /></th></tr></thead><tbody><tr><td style="text-align:left"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680842677026-9.png" align="left" /></td></tr><tr><td style="text-align:left"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680842682081-11.png" style="zoom:67%;" align="left"/></td></tr></tbody></table><p><strong>对于整形来说：数据存放内存中其实存放的是补码。</strong></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680843045650-13.png" /><h3 id="二进制与八进制、十六进制转化规则">二进制与八进制、十六进制转化规则</h3><p><strong>十六进制与二进制转化规则：“8421”原则，即4个二进制位构成1个十六进制位，并按照“8421”原则转化</strong></p><p><strong>八进制与二进制转化规则：“421”原则，即3个二进制位构成1个八进制位，并按照“421”原则转化</strong></p><p><strong>例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">20</span>;<span class="comment">//4个字节-32bit</span></span><br><span class="line">        <span class="comment">//00000000 00000000 00000000 00010100-原码</span></span><br><span class="line">        <span class="comment">//00000000 00000000 00000000 00010100-反码</span></span><br><span class="line">        <span class="comment">//00000000 00000000 00000000 00010100-补码</span></span><br><span class="line">        <span class="comment">//0X0014</span></span><br><span class="line">        <span class="type">int</span> b = <span class="number">-10</span>;</span><br><span class="line">        <span class="comment">//10000000 00000000 00000000 00001010-原码</span></span><br><span class="line">        <span class="comment">//11111111 11111111 11111111 11110101-反码</span></span><br><span class="line">        <span class="comment">//11111111 11111111 11111111 11110110-补码</span></span><br><span class="line">        <span class="comment">//0XFFFFFFF6</span></span><br><span class="line">        <span class="comment">//内存中存的是整数的补码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大小端字节序介绍及判断">大小端字节序介绍及判断</h3><p>对于a和b分别存储的是补码。但是我们发现存储到内存后顺序有点不对劲</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/%E7%AC%AC1%E8%8A%82-%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8.png" style="zoom:50%;"/><h4 id="大小端介绍">大小端介绍</h4><p><strong>什么大端小端：</strong></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680844912666-16.png" /><p><strong>大端正着存数据，小端倒着存数据。</strong></p><p><em>编译器支持大端存储或者小端存储模式</em></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680846416559-18.png" style="zoom:60%;" /><p>**例：**写一段代码告诉我们当前机器的字节序是什么？</p><p><em>char</em>类型访问一个字节的地址*</p><p><strong>//指针类型的意义：</strong></p><p>1.指针类型决定了指针解引用操作符能访问几个字节：<code>char*</code>能访问1个字节，<code>int*</code>能访问4个字节</p><p>2.指针类型决定了指针+1、-1，能加或者能减的是几个字节；<code>char*p,p+1跳过1个字节</code>；<code>int*p,p+1:跳过4个字节</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回1 小端存储</span></span><br><span class="line"><span class="comment">//返回0 大端存储</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">check_sys</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span>*p=(<span class="type">char</span>*)&amp;a;<span class="comment">//将&amp;a类型从int*强制转换为char*,方便指针p调用</span></span><br><span class="line">    <span class="keyword">return</span> *p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ret = check_sys();<span class="comment">//将&amp;a类型从int*强制转换为char*,方便指针p调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret== <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;小端存储\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;大端存储\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习">练习</h3><h4 id="例1："><strong>例1：</strong></h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//-1-char类型 占1个字节即8个比特位</span></span><br><span class="line">    <span class="comment">//10000001-原码</span></span><br><span class="line">    <span class="comment">//11111110-反码</span></span><br><span class="line">    <span class="comment">//11111111-补码</span></span><br><span class="line">    <span class="type">char</span> a = <span class="number">-1</span>;<span class="comment">//char-字符类型 占1个字节</span></span><br><span class="line">    <span class="comment">//11111111-补码---&gt;-1</span></span><br><span class="line"></span><br><span class="line">    <span class="type">signed</span> <span class="type">char</span> b = <span class="number">-1</span>;<span class="comment">//signed符号数</span></span><br><span class="line">    <span class="comment">//11111111-补码---&gt;-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> c = <span class="number">-1</span>;<span class="comment">//unsigned-无符号数</span></span><br><span class="line">    <span class="comment">//11111111-补码、原码-----&gt;255</span></span><br><span class="line">    <span class="comment">//类型提升：从有符号数(char)转换为无符号数(unsigned char)，最高位转为无符号位。</span></span><br><span class="line">    <span class="comment">//此时由于unsigned存在，整型直接将有符号位转换为无符号位</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d,c=%d&quot;</span>, a, b, c);<span class="comment">//%d-整型，此时会发生类型提升</span></span><br><span class="line">    <span class="comment">//-1 -1 255</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，变量c是一个无符号的char类型，其取值范围为0到255。当将有符号的-1赋给无符号的变量c时，<strong>由于无符号数不支持负数，编译器会先将-1转换为其对应的无符号整数表示方式</strong>，即<strong>将有符号数的补码转换为无符号数的值</strong>。</p><p>在8位(char)情况下，-1的补码为11111111，将其转换为无符号整数后，其值为2^8 - 1 = 255。因此，当用printf函数并指定格式化字符串为&quot;%d&quot;时，输出的结果为c=255，对应于二进制表示为11111111。</p><h4 id="例2："><strong>例2：</strong></h4><p><strong>//<font color=Red>类型提升：从有符号数(char)转换为无符号数（unsigned int)，补位须与最高位相同。</font></strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a = <span class="number">-128</span>;</span><br><span class="line">    <span class="comment">//10000000-原码</span></span><br><span class="line">    <span class="comment">//11111111-反码</span></span><br><span class="line">    <span class="comment">//10000000-补码（8位）</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, a);<span class="comment">//%u-打印十进制的无符号数，</span></span><br><span class="line">    <span class="comment">//%u将a从有符号字符(char)转换为无符号数（unsigned int)，补位须与最高位相同。</span></span><br><span class="line">    <span class="comment">//11111111 11111111 11111111 10000000</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>char类型确实只占8位，但在这段代码中，使用**%u格式说明符时将变量a强制转换为无符号整数(unsigned int)类型。通常情况下，unsigned int类型在大多数系统架构中都是占用32位的内存空间。**</p><p>因此，当a的值为-128时，其在内存中的二进制补码表示为10000000。**按照%u格式说明符进行输出时，编译器会先将其强制转换为一个32位的无符号整数(unsigned int)，补齐高位后输出其二进制表示。**因此输出的结果为11111111 11111111 11111111 10000000的二进制表示，对应于4294967168这个十进制无符号整数。</p><h4 id="注：">注：</h4><p><strong><font color=Red>signed char(有符号字符）类型范围是-128~127，超过127自动转化为-128直到转化到0，再从0开始累计</font></strong></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680848507527-22.png" style="zoom:50%;" /><p><strong><font color='red'>unsigned char(无符号字符)类型范围是0~225，超过225自动转化为0，再开始累计</font></strong></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680848316815-20.png" style="zoom:67%;" /><h4 id="例3："><strong>例3：</strong></h4><p><strong>//<font color='red'>signed char（有符号字符）类型最大只能存入01111111（127）当超过之后，就会变成127+1变成-128了，不溢出。</font></strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123; <span class="type">char</span> a = <span class="number">128</span>; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, a); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//signed char（无符号字符）类型最大只能存入01111111（127）当超过之后，就会变成127+1变成-128了，不溢出。  </span></span><br></pre></td></tr></table></figure><h4 id="例4："><strong>例4：</strong></h4><p><strong>//<font color='red'>有符号和无符号一起计算时，首先按照补码的形式进行运算，最后格式化成为有符号数</font></strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">-20</span>;</span><br><span class="line">    <span class="comment">//10000000 00000000 00000000 00010100</span></span><br><span class="line">    <span class="comment">//11111111 11111111 11111111 11101011</span></span><br><span class="line">    <span class="comment">//11111111 11111111 11111111 11101100-补码</span></span><br><span class="line">                                </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//00000000 00000000 00000000 00001010</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a + b);</span><br><span class="line">    <span class="comment">//11111111 11111111 11111111 11101100-a</span></span><br><span class="line">    <span class="comment">//00000000 00000000 00000000 00001010-b</span></span><br><span class="line">    <span class="comment">//11111111 11111111 11111111 11110110-a+b---&gt;-10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例5："><strong>例5：</strong></h4><p>**//<font color='red'> unsigned int i; 其中i为无符号数，无论i含不含负数，都认为是无符号数。此时会将其补码视为无符号数真实值，即i始终大于等于0 </font>**下列代码中会陷入死循环。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, i);</span><br><span class="line">        Sleep(<span class="number">1000</span>);<span class="comment">//睡眠代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例6：">例6：</h4><p><strong>signed</strong> **char(有符号字符）的范围是-128<sub>127，当char数组存入int元素时,会将其转换为char类型**，由此，下列代码中存入到char数组的元素经历了从-1</sub>-128<sub>127</sub>0转化，而char字符0表示的是‘\0’，故最终计算字符串长度为255.</p><p><strong>注：</strong> <strong>//<font color=red>int类型占4个字节，不代表i会占4个字节！！！不要陷入误区。</font></strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> i;<span class="comment">//int类型占4个字节，不代表i会占4个字节！！！</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="number">-1</span>-i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">strlen</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例7">例7:</h4><p>**<font color=red>unsigned char(无符号字符）的范围是0~225，当超过225后自动转为0重新累计到225；</font>**下列代码因此陷入死循环。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>;<span class="comment">//0~225</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;=<span class="number">255</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//陷入死循环</span></span><br></pre></td></tr></table></figure><h2 id="浮点型在内存中的存储">浮点型在内存中的存储</h2><p><strong>常见的浮点数：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">3.14159</span></span><br><span class="line"><span class="number">1E10</span></span><br><span class="line">浮点数家族包括：<span class="type">float</span>、<span class="type">double</span>、<span class="type">long</span> <span class="type">double</span>类型。</span><br><span class="line">浮点数表示的范围：<span class="type">float</span>.h</span><br></pre></td></tr></table></figure><h3 id="一个例子">一个例子</h3><p>浮点数存储的例子：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">9</span>;</span><br><span class="line">    <span class="type">float</span> *pFloat = (<span class="type">float</span> *)&amp;n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n的值为：%d\n&quot;</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为：%f\n&quot;</span>,*pFloat);</span><br><span class="line"></span><br><span class="line">    *pFloat = <span class="number">9.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num的值为：%d\n&quot;</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为：%f\n&quot;</span>,*pFloat);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680849776251-24.png" style="zoom:33%;"  /><h3 id="浮点数存储规则">浮点数存储规则</h3><p>根据国际标准IEEE（电气和电子工程协会） 754，任意一个二进制浮点数V可以表示成下面的形式：</p><table><thead><tr><th style="text-align:left">(-1)^S * M * 2^E                                                                                                                             (-1)^s 表示符号位，当s=0，V为正数；当s=1，V为负数。                                                         M表示有效数字，1≤M&lt;2。                                                                                                                    2^E表示指数位。</th></tr></thead></table><h4 id="IEEE-754规定：">IEEE 754规定：</h4><p>对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/image-20230407162229299.png" style="zoom:50%;" /><p>对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/image-20230407162359787.png" style="zoom:50%;" /><h5 id="IEEE-754-font-color-red-一些特别规定-font-：">IEEE 754<font color=red>一些特别规定</font>：</h5><p><strong><font color=blue>有效数字M情况：</font></strong></p><p>**在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面的xxxxxx部分。比如保存1.01的时候，只保存01，<strong>等到读取的时候，再把第一位的1加上去</strong>。这样做的目的，是节省1位有效数字。<strong>以32位浮点数为例，留给M只有23位，将第一位的1舍去以后，等于可以保存24位有效数字</strong>。</p><p><strong><font color=blue>指数E情况：</font></strong></p><div style="text-align: justify;font-size:16px;">E为一个无符号整数（unsigned int）如果E为8位，它的取值范围为0~225；如果E为11位，它的取值范围为0~2047。但是，我们知道，科学计数法中的E是可以出现负数的，所以IEEE 754规定，存入内存时E的真实值必须再加上一个中间数，对于8位的E，这个中间数是127；对于11位的E，这个中间数是1023。比如，2^10的E是10，所以保存成32位浮点数时，必须保存成10+127=137，即10001001。</div><p><strong>例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> f = <span class="number">5.5</span>;</span><br><span class="line">    <span class="comment">//5.5---101.1</span></span><br><span class="line">    <span class="comment">//(-1)^0*1.011*2^2</span></span><br><span class="line">    <span class="comment">//S=0;M=1.011;</span></span><br><span class="line">    <span class="comment">//E=2;</span></span><br><span class="line">    <span class="comment">//S  E+127    M</span></span><br><span class="line">    <span class="comment">//0 10000001  01100000000000000000000</span></span><br><span class="line">    <span class="comment">//0100 0000 1011 0000 0000 0000 0000 0000</span></span><br><span class="line">    <span class="comment">//0X40b00000</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//最终在内存里为小端存储</span></span><br></pre></td></tr></table></figure><h4 id="指数E从内存中取出分三种情况">指数E从内存中取出分三种情况</h4><p><strong>1.E不全为0或不全为1</strong></p><p>这时，浮点数就采用下面的规则表示，<strong>即指数E的计算值减去127（或double类型是1023），得到真实值，再将有效数字M前加上第一位的1。</strong></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/image-20230407173256948.png" style="zoom:80%;" /><p><strong>2.E全为0(即为-127时)</strong></p><p>这时，<strong>浮点数的指数E等于1-127（或者1-1023）即为真实值，有效数字M不再加上第一位的1，而是还原为0.xxxxxx的小数</strong>。这样做是为了表示±0以及接近于0的很小的数字</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/image-20230407173856180.png" style="zoom:80%;" /><p><strong>3.E全为1</strong></p><p>这时，<strong>如果有效数字M全为0，表示±无穷大</strong>(数字很大）（正负取决于符号位s）</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/image-20230407174114862.png" style="zoom:80%;" /><p><strong>解释例子（看其中解释）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n = <span class="number">9</span>;</span><br><span class="line">  <span class="comment">//00000000 00000000 00000000 00001001-补码</span></span><br><span class="line"></span><br><span class="line">  <span class="type">float</span>* pFloat = (<span class="type">float</span>*)&amp;n;<span class="comment">//此时*pFloat可以指向int所占的4个字节空间，但是指针只能一个字节一个字节的访问空间</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;n的值：%d\n&quot;</span>, n);<span class="comment">//9</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;*pfloat的值为：%f\n&quot;</span>, *pFloat);<span class="comment">//此时*pFloat会认为其n为浮点数,会对其二进制按照浮点数来排列(S E+127 M)输出</span></span><br><span class="line">  <span class="comment">//首先，将9拆分，得到第一位符号位s=0，后面8位的指数E=00000000，最后23位的有效数字M = 000 0000 0000 0000 0000</span></span><br><span class="line">  <span class="comment">//由于指数E全为0，所以符合上一节的第二种情况。因此，浮点数V就写成：</span></span><br><span class="line">  <span class="comment">//(-1)^0 * 0.00000000000000000001001 * 2^-126</span></span><br><span class="line">  <span class="comment">//V是一个很小的接近于0的正数，所以用十进制小数表示打印出来0.000000</span></span><br><span class="line"></span><br><span class="line">  *pFloat = <span class="number">9.0</span>;</span><br><span class="line">  <span class="comment">//1001.0--9.0的补码</span></span><br><span class="line">  <span class="comment">//1.001*2^3 #S=0 , M=1.001 , E=3---011</span></span><br><span class="line">  <span class="comment">//E+127---10000010</span></span><br><span class="line">  <span class="comment">// S      E+127         M(23bit)</span></span><br><span class="line">  <span class="comment">//(-1)^0 * 10000010 * 00100000000000000000000 ---浮点数在内存表现形式</span></span><br><span class="line">  <span class="comment">//0 10000010 00100000000000000000000 </span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;num的值：%d\n&quot;</span>, n);<span class="comment">//此时n将*pFloat存进去认为是整数，会对其二进制按照整数来排列输出。即</span></span><br><span class="line">  <span class="comment">//01000001 00010000 00000000 00000000</span></span><br><span class="line">  <span class="comment">//0x41 10 00 00--十六进制</span></span><br><span class="line">  <span class="comment">//1091567616--十进制</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为：%f\n&quot;</span>, *pFloat);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
