<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Namesilo与Vercel域名配置</title>
      <link href="/techdoc2.html"/>
      <url>/techdoc2.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4478560b5938367f720a689207bfde06a47d41183d0582c2ac64abc713bf18b0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 技术文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> 域名解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（四）if条件语句</title>
      <link href="/pythonbasic4.html"/>
      <url>/pythonbasic4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="目标">目标</h1><ul class="lvl-0"><li class="lvl-2">条件语句作用</li><li class="lvl-2">if语法</li><li class="lvl-2">if…else…</li><li class="lvl-2">多重判断</li><li class="lvl-2">if嵌套</li></ul><h1 id="了解条件语句">了解条件语句</h1><p>假设一个场景：</p><ul class="lvl-0"><li class="lvl-2"><p>同学们这个年龄去过网吧吗？</p></li><li class="lvl-2"><p>去网吧进门想要上网必须做的一件事是做什么？（考虑重点）</p></li><li class="lvl-2"><p>为什么要把身份证给工作人员？</p></li><li class="lvl-2"><p>是不是就是为了判断是否成年？</p></li><li class="lvl-2"><p>是不是如果成年可以上网？如果不成年则不允许上网？</p></li></ul><p>其实这里所谓的判断就是条件语句，即<strong>条件成立执行某些代码，条件不成立则不执行这些代码</strong>。</p><h1 id="if条件语句">if条件语句</h1><h2 id="if-语法">if 语法</h2><h3 id="语法">语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码<span class="number">1</span></span><br><span class="line">    条件成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h3 id="快速体验">快速体验</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;条件成立执行的代码1&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;条件成立执行的代码2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下方的代码没有缩进到if语句块，所以和if条件无关</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是无论条件是否成立都要执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190103113457876-6486497.png" alt="image-20190103113457876"></p><h2 id="实例：上网">实例：上网</h2><p>需求分析：如果用户年龄大于等于18岁，即成年，输出&quot;已经成年，可以上网&quot;。</p><h3 id="简单版">简单版</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已经成年，可以上网&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;系统关闭&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="进阶版">进阶版</h3><p>新增需求：用户可以输出自己的年龄，然后系统进行判断是否成年，成年则输出&quot;您的年龄是’用户输入的年龄’，已经成年，可以上网&quot;。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># input接受用户输入的数据是字符串类型，条件是age和整型18做判断，所以这里要int转换数据类型</span></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您的年龄&#x27;</span>))  <span class="comment"># 将input输入的已被字符串处理化的数据强制转换为整数类型（int)</span></span><br><span class="line"><span class="comment"># print(type(age))</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的年龄是<span class="subst">&#123;age&#125;</span>,已经成年，可以上网&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;系统关闭&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注：此处需要注意：<mark>将input输入的已被字符串处理化的数据强制转换为整数类型（int)</mark></p><h2 id="if…else…">if…else…</h2><p>作用：条件成立执行if下方的代码; 条件不成立执行else下方的代码。</p><blockquote><p>思考：网吧上网的实例，如果成年，允许上网，如果不成年呢？是不是应该回复用户不能上网？</p></blockquote><h3 id="语法-2">语法</h3><p><code>if 条件：  XXX else: </code></p><p>切记：<mark>条件和else后面都需要带冒号<code>:</code></mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码<span class="number">1</span></span><br><span class="line">    条件成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件不成立执行的代码<span class="number">1</span></span><br><span class="line">    条件不成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h3 id="test：网吧上网">test：网吧上网</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您的年龄：&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,已经成年，可以上网&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,未成年，请自行回家写作业&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;系统关闭&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果条件成立执行了某些代码，那么其他的情况的代码将不会执行。</p></blockquote><h2 id="多重判断">多重判断</h2><blockquote><p>思考：中国合法工作年龄为18-60岁，即如果年龄小于18的情况为童工，不合法；如果年龄在18-60岁之间为合法工龄；大于60岁为法定退休年龄。</p></blockquote><h3 id="语法-3">语法</h3><p><mark><code>else if 条件: 等同于 elif 条件:</code></mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码<span class="number">1</span></span><br><span class="line">    条件<span class="number">1</span>成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>：</span><br><span class="line">  条件<span class="number">2</span>成立执行的代码<span class="number">1</span></span><br><span class="line">    条件<span class="number">2</span>成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    以上条件都不成立执行执行的代码</span><br></pre></td></tr></table></figure><blockquote><p>多重判断也可以和else配合使用。一般else放到整个if语句的最后，表示以上条件都不成立的时候执行的代码。</p></blockquote><h3 id="实例：工龄判断">实例：工龄判断</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入年龄:&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的年龄是<span class="subst">&#123;age&#125;</span>，童工&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> (age &gt;= <span class="number">18</span>) <span class="keyword">and</span> (age &lt; <span class="number">60</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的年龄是<span class="subst">&#123;age&#125;</span>，合法可聘用&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">60</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的年龄是<span class="subst">&#123;age&#125;</span>，退休年龄&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>拓展：<code>age &gt;= 18 and age &lt;= 60</code>可以化简为<code>18 &lt;= age &lt;= 60</code>。</p></blockquote><h2 id="if嵌套">if嵌套</h2><blockquote><p>思考：坐公交：如果有钱可以上车，没钱不能上车；上车后如果有空座，则可以坐下；如果没空座，就要站着。怎么书写程序？</p></blockquote><h3 id="语法-4">语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>：</span><br><span class="line">条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>：</span><br><span class="line">    条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br><span class="line">    </span><br></pre></td></tr></table></figure><blockquote><p>注意：条件2的if也是处于条件1成立执行的代码的缩进关系内部。</p></blockquote><h3 id="实例：坐公交">实例：坐公交</h3><h4 id="判断是否能上车">判断是否能上车</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 如果有钱，则可以上车</span></span><br><span class="line"><span class="string">    2. 上车后，如果有空座，可以坐下</span></span><br><span class="line"><span class="string">    上车后，如果没有空座，则站着等空座位</span></span><br><span class="line"><span class="string">如果没钱，不能上车</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 假设用 money = 1 表示有钱, money = 0表示没有钱</span></span><br><span class="line">money = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> money == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;土豪，不差钱，顺利上车&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没钱，不能上车，追着公交车跑&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="判断是否能坐下">判断是否能坐下</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 如果有钱，则可以上车</span></span><br><span class="line"><span class="string">    2. 上车后，如果有空座，可以坐下</span></span><br><span class="line"><span class="string">    上车后，如果没有空座，则站着等空座位</span></span><br><span class="line"><span class="string">如果没钱，不能上车</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 假设用 money = 1 表示有钱, money = 0表示没有钱; seat = 1 表示有空座，seat = 0 表示没有空座</span></span><br><span class="line">money = <span class="number">1</span></span><br><span class="line">seat = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> money == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;土豪，不差钱，顺利上车&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> seat == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;有空座，可以坐下&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有空座，站等&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没钱，不能上车，追着公交车跑&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="应用：猜拳游戏">应用：猜拳游戏</h2><p>需求分析：</p><ul class="lvl-0"><li class="lvl-2"><p>参与游戏的角色</p><ul class="lvl-2"><li class="lvl-4">玩家<ul class="lvl-4"><li class="lvl-6">手动出拳</li></ul></li><li class="lvl-4">电脑<ul class="lvl-4"><li class="lvl-6">随机出拳</li></ul></li></ul></li><li class="lvl-2"><p>判断输赢</p><ul class="lvl-2"><li class="lvl-4">玩家获胜</li></ul><table><thead><tr><th>玩家</th><th>电脑</th></tr></thead><tbody><tr><td>石头</td><td>剪刀</td></tr><tr><td>剪刀</td><td>布</td></tr><tr><td>布</td><td>石头</td></tr></tbody></table><ul class="lvl-2"><li class="lvl-4"><p>平局</p><ul class="lvl-4"><li class="lvl-6">玩家出拳 和 电脑出拳相同</li></ul></li><li class="lvl-4"><p>电脑获胜</p></li></ul></li></ul><p><strong>随机做法：</strong></p><ul class="lvl-0"><li class="lvl-2"><ol><li class="lvl-5">导出random模块</li></ol></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><ol start="2"><li class="lvl-5"><p>使用random模块中的随机整数功能</p><p>random.randint(开始,结束)</p></li></ol></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.randint(<span class="number">0</span>, <span class="number">2</span>)  <span class="comment"># 随机数 类型是int 随机范围0 1 2</span></span><br></pre></td></tr></table></figure><p><strong>具体实现：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">提示：0-石头，1-剪刀，2-布</span></span><br><span class="line"><span class="string">1. 出拳</span></span><br><span class="line"><span class="string">玩家输入出拳</span></span><br><span class="line"><span class="string">电脑随机出拳</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 判断输赢</span></span><br><span class="line"><span class="string">玩家获胜</span></span><br><span class="line"><span class="string">平局</span></span><br><span class="line"><span class="string">电脑获胜</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入random模块</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1，出拳</span></span><br><span class="line"><span class="comment"># 玩家</span></span><br><span class="line">player = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;玩家请出拳：0--石头；1--剪刀；2--布；&#x27;</span>))</span><br><span class="line"><span class="comment"># 电脑随机出拳</span></span><br><span class="line">computer = random.randint(<span class="number">0</span>, <span class="number">2</span>)  <span class="comment"># 随机数 类型是int 随机范围0 1 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;电脑出的是：<span class="subst">&#123;computer&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.判断输赢</span></span><br><span class="line"><span class="comment"># 利用与 或 非来作为if条件逻辑判断</span></span><br><span class="line"><span class="keyword">if</span> ((player == <span class="number">0</span>) <span class="keyword">and</span> (computer == <span class="number">1</span>)) <span class="keyword">or</span> ((player == <span class="number">2</span>) <span class="keyword">and</span> (computer == <span class="number">0</span>)) <span class="keyword">or</span> ((player == <span class="number">1</span>) <span class="keyword">and</span> (computer == <span class="number">2</span>)):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;玩家获胜&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> player == computer:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;平局&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;电脑获胜&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="三目运算符">三目运算符</h2><p>三目运算符也叫三元运算符。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">条件成立执行的表达式 <span class="keyword">if</span> 条件 <span class="keyword">else</span> 条件不成立执行的表达式</span><br><span class="line"></span><br><span class="line">值<span class="number">1</span> <span class="keyword">if</span> 条件 <span class="keyword">else</span> 值<span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>在C语言中</strong>，只有一个三目操作符（也称条件操作符）即：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">exp1 ? exp2 : exp2</span><br></pre></td></tr></table></figure><blockquote><p><strong>表达式1若为真，则由表达式2来赋值；表达式1若为假，则由表达式3来赋值.</strong><br>其求值规则为：<mark><strong>如果表达式1的值为真，则以表达式2的值作为整个条件表达式的值，否则以表达式3的值作为整个条件表达式的值。条件表达式通常用于赋值语句之中。</strong></mark></p></blockquote><p>快速体验：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">c = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求 ： 有两个变量，比较大小 如果变量1大于变量2 执行变量1-变量2 否则 执行变量2-变量1</span></span><br><span class="line">a = <span class="number">110</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = a - b <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b - a</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><h1 id="总结">总结</h1><ul class="lvl-0"><li class="lvl-2"><p>if语句语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>if…else…</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件不成立执行的代码</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>多重判断</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">2</span>成立执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    以上条件都不成立执行的代码</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>if嵌套</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>:</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        ....</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>三目运算符</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">条件成立执行的表达式 <span class="keyword">if</span> 条件 <span class="keyword">else</span> 条件不成立执行的表达式</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（二）输出</title>
      <link href="/pythonbasic2.html"/>
      <url>/pythonbasic2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="目标">目标</h2><ul class="lvl-0"><li class="lvl-2">格式化输出<ul class="lvl-2"><li class="lvl-4">格式化符号</li><li class="lvl-4">f-字符串</li></ul></li><li class="lvl-2">print的结束符</li></ul><h2 id="输出">输出</h2><p>作用：程序输出内容给用户</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello Python&#x27;</span>)</span><br><span class="line"></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：输出“今年我的年龄是18岁”</span></span><br></pre></td></tr></table></figure><h2 id="格式化输出">格式化输出</h2><p>所谓的格式化输出即按照一定的格式输出内容。<mark>print()函数<strong>格式化输出</strong>是<strong>按照格式化符号进行输出</strong></mark></p><h3 id="格式化符号">格式化符号</h3><table><thead><tr><th style="text-align:center">格式符号</th><th style="text-align:center">转换</th></tr></thead><tbody><tr><td style="text-align:center"><mark>%s</mark></td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center"><mark>%d</mark></td><td style="text-align:center">有符号的十进制整数（包含正负）</td></tr><tr><td style="text-align:center"><mark>%f</mark></td><td style="text-align:center">浮点数</td></tr><tr><td style="text-align:center">%c</td><td style="text-align:center">字符</td></tr><tr><td style="text-align:center">%u</td><td style="text-align:center">无符号十进制整数</td></tr><tr><td style="text-align:center">%o</td><td style="text-align:center">八进制整数</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">十六进制整数（小写ox）</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:center">十六进制整数（大写OX）</td></tr><tr><td style="text-align:center">%e</td><td style="text-align:center">科学计数法（小写’e’）</td></tr><tr><td style="text-align:center">%E</td><td style="text-align:center">科学计数法（大写’E’）</td></tr><tr><td style="text-align:center">%g</td><td style="text-align:center">%f和%e的简写</td></tr><tr><td style="text-align:center">%G</td><td style="text-align:center">%f和%E的简写</td></tr></tbody></table><blockquote><p><strong>技巧</strong></p><ul class="lvl-1"><li class="lvl-2">%06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出。<ul class="lvl-3"><li class="lvl-4">示例：表示显示数据的小数点前的前6位，不足补0</li></ul></li><li class="lvl-2">%.2f，表示小数点后需要显示的小数位数。<ul class="lvl-3"><li class="lvl-4">示例：表示显示数据的小数点后的前2位</li></ul></li></ul></blockquote><h3 id="格式化符号的运用">格式化符号的运用</h3><p><strong>注意</strong>：在print中如何引用变量，<mark><code>% 变量名</code></mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">23</span></span><br><span class="line">name = <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">weight = <span class="number">75.6</span></span><br><span class="line">stu_id = <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.今年年龄是多少岁 -整数 %d</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;今年年龄是%d岁&#x27;</span> % age)</span><br><span class="line"><span class="comment"># 2.名字是 -字符串 %s</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;名字是%s&#x27;</span> % name)</span><br><span class="line"><span class="comment"># 3.体重是 -浮点数 %f</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;体重是%0.1f&#x27;</span> % weight)</span><br><span class="line"><span class="comment"># 4 学号 - 整数 %d</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;学号是%d&#x27;</span> % stu_id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.名字是x,今年x岁</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;名字%s,今年%02d岁&#x27;</span> % (name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;名字%s,明年%02d岁&#x27;</span> % (name, age+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 名字是x,今年x岁，体重x公斤，学号是x</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;名字%s,今年%d岁，体重%.2f公斤,学号是%06d&#x27;</span> % (name, age, weight, stu_id))</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>今年年龄是23岁名字是tom<br>体重是75.6<br>学号是90<br>名字tom,今年23岁名字tom,明年24岁名字tom,今年23岁，体重75.60公斤,学号是000090</p></blockquote><p>格式化字符串除了%s，还可以写为==<code>f'&#123;表达式&#125;'</code>==</p><blockquote><p>f-格式化字符串是Python3.6中新增的格式化方法，该方法更简单易读。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拓展</span></span><br><span class="line">age = <span class="number">23</span></span><br><span class="line">name = <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">weight = <span class="number">75.6</span></span><br><span class="line">stu_id = <span class="number">90</span></span><br><span class="line"><span class="comment"># 7 名字是x,今年x岁，体重x公斤，学号是x</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;名字<span class="subst">&#123;name&#125;</span>,明年<span class="subst">&#123;age+<span class="number">1</span>&#125;</span>岁，体重<span class="subst">&#123;weight&#125;</span>公斤,学号是<span class="subst">&#123;stu_id&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="转义字符">转义字符</h3><ul class="lvl-0"><li class="lvl-2"><p><code>\n</code>：换行。</p></li><li class="lvl-2"><p><code>\t</code>：制表符，一个tab键（4个空格）的距离。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;hello\nworld&quot;) #在两个需要换行的字符中间加入\n即可</span><br><span class="line">print(&#x27;\tabcd&#x27;) ##在需要字符前空出4个空格加入\t即可</span><br></pre></td></tr></table></figure><p>输出结果：<br><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230509204225546.png" alt="image-20230509204225546"></p><h3 id="结束符">结束符</h3><blockquote><p>想一想，为什么两个print会换行输出？</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;输出的内容&#x27;</span>, end=<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在Python中，<mark>print()， 默认自带<code>end=&quot;\n&quot;</code>这个换行结束符</mark>，所以导致每两个<code>print</code>直接会换行展示，<b><font color=red>用户可以按需求更改结束符。</font></b></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, end=<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;python&quot;</span>, end=<span class="string">&quot;````````&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;wer&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时第二行代码与第三行代码中间会空出一个制表符距离，而不会出现默认换行情况。</p><p>此时第三行代码与第四行代码中间会出现````````，而不会出现默认换行情况。</p></blockquote><h2 id="总结">总结</h2><ul class="lvl-0"><li class="lvl-2"><p>格式化符号</p><ul class="lvl-2"><li class="lvl-4">%s：格式化输出字符串</li><li class="lvl-4">%d：格式化输出整数</li><li class="lvl-4">%f：格式化输出浮点数</li></ul></li><li class="lvl-2"><p>f-字符串</p><ul class="lvl-2"><li class="lvl-4">f’{表达式}’</li></ul></li><li class="lvl-2"><p>转义字符</p><ul class="lvl-2"><li class="lvl-4">\n：换行</li><li class="lvl-4">\t：制表符</li></ul></li><li class="lvl-2"><p>print结束符</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;内容&#x27;</span>, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（三）输入、 强制转换数据类型、 运算符</title>
      <link href="/pythonbasic3.html"/>
      <url>/pythonbasic3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="目标">目标</h2><ul class="lvl-0"><li class="lvl-2">输入功能的语法</li><li class="lvl-2">输入input的特点</li><li class="lvl-2">数据类型转换的必要性</li><li class="lvl-2">数据类型转换常用方法</li><li class="lvl-2">掌握常用运算符的作用</li></ul><h2 id="输入">输入</h2><p>在Python中，程序接收用户输入的数据的功能即是输入。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190116102035162-7605235.png" alt="image-20190116102035162" style="zoom: 33%;" /><h3 id="输入的语法">输入的语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span>(<span class="string">&quot;提示信息&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="输入的特点">输入的特点</h3><ul class="lvl-0"><li class="lvl-2"><p>当程序执行到<code>input</code>，<mark>等待用户输入</mark>，输入完成之后才继续向下执行。</p></li><li class="lvl-2"><p>在Python中，<code>input</code>接收用户输入后，一般<mark>存储到变量</mark>，方便使用。</p></li><li class="lvl-2"><p>在Python中，<code>input</code>会把接收到的任意用户<strong>输入的数据</strong>都当做<mark>字符串</mark>处理。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;请输入您的密码：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的密码是:<span class="subst">&#123;password&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br><span class="line"><span class="comment"># 类型是字符串</span></span><br></pre></td></tr></table></figure><p>控制台输出结果如下：</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230511185724914.png" alt="image-20230511185724914"></p><h3 id="总结">总结</h3><ul class="lvl-0"><li class="lvl-2"><p>输入功能</p><ul class="lvl-2"><li class="lvl-4">input(‘提示文字’)</li></ul></li><li class="lvl-2"><p>输入的特点</p><ul class="lvl-2"><li class="lvl-4"><p>一般将input接收的数据存储到变量</p></li><li class="lvl-4"><p>input接收的任何数据默认都是字符串数据类型</p></li></ul></li></ul><h2 id="强制转换数据类型">强制转换数据类型</h2><h3 id="转换数据类型的作用">转换数据类型的作用</h3><p>问：<strong>input()接收用户输入的数据都是字符串类型</strong>，如果用户输入1，想得到整型该如何操作？</p><p>答：转换数据类型即可，即将字符串类型转换成整型。<mark>将input()函数得到的数据（已自动成为字符串）强制转换为其他类型</mark></p><h3 id="转换数据类型的函数">转换数据类型的函数</h3><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><mark>int(x [,base ])</mark></td><td style="text-align:center">将x转换为一个整数</td></tr><tr><td style="text-align:center"><mark>float(x )</mark></td><td style="text-align:center">将x转换为一个浮点数</td></tr><tr><td style="text-align:center">complex(real [,imag ])</td><td style="text-align:center">创建一个复数，real为实部，imag为虚部</td></tr><tr><td style="text-align:center"><mark>str(x )</mark></td><td style="text-align:center">将对象 x 转换为字符串</td></tr><tr><td style="text-align:center">repr(x )</td><td style="text-align:center">将对象 x 转换为表达式字符串</td></tr><tr><td style="text-align:center"><mark>eval(str )</mark></td><td style="text-align:center">用来计算在字符串中的有效Python表达式,并返回一个对象<b><font color=red>（返回数据的原本类型）</font></b></td></tr><tr><td style="text-align:center"><mark>tuple(s )</mark></td><td style="text-align:center">将序列 s 转换为一个元组</td></tr><tr><td style="text-align:center"><mark>list(s )</mark></td><td style="text-align:center">将序列 s 转换为一个列表</td></tr><tr><td style="text-align:center">chr(x )</td><td style="text-align:center">将一个整数转换为一个Unicode字符</td></tr><tr><td style="text-align:center">ord(x )</td><td style="text-align:center">将一个字符转换为它的ASCII整数值</td></tr><tr><td style="text-align:center">hex(x )</td><td style="text-align:center">将一个整数转换为一个十六进制字符串</td></tr><tr><td style="text-align:center">oct(x )</td><td style="text-align:center">将一个整数转换为一个八进制字符串</td></tr><tr><td style="text-align:center">bin(x )</td><td style="text-align:center">将一个整数转换为一个二进制字符串</td></tr></tbody></table><h3 id="快速体验">快速体验</h3><p>需求：input接收用户输入，用户输入“1”，将这个数据1转换成整型。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 接收用户输入</span></span><br><span class="line">num = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的幸运数字：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;您的幸运数字是<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 检测接收到的用户输入的数据类型 -- str类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 转换数据类型为整型 -- int类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">int</span>(num)))</span><br></pre></td></tr></table></figure><h3 id="实验">实验</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. float() -- 转换成浮点型</span></span><br><span class="line">num1 = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(num1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">float</span>(num1)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. str() -- 转换成字符串类型</span></span><br><span class="line">num2 = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>(num2))) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. tuple() -- 将一个序列转换成元组</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]  <span class="comment"># list列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">tuple</span>(list1)))  <span class="comment"># tuple元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. list() -- 将一个序列转换成列表</span></span><br><span class="line">t1 = (<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)  <span class="comment"># tuple元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>(t1)))  <span class="comment"># list列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. eval() -- 将字符串中的数据转换成Python表达式原本类型（返回数据的原本类型）</span></span><br><span class="line">str1 = <span class="string">&#x27;10&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;10.1&#x27;</span></span><br><span class="line">str3 = <span class="string">&#x27;(1000, 2000, 3000)&#x27;</span></span><br><span class="line">str4 = <span class="string">&#x27;[1, 2, 3]&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str1)))  <span class="comment"># int</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str2)))  <span class="comment"># float</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str3)))  <span class="comment"># tuple元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str4)))  <span class="comment"># list 列表</span></span><br></pre></td></tr></table></figure><p>注：<b><font color=red>print得到数据是不会将得到的数据字符串化处理的，只有当格式化输出需要时，在print()函数加入格式化字符才会输出相应的类型</font></b></p><h3 id="总结-2">总结</h3><ul class="lvl-0"><li class="lvl-2"><p>转换数据类型常用的函数</p><ul class="lvl-2"><li class="lvl-4">int()</li><li class="lvl-4">float()</li><li class="lvl-4">str()</li><li class="lvl-4">list()</li><li class="lvl-4">tuple()</li><li class="lvl-4">eval()</li></ul></li></ul><h2 id="运算符">运算符</h2><h3 id="运算符的分类">运算符的分类</h3><ul class="lvl-0"><li class="lvl-2"><p>算数运算符</p></li><li class="lvl-2"><p>赋值运算符</p></li><li class="lvl-2"><p>复合赋值运算符</p></li><li class="lvl-2"><p>比较运算符</p></li><li class="lvl-2"><p>逻辑运算符</p></li></ul><h3 id="算数运算符">算数运算符</h3><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:left">1 + 1 输出结果为 2</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:left">1-1 输出结果为 0</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:left">2 * 2 输出结果为 4</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除（除尽）</td><td style="text-align:left">10 / 2 输出结果为 5</td></tr><tr><td style="text-align:center"><mark>//</mark></td><td style="text-align:center"><mark>整除</mark>(取商)</td><td style="text-align:left">9 // 4 输出结果为2</td></tr><tr><td style="text-align:center"><mark>%</mark></td><td style="text-align:center"><mark>取余</mark></td><td style="text-align:left">9 % 4 输出结果为 1</td></tr><tr><td style="text-align:center"><mark>**</mark></td><td style="text-align:center"><mark>指数</mark></td><td style="text-align:left">2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2</td></tr><tr><td style="text-align:center">()</td><td style="text-align:center">小括号</td><td style="text-align:left">小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9</td></tr></tbody></table><blockquote><p>注意：</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></p></li><li class="lvl-2"><p>只要运算中含浮点数（小数），计算出来的值一定是浮点数（小数）</p></li></ul><h3 id="赋值运算符">赋值运算符</h3><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">赋值</td><td style="text-align:center">将<code>=</code>右侧的结果赋值给等号左侧的变量</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>单个变量赋值</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>多个变量赋值</strong></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1, float1, str1 = <span class="number">10</span>, <span class="number">0.5</span>, <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(num1)</span><br><span class="line"><span class="built_in">print</span>(float1)</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230511210657988.png" alt="image-20230511210657988" style="zoom:70%;" /><ul class="lvl-0"><li class="lvl-2"><p><strong>多变量赋相同值</strong></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230511211124415.png" alt="image-20230511211124415" style="zoom:67%;" /><h3 id="复合赋值运算符">复合赋值运算符</h3><table><thead><tr><th style="text-align:center">运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td style="text-align:center">+=</td><td>加法赋值运算符</td><td>c += a 等价于 c = c + a</td></tr><tr><td style="text-align:center">-=</td><td>减法赋值运算符</td><td>c -= a 等价于 c = c- a</td></tr><tr><td style="text-align:center">*=</td><td>乘法赋值运算符</td><td>c *= a 等价于 c = c * a</td></tr><tr><td style="text-align:center">/=</td><td>除法赋值运算符</td><td>c /= a 等价于 c = c / a</td></tr><tr><td style="text-align:center">//=</td><td>整除赋值运算符</td><td>c //= a 等价于 c = c // a</td></tr><tr><td style="text-align:center">%=</td><td>取余赋值运算符</td><td>c %= a 等价于 c = c % a</td></tr><tr><td style="text-align:center">**=</td><td>幂赋值运算符</td><td>c ** = a 等价于 c = c ** a</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"><span class="comment"># 输出101  a = a + 1,最终a = 100 + 1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">b *= <span class="number">3</span></span><br><span class="line"><span class="comment"># 输出6  b = b * 3,最终b = 2 * 3</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">c = <span class="number">10</span></span><br><span class="line">c += <span class="number">1</span> + <span class="number">2</span></span><br><span class="line"><span class="comment"># 输出13, 先算运算符右侧1 + 2 = 3， c += 3 , 推导出c = 10 + 3</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p><strong>对于复杂的含复合赋值运算符的表达式:</strong></p><p><mark>先算复合赋值运算符右侧的表达式，再算复合赋值运算。</mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = <span class="number">56</span></span><br><span class="line">d *= <span class="number">10</span> + <span class="number">1</span></span><br><span class="line"><span class="comment"># d *= 11 -- d = 56*11</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符">比较运算符</h3><p>比较运算符也叫关系运算符， 通常用来判断。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)</td><td>如a=3,b=3，则（a == b) 为 True</td></tr><tr><td>!=</td><td>不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)</td><td>如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True</td></tr><tr><td>&gt;</td><td>运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &gt; b) 为 True</td></tr><tr><td>&lt;</td><td>运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &lt; b) 为 False</td></tr><tr><td>&gt;=</td><td>运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &lt; b) 为 False如a=3,b=3，则(a &gt;= b) 为 True</td></tr><tr><td>&lt;=</td><td>运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a=3,b=3，则(a &lt;= b) 为 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">7</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a == b)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a != b)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; b)   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a &gt; b)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><mark>结果只能得到True或False,用于判断语句较多</mark></p><h3 id="逻辑运算符">逻辑运算符</h3><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔&quot;与&quot;：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td><td>True and False， 返回 False。</td></tr><tr><td>or</td><td>x or y</td><td>布尔&quot;或&quot;：如果 x 是 True，它返回 True，否则它返回 y 的值。</td><td>False or True， 返回 True。</td></tr><tr><td>not</td><td>not x</td><td>布尔&quot;非&quot;：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not True 返回 False, not False 返回 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">3</span></span><br><span class="line"><span class="comment"># 1 and 与（且） 都真才真</span></span><br><span class="line"><span class="built_in">print</span>((a &lt; b) <span class="keyword">and</span> (c &gt; b))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>((a &gt; b) <span class="keyword">and</span> (c &gt; b))  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  or 或 有一真为真，都假才假</span></span><br><span class="line"><span class="built_in">print</span>((a &gt; b) <span class="keyword">or</span> (c &gt; b))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>((a &gt; c) <span class="keyword">or</span> (c &gt; b))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 not 非  真即非假</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span>(c)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> (a &gt; b)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><strong>使用运算符时，尽量加小括号（）来运算</strong></p><h4 id="拓展">拓展</h4><p>数字之间的逻辑运算</p><blockquote><p><mark>and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字<br>or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</mark></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">c = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> c)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">and</span> c)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">and</span> b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> c)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">or</span> c)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h3 id="总结-3">总结</h3><ul class="lvl-0"><li class="lvl-2"><p>算数运算的优先级</p><ul class="lvl-2"><li class="lvl-4">混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></li></ul></li><li class="lvl-2"><p>赋值运算符</p><ul class="lvl-2"><li class="lvl-4">=</li></ul></li><li class="lvl-2"><p>复合赋值运算符</p><ul class="lvl-2"><li class="lvl-4">+=</li><li class="lvl-4">-=</li><li class="lvl-4">优先级<ol><li class="lvl-7">先算复合赋值运算符右侧的表达式</li><li class="lvl-7">再算复合赋值运算的算数运算</li><li class="lvl-7">最后算赋值运算</li></ol></li></ul></li><li class="lvl-2"><p>比较运算符</p><ul class="lvl-2"><li class="lvl-4">判断相等： ==</li><li class="lvl-4">大于等于： &gt;=</li><li class="lvl-4">小于等于：&lt;=</li><li class="lvl-4">不等于： !=</li></ul></li><li class="lvl-2"><p>逻辑运算符</p><ul class="lvl-2"><li class="lvl-4">与： and</li><li class="lvl-4">或：or</li><li class="lvl-4">非：not</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法（一）变量、数据类型</title>
      <link href="/pythonbasic1.html"/>
      <url>/pythonbasic1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="目标">目标</h2><ul class="lvl-0"><li class="lvl-2">变量的作用</li><li class="lvl-2">定义变量</li><li class="lvl-2">认识数据类型</li></ul><h2 id="变量的作用">变量的作用</h2><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20230503114212314.png" alt="image-20230503114212314" style="zoom:60%;aligin:ceter;" /><p>举例体验：我们去图书馆读书，怎么样快速找到自己想要的书籍呢？是不是管理员提前将书放到固定位置，并把这个位置进行了编号，我们只需要在图书馆中按照这个编号查找指定的位置就能找到想要的书籍。</p><p>这个编号其实就是把书籍存放的书架位置起了一个名字，方便后期查找和使用。</p><p>程序中，数据都是临时存储在内存中，为了更快速的查找或使用这个数据，通常我们把这个数据在内存中存储之后定义一个名称，这个名称就是变量。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190122123202213.png" alt="image-20190122123202213"></p><blockquote><p>变量就是<strong>一个存储数据的的时候当前数据所在的内存地址的名字</strong>而已。</p></blockquote><h3 id="定义变量">定义变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量名 = 值(数据)</span><br></pre></td></tr></table></figure><blockquote><p>变量名自定义，要满足<mark>标识符</mark>命名规则。</p></blockquote><h3 id="标识符">标识符</h3><p><strong>标识符命名规则</strong>是Python中定义各种名字的时候的统一规范，具体如下：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>由数字、字母、下划线组成</strong></p></li><li class="lvl-2"><p>不能数字开头，可以放在中间</p></li><li class="lvl-2"><p>不能使用内置关键字（python已经定义的关键字）</p></li><li class="lvl-2"><p>严格区分大小写</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">False     None    True   and      as       assert   break     class  </span><br><span class="line">continue  def     del    elif     else     except   finally   for</span><br><span class="line">from      global  if     import   in       is       lambda    nonlocal</span><br><span class="line">not       or      pass   raise    return   try      while     with  </span><br><span class="line">yield</span><br></pre></td></tr></table></figure><h3 id="变量名的命名">变量名的命名</h3><ul class="lvl-0"><li class="lvl-2"><p>见名知义。</p></li><li class="lvl-2"><p>大驼峰：即每个单词首字母都大写，例如：<code>MyName</code>。</p></li><li class="lvl-2"><p>小驼峰：第二个（含）以后的单词首字母大写，例如：<code>myName</code>。</p></li><li class="lvl-2"><p>下划线(推荐）：例如：<code>my_name</code>。</p></li></ul><h3 id="使用变量">使用变量</h3><p>定义变量时，需**<font color=red>使用单引号’ ',引号里放具体数据</font>**</p><p><mark>变量需要先定义再使用</mark></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_name = <span class="string">&#x27;TOM&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(my_name)</span><br><span class="line"></span><br><span class="line">schoolName = <span class="string">&#x27;黑马程序员&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(schoolName)</span><br></pre></td></tr></table></figure><h3 id="认识bug">认识bug</h3><p>所谓bug，就是程序中的错误。如果程序有错误，需要程序员排查问题，纠正错误。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190115125845015-7528325.png" alt="image-20190115125845015"></p><h3 id="Debug工具">Debug工具</h3><p>Debug工具是PyCharm IDE中集成的用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程或者调解bug。</p><p>Debug工具使用步骤：</p><ol><li class="lvl-3"><p>打断点</p></li><li class="lvl-3"><p>Debug调试</p></li></ol><h4 id="打断点">打断点</h4><ul class="lvl-0"><li class="lvl-2"><p>断点位置</p></li></ul><p>目标要调试的代码块的第一行代码即可，即一个断点即可。</p><ul class="lvl-0"><li class="lvl-2"><p>打断点的方法</p></li></ul><p><strong>单击</strong>目标代码的<strong>行号右侧空白位置。</strong></p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190115130541289-7528741.png" alt="image-20190115130541289"></p><h3 id="Debug（调试）">Debug（调试）</h3><p>打成功断点后，在文件内部任意位置 — <strong>右键 – Debug（调试）‘文件名’ — 即可调出Debug（调试）工具面板 – 单击Step Over/F8</strong>，即可按步执行代码。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190115130809100-7528889.png" alt="image-20190115130809100"></p><h4 id="Debug输出面板分类">Debug输出面板分类</h4><ul class="lvl-0"><li class="lvl-2"><p>Debugger</p><ul class="lvl-2"><li class="lvl-4">显示变量和变量的细节</li></ul></li><li class="lvl-2"><p>Console</p><ul class="lvl-2"><li class="lvl-4">输出内容</li></ul></li></ul><h2 id="认识数据类型">认识数据类型</h2><p><strong>在 Python 里为了应对不同的业务需求，也把数据分为不同的类型。</strong></p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@Python/pythonStudy_img/image-20190111124628584-7181988.png" alt="image-20190111124628584"></p><blockquote><p>检测数据类型的方法：<code>type()</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment"># &lt;class &#x27;int&#x27;&gt; -- 整型</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">1.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))  <span class="comment"># &lt;class &#x27;float&#x27;&gt; -- 浮点型</span></span><br><span class="line"></span><br><span class="line">c = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt; -- 布尔型</span></span><br><span class="line"></span><br><span class="line">d = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))  <span class="comment"># &lt;class &#x27;str&#x27;&gt; -- 字符串</span></span><br><span class="line"></span><br><span class="line">e = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))  <span class="comment"># &lt;class &#x27;list&#x27;&gt; -- 列表</span></span><br><span class="line"></span><br><span class="line">f = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; -- 元组</span></span><br><span class="line"></span><br><span class="line">h = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(h))  <span class="comment"># &lt;class &#x27;set&#x27;&gt; -- 集合</span></span><br><span class="line"></span><br><span class="line">g = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(g))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt; -- 字典--键值对</span></span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><ul class="lvl-0"><li class="lvl-2"><p>定义变量的语法</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量名 = 值</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>标识符</p><ul class="lvl-2"><li class="lvl-4">由数字、字母、下划线组成</li><li class="lvl-4">不能数字开头</li><li class="lvl-4">不能使用内置关键字</li><li class="lvl-4">严格区分大小写</li></ul></li><li class="lvl-2"><p>数据类型</p><ul class="lvl-2"><li class="lvl-4">整型：int</li><li class="lvl-4">浮点型：float</li><li class="lvl-4">字符串：str</li><li class="lvl-4">布尔型：bool</li><li class="lvl-4">元组：tuple</li><li class="lvl-4">集合：set</li><li class="lvl-4">字典：dic</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conda常用操作及源的配置、pip源的配置</title>
      <link href="/techdoc1.html"/>
      <url>/techdoc1.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6e2a67a8a88141ee7ce8a198f67eecfe346dfc3528459f7e018857acfb184f33"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 技术文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C进阶语法（九）指针的进阶</title>
      <link href="/C9.html"/>
      <url>/C9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="指针基础">指针基础</h2><p>指针的主题，我们在初级阶段的《指针》章节已经接触过了，我们知道了指针的概念：</p><blockquote><p>1.指针就是变量，是用来存地址的，地址是唯一标识一块内存空间<br>2.指针的大小是固定的4/8个字节（由平台决定，32位/64位）<br>3.指针是有类型的，通常类型有char、int 、short、long、float、double<br>4.指针类型决定了指针±整数的步长，指针解引用操作的时候的能够访问空间的大小<br>5.指针的运算。</p><ul class="lvl-1"><li class="lvl-2"><strong>指针±整数(==&gt;指针指向的是该地址的上一个或下一个地址）</strong></li><li class="lvl-2"><strong>指针-指针（指向同一内存空间,可得指针之间的元素个数）</strong></li><li class="lvl-2"><strong>指针的关系运算（比较地址大小）</strong></li></ul></blockquote><h2 id="字符指针">字符指针</h2><p>指针类型中存在一种字符指针<code>char*</code></p><p><b>一般使用：</b></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch= <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> *pc = &amp;ch;</span><br><span class="line">    *pc =<span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b>另一种使用方式：</b></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = <span class="string">&quot;hello bit.&quot;</span>;<span class="comment">//这里是把一个字符串放到pstr指针变量里了吗？</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pstr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>注：</strong></em></p><blockquote><p><strong><font color=black>(一）常量指针int const* p 和 const int* p</font></strong></p><p><b><font color=red>const 放在指针变量的 * 左边时，表示该指针所指向的数据（地址内的内容）是常量，即不能通过该指针修改所指向的数据。但p所指向的地址可以变。</font></b></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line">&gt;<span class="type">const</span> <span class="type">int</span> *p = &amp;num;  <span class="comment">// 将const放在*的左边，表示所指向的数据是常量</span></span><br><span class="line">&gt;*p = <span class="number">20</span>;  <span class="comment">// 编译错误，因为p所指向的数据是常量</span></span><br><span class="line">&gt;p++;     <span class="comment">// 合法，p本身不是常量</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，p 是一个指向 num的常量指针，即不能通过 p修改 num的值。但是可以通过 p 修改其指向的地址。</p><p>注**：int const* p定义了一个指向 const int类型数据的指针变量 p，也就是说，p 所指向的数据是一个常量，不能通过 p修改其所指向的数据**。但是 p本身不是常量，可以指向其他的 const int类型数据。</p><p><strong><font color=black>(二）指针常量int* const p</font></strong></p><p><b><font color=red>const放在指针变量的*右边时，表示指针本身是常量。它指向的地址是不可改变的，但地址里的内容可以通过指针改变。</font></b></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line">&gt;<span class="type">int</span> *<span class="type">const</span> p = &amp;num;  <span class="comment">// 将const放在*的左边，并且指针本身也是常量</span></span><br><span class="line">&gt;*p = <span class="number">20</span>;   <span class="comment">// 合法，可以通过p来修改所指向的数据</span></span><br><span class="line">&gt;p++;      <span class="comment">// 编译错误，因为p本身是常量，不能修改其指向的地址</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，int* const p就是一个指针常量，表示定义了一个指向 int 类型的指针变量 p，且这个指针变量是一个常量，其值(地址）不能被改变，但它所指向的 int类型数据（地址内的内容）可以被修改。</p><p><b><font color=black>总结:</font></b></p><p>一般是根据靠近原则来看，<strong>const修饰p那么就是指针本身值（即指向的地址）不变，const修饰*p那么就是指指针指向的变量值（指向的值）不变</strong></p><p><strong><font color=red>加深记忆记住三句话：</font></strong></p><ul class="lvl-1"><li class="lvl-2"><p>指针和 const 谁在前先读谁 ；</p></li><li class="lvl-2"><p>*象征着地址，const象征着内容；</p></li><li class="lvl-2"><p>谁在前面<strong>谁就不允许改变。</strong></p></li></ul></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;abcdefk&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;abcdefk&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* p1 = <span class="string">&quot;abcdefk&quot;</span>;<span class="comment">//const使变量</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* p2 = <span class="string">&quot;abcdefk&quot;</span>;<span class="comment">//常量字符串的地址会在内存中单独开辟一个空间，地址固定，</span></span><br><span class="line"><span class="keyword">if</span> (p1 == p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;haha\n &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if (arr1 = arr2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;hehe\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;haha\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里p1和p2指向的是一个<b><font color=red>同一个常量字符串</font></b>。C/C++会把常量字符串存储到单独的一个内存区域，当几个指针。<strong>指向同一个字符串的时候，他们实际会指向同一块内存。但是用相同的常量字符串去初始化</strong><br><strong>不同的数组的时候就会开辟出不同的内存块</strong>。所以arr11和arr2不同，p1和p2不同。  <strong>来源《剑指offer》</strong></p><h2 id="指针数组">指针数组</h2><blockquote><p><strong>预备知识：</strong></p><ul class="lvl-1"><li class="lvl-2"><p>1.&amp;arr-数组名-此时数组名不是首元素的地址–数组名表示整个数组–&amp;数组名 取出的是整个数组的地址。</p></li><li class="lvl-2"><p>2.sizeof(arr)-sizeof(数组名）-数组名表示整个数组-sizeof(数组名）计算的是整个数组的大小。</p></li><li class="lvl-2"><p>除1、2以外，<strong><font color=blue>数组名表示数组的首元素的地址</font></strong></p></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">int</span>* arr1[<span class="number">10</span>]; <span class="comment">//整形指针的数组</span></span><br><span class="line"><span class="type">char</span> *arr2[<span class="number">4</span>]; <span class="comment">//一级字符指针的数组</span></span><br><span class="line"><span class="type">char</span> **arr3[<span class="number">5</span>];<span class="comment">//二级字符指针的数组```</span></span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr1[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr2[] = &#123; <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr3[] = &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="type">int</span>* parr[] = &#123; arr1,arr2,arr3 &#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E4%B9%9D%E8%8A%82%20%E6%8C%87%E9%92%88%E7%9A%84%E8%BF%9B%E9%98%B6/image-20230422002000521.png" alt="image-20230422002000521"></p><p><strong>指针数组用法：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr1[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr2[] = &#123; <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr3[] = &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* parr[] = &#123; arr1,arr2,arr3 &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(parr[i] + j));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组指针">数组指针</h2><h3 id="数组指针的定义">数组指针的定义</h3><p><strong>数组指针是指针</strong></p><blockquote><p>整形指针：int * pint; 能够指向整形数据的指针。浮点型指针：float * pf; 能够指向浮点型数据的指针。数组指针：能够指向数组的指针</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p1[<span class="number">10</span>];<span class="comment">//==int* p1[10] 指针数组</span></span><br><span class="line"><span class="type">int</span> (*p2)[<span class="number">10</span>];<span class="comment">//数组指针</span></span><br><span class="line"><span class="comment">//p1, p2分别是什么？</span></span><br></pre></td></tr></table></figure><p><strong>指针数组</strong>，对于语句“int* p1[10]”，因为“[]”的优先级要比“*”要高，所以 p1 先与“[]”结合，构成一个数组的定义，数组名为 p1，而“int*”修饰的是数组的内容，即数组的每个元素。也就是说，<strong>该数组包含 10个指向 int 类型数据的指针，<strong>如图 1 所示，因此，它是</strong>一个指针数组</strong>。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E4%B9%9D%E8%8A%82%20%E6%8C%87%E9%92%88%E7%9A%84%E8%BF%9B%E9%98%B6/22201218-19ddd896ae6a45e1b61c7e3ee59b4662.jpg" alt="Attachment"></p><p>​                                                                                                                      图 1</p><p><strong>数组指针</strong>，对于语句“int(*p2)[5]”，“()”的优先级比“[]”高，“*<strong>”号和 p2 构成一个指针的定义</strong>，<strong>指针变量名为 p2</strong>，**而 int 修饰的是数组的内容，即数组的每个元素。**也就是说，<strong>p2 是一个指针，它指向一个包含 10 个 int 类型数据的数组</strong>，如图 2 所示。很显然，它是一个数组指针，<strong>数组在这里并没有名字，是个匿名数组</strong>。</p><p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E4%B9%9D%E8%8A%82%20%E6%8C%87%E9%92%88%E7%9A%84%E8%BF%9B%E9%98%B6/22201218-19ddd896ae6a45e1b61c7e3ee59b4662(1).jpg" alt="Attachment"></p><p>​                                                                                                                  图 2</p><p>由此可见，</p><blockquote><p>对指针数组来说，首先它是一个数组，数组的元素都是指针，也就是说该数组存储的是指针，数组占多少个字节由数组本身决定；而对数组指针来说，<strong>首先它是一个指针</strong>，**它指向一个数组，**也就是说它是指向数组的指针，&gt;在 32 位系统下永远占 4 字节，至于它指向的数组占多少字节，这个不能够确定，要看具体情况。</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//int* p = NULL;//p是整形指针 - 指向整形的指针 - 可以存放整形的地址</span></span><br><span class="line"><span class="comment">//char* pc = NULL;//pa是字符指针 - 指向字符的指针 - 可以存放字符的地址</span></span><br><span class="line">                  <span class="comment">//数组指针 - 指向数组的指针 -可以存放数组的地址</span></span><br><span class="line"><span class="comment">//int arr[10] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//arr-首元素地址</span></span><br><span class="line"><span class="comment">//&amp;arr[0]-首元素的地址</span></span><br><span class="line"><span class="comment">//&amp;arr-数组的地址(整个数组）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> (*p)[<span class="number">10</span>] = &amp;arr;<span class="comment">//数组的地址要存起来</span></span><br><span class="line"><span class="comment">//上面的p就是数组指针</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* arr[<span class="number">5</span>];<span class="comment">//指针数组</span></span><br><span class="line"><span class="type">char</span>* (*pa)[<span class="number">5</span>]=&amp;arr;</span><br><span class="line"><span class="comment">//*pa指针指向数组5个元素，即(*pa)[5]；而指向的数组元素类型是char*。</span></span><br><span class="line">  <span class="comment">//故取数组的地址&amp;arr写成：char* (*pa)[5]=&amp;arr； </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E4%B9%9D%E8%8A%82%20%E6%8C%87%E9%92%88%E7%9A%84%E8%BF%9B%E9%98%B6/image-20230422185558143.png" alt="image-20230422185558143" style="zoom:50%;" /><h3 id="数组名VS数组名">&amp;数组名VS数组名</h3><p><strong><font color=red>&amp;arr是取的整个数组的地址</font></strong></p><h3 id="数组指针用法">数组指针用法</h3><h4 id="用法1：">用法1：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>(*pa)[<span class="number">10</span>] = &amp;arr;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(*pa+i));<span class="comment">//*pa==arr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用法2-地址传参">用法2:地址传参</h4><p><strong>二维数组看作一维数组，则其数组名就是首元素的地址</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">arr[i] == *(a+i) == *(p+i) ==  p[i]</span><br><span class="line">  </span><br><span class="line">*(*(p + i) + j)== *(p[i] + j)==(*(p + i))[j]==p[i][j]</span><br></pre></td></tr></table></figure><p><strong>例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(*(p + i) + j);<span class="comment">//(p + i)找到n维数组第i行的地址，(*(p + i) + j)找到n维数组第i行的第j列元素的地址</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数是数组的形式</span></span><br><span class="line"><span class="comment">//void print1(int arr[3][5], int x, int y)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////int i = 0, j = 0;</span></span><br><span class="line"><span class="comment">////for (i = 0;i &lt; x;i++)</span></span><br><span class="line"><span class="comment">////&#123;</span></span><br><span class="line"><span class="comment">////for (j = 0;j &lt; y;j++)</span></span><br><span class="line"><span class="comment">////&#123;</span></span><br><span class="line"><span class="comment">////printf(&quot;%d &quot;, arr[i][j]);</span></span><br><span class="line"><span class="comment">////&#125;</span></span><br><span class="line"><span class="comment">////printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">////&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数是指针的形式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print2</span><span class="params">(<span class="type">int</span> (*p)[<span class="number">5</span>], <span class="type">int</span> x, <span class="type">int</span> y)</span><span class="comment">//int (*p)[5] - 数组指针p是指向含5个元素为int类型的数组</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; x;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; y;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p[i][j]);</span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, *(p[i] + j));</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, * (*(p + i) + j));//(p + i)找到n维数组第i行的地址，(*(p + i) + j)找到n维数组第i行的第j列元素的地址</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, (*(p + i))[j]);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125; &#125;;</span><br><span class="line"><span class="comment">//print1(arr, 3, 5);//arr - 数组名 -数组名就是首元素的地址</span></span><br><span class="line">print2(arr, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">//数组名arr，表示首元素的地址</span></span><br><span class="line">    <span class="comment">//但是二维数组的首元素是二维数组的第一行</span></span><br><span class="line">    <span class="comment">//所以这里传递的arr，其实相当于第一行的地址，是一维数组的地址</span></span><br><span class="line">    <span class="comment">//可以数组指针来接收</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//int arr[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;</span></span><br><span class="line"><span class="comment">//int i = 0;</span></span><br><span class="line"><span class="comment">//int* p = arr;</span></span><br><span class="line"><span class="comment">//for (i = 0;i &lt; 10;i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////printf(&quot;%d &quot;, *(p + i));</span></span><br><span class="line"><span class="comment">////printf(&quot;%d &quot;,p[i]);</span></span><br><span class="line"><span class="comment">////printf(&quot;%d &quot;, *(arr + i));</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, arr[i]);//arr[i] == *(a+i) == *(p+i) ==  p[i]</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">5</span>];<span class="comment">//arr是一个含5个元素的整形数组</span></span><br><span class="line"><span class="type">int</span> *parr1[<span class="number">10</span>];<span class="comment">//parr1是一个数组，数组有10个元素，每个元素的类型是int*,故parr1是指针数组</span></span><br><span class="line"><span class="type">int</span> (*parr2)[<span class="number">10</span>];<span class="comment">//parr2是数组指针，它指向一个含10个元素的数组，数组的元素类型是int</span></span><br><span class="line"><span class="type">int</span> (*parr3[<span class="number">10</span>])[<span class="number">5</span>];<span class="comment">//parr3是数组，该数组的有10个元素，每个元素是一个数组指针；该数组指针指向的数组有5个元素，每个元素类型是int</span></span><br></pre></td></tr></table></figure><h3 id="数组参数、指针参数">数组参数、指针参数</h3><h4 id="一维数组传参">一维数组传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[])</span><span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">10</span>])</span><span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> *arr)</span><span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span> *arr[<span class="number">20</span>])</span><span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span> **arr)</span><span class="comment">//ok//一级指针的地址存放在二级指针里 int **arr</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *arr2[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">    test2(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二维数组传参">二维数组传参</h4><p><strong>二维数组的数组名是首元素的地址，传参时，传入的是<font color=red>数组第一行地址</font></strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>])</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test1</span><span class="params">(<span class="type">int</span> arr[][<span class="number">5</span>])</span><span class="comment">//数组传参，行可以省略，列不可以省略</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span> arr[][])</span><span class="comment">//error</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test3</span><span class="params">(<span class="type">int</span> *arr)</span><span class="comment">//error,二维数组无法存放整形指针中去</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test4</span><span class="params">(<span class="type">int</span>** arr)</span><span class="comment">//error,数组名是第一行地址，而二级指针存放是一级变量（指针）的地址</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="comment">//总结：二维数组传参，函数形参的设计只能省略第一个[]的数字。</span></span><br><span class="line"><span class="comment">//因为对一个二维数组，可以不知道有多少行，但是必须知道一行多少元素。</span></span><br><span class="line"><span class="comment">//这样才方便运算。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test5</span><span class="params">(<span class="type">int</span>* arr[<span class="number">5</span>])</span><span class="comment">//ok？//error</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test6</span><span class="params">(<span class="type">int</span> (*arr)[<span class="number">5</span>])</span><span class="comment">//ok？//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一级指针传参">一级指针传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> *p, <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sz; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p = arr;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//一级指针p，传给函数</span></span><br><span class="line">    print(p, sz);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思考：</strong></p><blockquote><p>当一个函数的参数部分为一级指针的时候，函数能接收什么参数？</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="type">void</span> <span class="title function_">test1</span><span class="params">(<span class="type">int</span> *p)</span></span><br><span class="line">  &#123;&#125;</span><br><span class="line"><span class="comment">//test1函数能接收什么参数？  test1(&amp;a);或test1(p1);</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span>* p1=&amp;a;</span><br><span class="line">  test1(&amp;a);</span><br><span class="line">  test1(p1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">char</span>* p)</span></span><br><span class="line">   &#123;&#125;</span><br><span class="line"><span class="comment">//test2函数能接收什么参数？  test2(&amp;ch);或test2(str);</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; <span class="type">char</span> ch=<span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">  <span class="type">char</span>* str=&amp;ch;</span><br><span class="line">  test2(&amp;ch);</span><br><span class="line">  test2(str);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="二级指针传参">二级指针传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>** ptr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, **ptr);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *p = &amp;n;</span><br><span class="line">    <span class="type">int</span> **pp = &amp;p;<span class="comment">//取一级指针p的地址</span></span><br><span class="line">    test(pp);</span><br><span class="line">    test(&amp;p);</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span>* arr[<span class="number">10</span>];<span class="comment">//指针数组，数组里每个元素都是一级指针</span></span><br><span class="line">  test(arr);<span class="comment">//传过去的是arr数组首元素的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考：</p><blockquote><p>当函数的参数为二级指针的时候，可以接收什么参数？</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">char</span> **p)</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">   </span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">   <span class="type">char</span> c = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">   <span class="type">char</span>*pc = &amp;c;</span><br><span class="line">   <span class="type">char</span>**ppc = &amp;pc;</span><br><span class="line">   <span class="type">char</span>* arr[<span class="number">10</span>];<span class="comment">//指针数组，数组里每个元素都是一级指针</span></span><br><span class="line">   test(&amp;pc);</span><br><span class="line">   test(ppc);</span><br><span class="line">   test(arr);<span class="comment">//Ok?//ok//传过去的是arr数组首元素的地址</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="函数指针">函数指针</h2><p><strong>&amp;函数名 和 函数名 都是函数的地址</strong></p><p>函数指针定义示例：</p><pre><code>int Add(int x, int y)&#123;&#125;int (*pa)(int ,int ) = Add;printf(&quot;%d\n&quot;, (*pa)(2, 3));</code></pre><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数指针 - 是指向函数的指针 -存放函数地址的指针</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> z = x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">/*printf(&quot;%d &quot;, Add(a, b));*/</span></span><br><span class="line"><span class="comment">//&amp;函数名 和 函数名 都是函数的地址</span></span><br><span class="line"><span class="comment">//printf(&quot;%p\n&quot;, &amp;Add);//打印出函数的地址</span></span><br><span class="line"><span class="comment">//printf(&quot;%p\n&quot;, Add);//打印出函数的地址</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> (*pa)(<span class="type">int</span> ,<span class="type">int</span> ) = Add;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (*pa)(<span class="number">2</span>, <span class="number">3</span>));<span class="comment">//5</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用法：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span> (*p)(<span class="type">char</span>*) = Print;</span><br><span class="line">(*p)(<span class="string">&quot;hello bit&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>课件：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面pfun1和pfun2哪个有能力存放test函数的地址？</span></span><br><span class="line"><span class="type">void</span> (*pfun1)();</span><br><span class="line"><span class="comment">//pfun1可以存放。pfun1先和*结合，说明pfun1是指针，指针指向的是一个函数，指向的函数无参数，返回值类型为void。</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">pfun2</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//pfun2表明这是一个函数，其返回类型是void*</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语法 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C进阶语法（八）数据的存储</title>
      <link href="/C8.html"/>
      <url>/C8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数据类型详细介绍">数据类型详细介绍</h2><p><strong>内置类型</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>    <span class="comment">//字符数据类型</span></span><br><span class="line"><span class="type">short</span>    <span class="comment">//短整型</span></span><br><span class="line"><span class="type">int</span>     <span class="comment">//整形</span></span><br><span class="line"><span class="type">long</span>    <span class="comment">//长整型</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span>  <span class="comment">//更长的整形</span></span><br><span class="line"><span class="type">float</span>    <span class="comment">//单精度浮点数</span></span><br><span class="line"><span class="type">double</span>   <span class="comment">//双精度浮点数</span></span><br></pre></td></tr></table></figure><p>int 和float都是占内存4个字节，但是在内存中存储形式不同</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/第八节 数据的存储/image-1.png" style="zoom: 67%;" /><p><strong>自定义类型（构造类型）</strong>—略，后面会讲。</p><h3 id="类型的基本归类：">类型的基本归类：</h3><p><strong>整形家族：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span><span class="comment">//在内存中以Ascall码存储的</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">char</span></span><br><span class="line"><span class="type">short</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> [<span class="type">int</span>]</span><br><span class="line">    <span class="type">signed</span> <span class="type">short</span> [<span class="type">int</span>]</span><br><span class="line"><span class="type">int</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span></span><br><span class="line"><span class="type">long</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> [<span class="type">int</span>]</span><br><span class="line">    <span class="type">signed</span> <span class="type">long</span> [<span class="type">int</span>]</span><br></pre></td></tr></table></figure><p><strong>浮点型家族</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span></span><br><span class="line"><span class="type">double</span></span><br></pre></td></tr></table></figure><p><strong>构造类型：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt; 数组类型</span><br><span class="line">&gt; 结构体类型 <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&gt;</span> 枚举类型 <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&gt;</span> 联合类型 <span class="class"><span class="keyword">union</span></span></span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680841072601-18.png" /><p><strong>例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//无类型，此时在main中输入100是错误的</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        test(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整形在内存中的存储：">整形在内存中的存储：</h2><h3 id="原码、反码、补码">原码、反码、补码</h3><p>计算机中的<font color=Red><strong>整数（有符号数）</strong></font>有三种表示方法，即原码、反码和补码。</p><p>三种表示方法均有<strong>符号位和数值位</strong>两部分，符号位都是<strong>用0表示“正”，用1表示“负”</strong>，</p><p><strong>无符号数原码、反码、补码都相同</strong></p><p><strong>正数的原、反、补码都相同。</strong></p><p>而数值位<strong>负数的三种表示方法各不相同</strong>。如下：</p><table><thead><tr><th style="text-align:left"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680842673110-7.png" align="left" /></th></tr></thead><tbody><tr><td style="text-align:left"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680842677026-9.png" align="left" /></td></tr><tr><td style="text-align:left"><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680842682081-11.png" style="zoom:67%;" align="left"/></td></tr></tbody></table><p><strong>对于整形来说：数据存放内存中其实存放的是补码。</strong></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680843045650-13.png" /><h3 id="二进制与八进制、十六进制转化规则">二进制与八进制、十六进制转化规则</h3><p><strong>十六进制与二进制转化规则：“8421”原则，即4个二进制位构成1个十六进制位，并按照“8421”原则转化</strong></p><p><strong>八进制与二进制转化规则：“421”原则，即3个二进制位构成1个八进制位，并按照“421”原则转化</strong></p><p><strong>例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">20</span>;<span class="comment">//4个字节-32bit</span></span><br><span class="line">        <span class="comment">//00000000 00000000 00000000 00010100-原码</span></span><br><span class="line">        <span class="comment">//00000000 00000000 00000000 00010100-反码</span></span><br><span class="line">        <span class="comment">//00000000 00000000 00000000 00010100-补码</span></span><br><span class="line">        <span class="comment">//0X0014</span></span><br><span class="line">        <span class="type">int</span> b = <span class="number">-10</span>;</span><br><span class="line">        <span class="comment">//10000000 00000000 00000000 00001010-原码</span></span><br><span class="line">        <span class="comment">//11111111 11111111 11111111 11110101-反码</span></span><br><span class="line">        <span class="comment">//11111111 11111111 11111111 11110110-补码</span></span><br><span class="line">        <span class="comment">//0XFFFFFFF6</span></span><br><span class="line">        <span class="comment">//内存中存的是整数的补码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大小端字节序介绍及判断">大小端字节序介绍及判断</h3><p>对于a和b分别存储的是补码。但是我们发现存储到内存后顺序有点不对劲</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/%E7%AC%AC1%E8%8A%82-%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8.png" style="zoom:50%;"/><h4 id="大小端介绍">大小端介绍</h4><p><strong>什么大端小端：</strong></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680844912666-16.png" /><p><strong>大端正着存数据，小端倒着存数据。</strong></p><p><em>编译器支持大端存储或者小端存储模式</em></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680846416559-18.png" style="zoom:60%;" /><p>**例：**写一段代码告诉我们当前机器的字节序是什么？</p><p><em>char</em>类型访问一个字节的地址*</p><p><strong>//指针类型的意义：</strong></p><p>1.指针类型决定了指针解引用操作符能访问几个字节：<code>char*</code>能访问1个字节，<code>int*</code>能访问4个字节</p><p>2.指针类型决定了指针+1、-1，能加或者能减的是几个字节；<code>char*p,p+1跳过1个字节</code>；<code>int*p,p+1:跳过4个字节</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回1 小端存储</span></span><br><span class="line"><span class="comment">//返回0 大端存储</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">check_sys</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span>*p=(<span class="type">char</span>*)&amp;a;<span class="comment">//将&amp;a类型从int*强制转换为char*,方便指针p调用</span></span><br><span class="line">    <span class="keyword">return</span> *p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ret = check_sys();<span class="comment">//将&amp;a类型从int*强制转换为char*,方便指针p调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret== <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;小端存储\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;大端存储\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习">练习</h3><h4 id="例1："><strong>例1：</strong></h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//-1-char类型 占1个字节即8个比特位</span></span><br><span class="line">    <span class="comment">//10000001-原码</span></span><br><span class="line">    <span class="comment">//11111110-反码</span></span><br><span class="line">    <span class="comment">//11111111-补码</span></span><br><span class="line">    <span class="type">char</span> a = <span class="number">-1</span>;<span class="comment">//char-字符类型 占1个字节</span></span><br><span class="line">    <span class="comment">//11111111-补码---&gt;-1</span></span><br><span class="line"></span><br><span class="line">    <span class="type">signed</span> <span class="type">char</span> b = <span class="number">-1</span>;<span class="comment">//signed符号数</span></span><br><span class="line">    <span class="comment">//11111111-补码---&gt;-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> c = <span class="number">-1</span>;<span class="comment">//unsigned-无符号数</span></span><br><span class="line">    <span class="comment">//11111111-补码、原码-----&gt;255</span></span><br><span class="line">    <span class="comment">//类型提升：从有符号数(char)转换为无符号数(unsigned char)，最高位转为无符号位。</span></span><br><span class="line">    <span class="comment">//此时由于unsigned存在，整型直接将有符号位转换为无符号位</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d,c=%d&quot;</span>, a, b, c);<span class="comment">//%d-整型，此时会发生类型提升</span></span><br><span class="line">    <span class="comment">//-1 -1 255</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，变量c是一个无符号的char类型，其取值范围为0到255。当将有符号的-1赋给无符号的变量c时，<strong>由于无符号数不支持负数，编译器会先将-1转换为其对应的无符号整数表示方式</strong>，即<strong>将有符号数的补码转换为无符号数的值</strong>。</p><p>在8位(char)情况下，-1的补码为11111111，将其转换为无符号整数后，其值为2^8 - 1 = 255。因此，当用printf函数并指定格式化字符串为&quot;%d&quot;时，输出的结果为c=255，对应于二进制表示为11111111。</p><h4 id="例2："><strong>例2：</strong></h4><p><strong>//<font color=Red>类型提升：从有符号数(char)转换为无符号数（unsigned int)，补位须与最高位相同。</font></strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a = <span class="number">-128</span>;</span><br><span class="line">    <span class="comment">//10000000-原码</span></span><br><span class="line">    <span class="comment">//11111111-反码</span></span><br><span class="line">    <span class="comment">//10000000-补码（8位）</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, a);<span class="comment">//%u-打印十进制的无符号数，</span></span><br><span class="line">    <span class="comment">//%u将a从有符号字符(char)转换为无符号数（unsigned int)，补位须与最高位相同。</span></span><br><span class="line">    <span class="comment">//11111111 11111111 11111111 10000000</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>char类型确实只占8位，但在这段代码中，使用**%u格式说明符时将变量a强制转换为无符号整数(unsigned int)类型。通常情况下，unsigned int类型在大多数系统架构中都是占用32位的内存空间。**</p><p>因此，当a的值为-128时，其在内存中的二进制补码表示为10000000。**按照%u格式说明符进行输出时，编译器会先将其强制转换为一个32位的无符号整数(unsigned int)，补齐高位后输出其二进制表示。**因此输出的结果为11111111 11111111 11111111 10000000的二进制表示，对应于4294967168这个十进制无符号整数。</p><h4 id="注：">注：</h4><p><strong><font color=Red>signed char(有符号字符）类型范围是-128~127，超过127自动转化为-128直到转化到0，再从0开始累计</font></strong></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680848507527-22.png" style="zoom:50%;" /><p><strong><font color='red'>unsigned char(无符号字符)类型范围是0~225，超过225自动转化为0，再开始累计</font></strong></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680848316815-20.png" style="zoom:67%;" /><h4 id="例3："><strong>例3：</strong></h4><p><strong>//<font color='red'>signed char（有符号字符）类型最大只能存入01111111（127）当超过之后，就会变成127+1变成-128了，不溢出。</font></strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123; <span class="type">char</span> a = <span class="number">128</span>; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, a); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//signed char（无符号字符）类型最大只能存入01111111（127）当超过之后，就会变成127+1变成-128了，不溢出。  </span></span><br></pre></td></tr></table></figure><h4 id="例4："><strong>例4：</strong></h4><p><strong>//<font color='red'>有符号和无符号一起计算时，首先按照补码的形式进行运算，最后格式化成为有符号数</font></strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">-20</span>;</span><br><span class="line">    <span class="comment">//10000000 00000000 00000000 00010100</span></span><br><span class="line">    <span class="comment">//11111111 11111111 11111111 11101011</span></span><br><span class="line">    <span class="comment">//11111111 11111111 11111111 11101100-补码</span></span><br><span class="line">                                </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//00000000 00000000 00000000 00001010</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a + b);</span><br><span class="line">    <span class="comment">//11111111 11111111 11111111 11101100-a</span></span><br><span class="line">    <span class="comment">//00000000 00000000 00000000 00001010-b</span></span><br><span class="line">    <span class="comment">//11111111 11111111 11111111 11110110-a+b---&gt;-10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例5："><strong>例5：</strong></h4><p>**//<font color='red'> unsigned int i; 其中i为无符号数，无论i含不含负数，都认为是无符号数。此时会将其补码视为无符号数真实值，即i始终大于等于0 </font>**下列代码中会陷入死循环。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, i);</span><br><span class="line">        Sleep(<span class="number">1000</span>);<span class="comment">//睡眠代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例6：">例6：</h4><p><strong>signed</strong> **char(有符号字符）的范围是-128<sub>127，当char数组存入int元素时,会将其转换为char类型**，由此，下列代码中存入到char数组的元素经历了从-1</sub>-128<sub>127</sub>0转化，而char字符0表示的是‘\0’，故最终计算字符串长度为255.</p><p><strong>注：</strong> <strong>//<font color=red>int类型占4个字节，不代表i会占4个字节！！！不要陷入误区。</font></strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> i;<span class="comment">//int类型占4个字节，不代表i会占4个字节！！！</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="number">-1</span>-i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">strlen</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例7">例7:</h4><p>**<font color=red>unsigned char(无符号字符）的范围是0~225，当超过225后自动转为0重新累计到225；</font>**下列代码因此陷入死循环。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>;<span class="comment">//0~225</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;=<span class="number">255</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//陷入死循环</span></span><br></pre></td></tr></table></figure><h2 id="浮点型在内存中的存储">浮点型在内存中的存储</h2><p><strong>常见的浮点数：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">3.14159</span></span><br><span class="line"><span class="number">1E10</span></span><br><span class="line">浮点数家族包括：<span class="type">float</span>、<span class="type">double</span>、<span class="type">long</span> <span class="type">double</span>类型。</span><br><span class="line">浮点数表示的范围：<span class="type">float</span>.h</span><br></pre></td></tr></table></figure><h3 id="一个例子">一个例子</h3><p>浮点数存储的例子：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">9</span>;</span><br><span class="line">    <span class="type">float</span> *pFloat = (<span class="type">float</span> *)&amp;n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n的值为：%d\n&quot;</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为：%f\n&quot;</span>,*pFloat);</span><br><span class="line"></span><br><span class="line">    *pFloat = <span class="number">9.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num的值为：%d\n&quot;</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为：%f\n&quot;</span>,*pFloat);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/Image-1680849776251-24.png" style="zoom:33%;"  /><h3 id="浮点数存储规则">浮点数存储规则</h3><p>根据国际标准IEEE（电气和电子工程协会） 754，任意一个二进制浮点数V可以表示成下面的形式：</p><table><thead><tr><th style="text-align:left">(-1)^S * M * 2^E                                                                                                                             (-1)^s 表示符号位，当s=0，V为正数；当s=1，V为负数。                                                         M表示有效数字，1≤M&lt;2。                                                                                                                    2^E表示指数位。</th></tr></thead></table><h4 id="IEEE-754规定：">IEEE 754规定：</h4><p>对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/image-20230407162229299.png" style="zoom:50%;" /><p>对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/image-20230407162359787.png" style="zoom:50%;" /><h5 id="IEEE-754-font-color-red-一些特别规定-font-：">IEEE 754<font color=red>一些特别规定</font>：</h5><p><strong><font color=blue>有效数字M情况：</font></strong></p><p>**在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面的xxxxxx部分。比如保存1.01的时候，只保存01，<strong>等到读取的时候，再把第一位的1加上去</strong>。这样做的目的，是节省1位有效数字。<strong>以32位浮点数为例，留给M只有23位，将第一位的1舍去以后，等于可以保存24位有效数字</strong>。</p><p><strong><font color=blue>指数E情况：</font></strong></p><div style="text-align: justify;font-size:16px;">E为一个无符号整数（unsigned int）如果E为8位，它的取值范围为0~225；如果E为11位，它的取值范围为0~2047。但是，我们知道，科学计数法中的E是可以出现负数的，所以IEEE 754规定，存入内存时E的真实值必须再加上一个中间数，对于8位的E，这个中间数是127；对于11位的E，这个中间数是1023。比如，2^10的E是10，所以保存成32位浮点数时，必须保存成10+127=137，即10001001。</div><p><strong>例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> f = <span class="number">5.5</span>;</span><br><span class="line">    <span class="comment">//5.5---101.1</span></span><br><span class="line">    <span class="comment">//(-1)^0*1.011*2^2</span></span><br><span class="line">    <span class="comment">//S=0;M=1.011;</span></span><br><span class="line">    <span class="comment">//E=2;</span></span><br><span class="line">    <span class="comment">//S  E+127    M</span></span><br><span class="line">    <span class="comment">//0 10000001  01100000000000000000000</span></span><br><span class="line">    <span class="comment">//0100 0000 1011 0000 0000 0000 0000 0000</span></span><br><span class="line">    <span class="comment">//0X40b00000</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//最终在内存里为小端存储</span></span><br></pre></td></tr></table></figure><h4 id="指数E从内存中取出分三种情况">指数E从内存中取出分三种情况</h4><p><strong>1.E不全为0或不全为1</strong></p><p>这时，浮点数就采用下面的规则表示，<strong>即指数E的计算值减去127（或double类型是1023），得到真实值，再将有效数字M前加上第一位的1。</strong></p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/image-20230407173256948.png" style="zoom:80%;" /><p><strong>2.E全为0(即为-127时)</strong></p><p>这时，<strong>浮点数的指数E等于1-127（或者1-1023）即为真实值，有效数字M不再加上第一位的1，而是还原为0.xxxxxx的小数</strong>。这样做是为了表示±0以及接近于0的很小的数字</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/image-20230407173856180.png" style="zoom:80%;" /><p><strong>3.E全为1</strong></p><p>这时，<strong>如果有效数字M全为0，表示±无穷大</strong>(数字很大）（正负取决于符号位s）</p><img src="https://cdn.staticaly.com/gh/AnZhiJJ/Blog_Img@C/%E7%AC%AC%E5%85%AB%E8%8A%82%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/image-20230407174114862.png" style="zoom:80%;" /><p><strong>解释例子（看其中解释）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n = <span class="number">9</span>;</span><br><span class="line">  <span class="comment">//00000000 00000000 00000000 00001001-补码</span></span><br><span class="line"></span><br><span class="line">  <span class="type">float</span>* pFloat = (<span class="type">float</span>*)&amp;n;<span class="comment">//此时*pFloat可以指向int所占的4个字节空间，但是指针只能一个字节一个字节的访问空间</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;n的值：%d\n&quot;</span>, n);<span class="comment">//9</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;*pfloat的值为：%f\n&quot;</span>, *pFloat);<span class="comment">//此时*pFloat会认为其n为浮点数,会对其二进制按照浮点数来排列(S E+127 M)输出</span></span><br><span class="line">  <span class="comment">//首先，将9拆分，得到第一位符号位s=0，后面8位的指数E=00000000，最后23位的有效数字M = 000 0000 0000 0000 0000</span></span><br><span class="line">  <span class="comment">//由于指数E全为0，所以符合上一节的第二种情况。因此，浮点数V就写成：</span></span><br><span class="line">  <span class="comment">//(-1)^0 * 0.00000000000000000001001 * 2^-126</span></span><br><span class="line">  <span class="comment">//V是一个很小的接近于0的正数，所以用十进制小数表示打印出来0.000000</span></span><br><span class="line"></span><br><span class="line">  *pFloat = <span class="number">9.0</span>;</span><br><span class="line">  <span class="comment">//1001.0--9.0的补码</span></span><br><span class="line">  <span class="comment">//1.001*2^3 #S=0 , M=1.001 , E=3---011</span></span><br><span class="line">  <span class="comment">//E+127---10000010</span></span><br><span class="line">  <span class="comment">// S      E+127         M(23bit)</span></span><br><span class="line">  <span class="comment">//(-1)^0 * 10000010 * 00100000000000000000000 ---浮点数在内存表现形式</span></span><br><span class="line">  <span class="comment">//0 10000010 00100000000000000000000 </span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;num的值：%d\n&quot;</span>, n);<span class="comment">//此时n将*pFloat存进去认为是整数，会对其二进制按照整数来排列输出。即</span></span><br><span class="line">  <span class="comment">//01000001 00010000 00000000 00000000</span></span><br><span class="line">  <span class="comment">//0x41 10 00 00--十六进制</span></span><br><span class="line">  <span class="comment">//1091567616--十进制</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为：%f\n&quot;</span>, *pFloat);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
